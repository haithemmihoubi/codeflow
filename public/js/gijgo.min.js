/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/gijgo.min.js":
/*!***********************************!*\
  !*** ./resources/js/gijgo.min.js ***!
  \***********************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar gj = {};\ngj.widget = function () {\n  var a = this;\n  a.xhr = null, a.generateGUID = function () {\n    function a() {\n      return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);\n    }\n\n    return a() + a() + \"-\" + a() + \"-\" + a() + \"-\" + a() + \"-\" + a() + a() + a();\n  }, a.mouseX = function (a) {\n    if (a) {\n      if (a.pageX) return a.pageX;\n      if (a.clientX) return a.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);\n      if (a.touches && a.touches.length) return a.touches[0].pageX;\n      if (a.changedTouches && a.changedTouches.length) return a.changedTouches[0].pageX;\n      if (a.originalEvent && a.originalEvent.touches && a.originalEvent.touches.length) return a.originalEvent.touches[0].pageX;\n      if (a.originalEvent && a.originalEvent.changedTouches && a.originalEvent.changedTouches.length) return a.originalEvent.touches[0].pageX;\n    }\n\n    return null;\n  }, a.mouseY = function (a) {\n    if (a) {\n      if (a.pageY) return a.pageY;\n      if (a.clientY) return a.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);\n      if (a.touches && a.touches.length) return a.touches[0].pageY;\n      if (a.changedTouches && a.changedTouches.length) return a.changedTouches[0].pageY;\n      if (a.originalEvent && a.originalEvent.touches && a.originalEvent.touches.length) return a.originalEvent.touches[0].pageY;\n      if (a.originalEvent && a.originalEvent.changedTouches && a.originalEvent.changedTouches.length) return a.originalEvent.touches[0].pageY;\n    }\n\n    return null;\n  };\n}, gj.widget.prototype.init = function (a, b) {\n  var c, d, e;\n  this.attr(\"data-type\", b), d = $.extend(!0, {}, this.getHTMLConfig() || {}), $.extend(!0, d, a || {}), e = this.getConfig(d, b), this.attr(\"data-guid\", e.guid), this.data(e);\n\n  for (c in e) {\n    gj[b].events.hasOwnProperty(c) && (this.on(c, e[c]), delete e[c]);\n  }\n\n  for (plugin in gj[b].plugins) {\n    gj[b].plugins.hasOwnProperty(plugin) && gj[b].plugins[plugin].configure(this, e, d);\n  }\n\n  return this;\n}, gj.widget.prototype.getConfig = function (a, b) {\n  var c, d, e, f;\n  c = $.extend(!0, {}, gj[b].config.base), d = a.hasOwnProperty(\"uiLibrary\") ? a.uiLibrary : c.uiLibrary, gj[b].config[d] && $.extend(!0, c, gj[b].config[d]), e = a.hasOwnProperty(\"iconsLibrary\") ? a.iconsLibrary : c.iconsLibrary, gj[b].config[e] && $.extend(!0, c, gj[b].config[e]);\n\n  for (f in gj[b].plugins) {\n    gj[b].plugins.hasOwnProperty(f) && ($.extend(!0, c, gj[b].plugins[f].config.base), gj[b].plugins[f].config[d] && $.extend(!0, c, gj[b].plugins[f].config[d]), gj[b].plugins[f].config[e] && $.extend(!0, c, gj[b].plugins[f].config[e]));\n  }\n\n  return $.extend(!0, c, a), c.guid || (c.guid = this.generateGUID()), c;\n}, gj.widget.prototype.getHTMLConfig = function () {\n  var a = this.data(),\n      b = this[0].attributes;\n  return b.width && (a.width = b.width.value), b.height && (a.height = b.height.value), b.value && (a.value = b.value.value), b.align && (a.align = b.align.value), a && a.source && (a.dataSource = a.source, delete a.source), a;\n}, gj.widget.prototype.createDoneHandler = function () {\n  var a = this;\n  return function (b) {\n    \"string\" == typeof b && JSON && (b = JSON.parse(b)), gj[a.data(\"type\")].methods.render(a, b);\n  };\n}, gj.widget.prototype.createErrorHandler = function () {\n  return function (a) {\n    a && a.statusText && \"abort\" !== a.statusText && alert(a.statusText);\n  };\n}, gj.widget.prototype.reload = function (a) {\n  var b,\n      c,\n      d = this.data(),\n      e = this.data(\"type\");\n  return void 0 === d.dataSource && gj[e].methods.useHtmlDataSource(this, d), $.extend(d.params, a), $.isArray(d.dataSource) ? (c = gj[e].methods.filter(this), gj[e].methods.render(this, c)) : \"string\" == typeof d.dataSource ? (b = {\n    url: d.dataSource,\n    data: d.params\n  }, this.xhr && this.xhr.abort(), this.xhr = $.ajax(b).done(this.createDoneHandler()).fail(this.createErrorHandler())) : \"object\" == _typeof(d.dataSource) && (d.dataSource.data || (d.dataSource.data = {}), $.extend(d.dataSource.data, d.params), b = $.extend(!0, {}, d.dataSource), \"json\" === b.dataType && \"object\" == _typeof(b.data) && (b.data = JSON.stringify(b.data)), b.success || (b.success = this.createDoneHandler()), b.error || (b.error = this.createErrorHandler()), this.xhr && this.xhr.abort(), this.xhr = $.ajax(b)), this;\n}, gj.documentManager = {\n  events: {},\n  subscribeForEvent: function subscribeForEvent(a, b, c) {\n    if (gj.documentManager.events[a] && 0 !== gj.documentManager.events[a].length) {\n      if (gj.documentManager.events[a][b]) throw \"Event \" + a + ' for widget with guid=\"' + b + '\" is already attached.';\n      gj.documentManager.events[a].push({\n        widgetId: b,\n        callback: c\n      });\n    } else gj.documentManager.events[a] = [{\n      widgetId: b,\n      callback: c\n    }], $(document).on(a, gj.documentManager.executeCallbacks);\n  },\n  executeCallbacks: function executeCallbacks(a) {\n    var b = gj.documentManager.events[a.type];\n    if (b) for (var c = 0; c < b.length; c++) {\n      b[c].callback(a);\n    }\n  },\n  unsubscribeForEvent: function unsubscribeForEvent(a, b) {\n    var c = !1,\n        d = gj.documentManager.events[a];\n    if (d) for (var e = 0; e < d.length; e++) {\n      d[e].widgetId === b && (d.splice(e, 1), c = !0, 0 === d.length && ($(document).off(a), delete gj.documentManager.events[a]));\n    }\n    if (!c) throw 'The \"' + a + '\" for widget with guid=\"' + b + \"\\\" can't be removed.\";\n  }\n}, gj.core = {\n  messages: {\n    \"en-us\": {\n      monthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      monthShortNames: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      weekDaysMin: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n      weekDaysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      weekDays: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n      am: \"AM\",\n      pm: \"PM\",\n      ok: \"Ok\",\n      cancel: \"Cancel\",\n      titleFormat: \"mmmm yyyy\"\n    }\n  },\n  parseDate: function parseDate(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = 0,\n        i = 0,\n        j = 1,\n        k = 0,\n        l = 0;\n\n    if (a && \"string\" == typeof a) {\n      if (/^\\d+$/.test(a)) g = new Date(a);else if (a.indexOf(\"/Date(\") > -1) g = new Date(parseInt(a.substr(6), 10));else if (a) {\n        for (f = b.split(/[\\s,-\\.\\/\\/\\:]+/), e = a.split(/[\\s]+/), e.length != f.length && (e = a.split(/[\\s,-\\.\\/\\/\\:]+/)), d = 0; d < f.length; d++) {\n          [\"d\", \"dd\"].indexOf(f[d]) > -1 ? j = parseInt(e[d], 10) : [\"m\", \"mm\"].indexOf(f[d]) > -1 ? i = parseInt(e[d], 10) - 1 : \"mmm\" === f[d] ? i = gj.core.messages[c || \"en-us\"].monthShortNames.indexOf(e[d]) : \"mmmm\" === f[d] ? i = gj.core.messages[c || \"en-us\"].monthNames.indexOf(e[d]) : [\"yy\", \"yyyy\"].indexOf(f[d]) > -1 ? (h = parseInt(e[d], 10), \"yy\" === f[d] && (h += 2e3)) : [\"h\", \"hh\", \"H\", \"HH\"].indexOf(f[d]) > -1 ? k = parseInt(e[d], 10) : [\"M\", \"MM\"].indexOf(f[d]) > -1 && (l = parseInt(e[d], 10));\n        }\n\n        g = new Date(h, i, j, k, l);\n      }\n    } else \"number\" == typeof a ? g = new Date(a) : a instanceof Date && (g = a);\n\n    return g;\n  },\n  formatDate: function formatDate(a, b, c) {\n    var d,\n        e,\n        f = \"\",\n        g = b.split(/[\\s,-\\.\\/\\/\\:]+/),\n        h = b.split(/s+|M+|H+|h+|t+|T+|d+|m+|y+/);\n\n    for (h = h.splice(1, h.length - 2), i = 0; i < g.length; i++) {\n      switch (d = h[i] || \"\", g[i]) {\n        case \"s\":\n          f += a.getSeconds() + d;\n          break;\n\n        case \"ss\":\n          f += gj.core.pad(a.getSeconds()) + d;\n          break;\n\n        case \"M\":\n          f += a.getMinutes() + d;\n          break;\n\n        case \"MM\":\n          f += gj.core.pad(a.getMinutes()) + d;\n          break;\n\n        case \"H\":\n          f += a.getHours() + d;\n          break;\n\n        case \"HH\":\n          f += gj.core.pad(a.getHours()) + d;\n          break;\n\n        case \"h\":\n          e = a.getHours() > 12 ? a.getHours() % 12 : a.getHours(), f += e + d;\n          break;\n\n        case \"hh\":\n          e = a.getHours() > 12 ? a.getHours() % 12 : a.getHours(), f += gj.core.pad(e) + d;\n          break;\n\n        case \"tt\":\n          f += (a.getHours() >= 12 ? \"pm\" : \"am\") + d;\n          break;\n\n        case \"TT\":\n          f += (a.getHours() >= 12 ? \"PM\" : \"AM\") + d;\n          break;\n\n        case \"d\":\n          f += a.getDate() + d;\n          break;\n\n        case \"dd\":\n          f += gj.core.pad(a.getDate()) + d;\n          break;\n\n        case \"ddd\":\n          f += gj.core.messages[c || \"en-us\"].weekDaysShort[a.getDay()] + d;\n          break;\n\n        case \"dddd\":\n          f += gj.core.messages[c || \"en-us\"].weekDays[a.getDay()] + d;\n          break;\n\n        case \"m\":\n          f += a.getMonth() + 1 + d;\n          break;\n\n        case \"mm\":\n          f += gj.core.pad(a.getMonth() + 1) + d;\n          break;\n\n        case \"mmm\":\n          f += gj.core.messages[c || \"en-us\"].monthShortNames[a.getMonth()] + d;\n          break;\n\n        case \"mmmm\":\n          f += gj.core.messages[c || \"en-us\"].monthNames[a.getMonth()] + d;\n          break;\n\n        case \"yy\":\n          f += a.getFullYear().toString().substr(2) + d;\n          break;\n\n        case \"yyyy\":\n          f += a.getFullYear() + d;\n      }\n    }\n\n    return f;\n  },\n  pad: function pad(a, b) {\n    for (a = String(a), b = b || 2; a.length < b;) {\n      a = \"0\" + a;\n    }\n\n    return a;\n  },\n  center: function center(a) {\n    var b = $(window).width() / 2 - a.width() / 2,\n        c = $(window).height() / 2 - a.height() / 2;\n    a.css(\"position\", \"absolute\"), a.css(\"left\", b > 0 ? b : 0), a.css(\"top\", c > 0 ? c : 0);\n  },\n  isIE: function isIE() {\n    return !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g);\n  },\n  setChildPosition: function setChildPosition(a, b) {\n    var c = a.getBoundingClientRect(),\n        d = gj.core.height(a, !0),\n        e = gj.core.height(b, !0),\n        f = gj.core.width(a, !0),\n        g = gj.core.width(b, !0),\n        h = window.scrollY || window.pageYOffset || 0,\n        i = window.scrollX || window.pageXOffset || 0;\n    c.top + d + e > window.innerHeight && c.top > e ? b.style.top = Math.round(c.top + h - e - 3) + \"px\" : b.style.top = Math.round(c.top + h + d + 3) + \"px\", c.left + g > document.body.clientWidth ? b.style.left = Math.round(c.left + i + f - g) + \"px\" : b.style.left = Math.round(c.left + i) + \"px\";\n  },\n  height: function height(a, b) {\n    var c,\n        d = window.getComputedStyle(a);\n    return \"border-box\" === d.boxSizing ? (c = parseInt(d.height, 10), gj.core.isIE() && (c += parseInt(d.paddingTop || 0, 10) + parseInt(d.paddingBottom || 0, 10), c += parseInt(d.borderTopWidth || 0, 10) + parseInt(d.borderBottomWidth || 0, 10))) : (c = parseInt(d.height, 10), c += parseInt(d.paddingTop || 0, 10) + parseInt(d.paddingBottom || 0, 10), c += parseInt(d.borderTopWidth || 0, 10) + parseInt(d.borderBottomWidth || 0, 10)), b && (c += parseInt(d.marginTop || 0, 10) + parseInt(d.marginBottom || 0, 10)), c;\n  },\n  width: function width(a, b) {\n    var c,\n        d = window.getComputedStyle(a);\n    return \"border-box\" === d.boxSizing ? c = parseInt(d.width, 10) : (c = parseInt(d.width, 10), c += parseInt(d.paddingLeft || 0, 10) + parseInt(d.paddingRight || 0, 10), c += parseInt(d.borderLeftWidth || 0, 10) + parseInt(d.borderRightWidth || 0, 10)), b && (c += parseInt(d.marginLeft || 0, 10) + parseInt(d.marginRight || 0, 10)), c;\n  },\n  addClasses: function addClasses(a, b) {\n    var c, d;\n    if (b) for (d = b.split(\" \"), c = 0; c < d.length; c++) {\n      a.classList.add(d[c]);\n    }\n  },\n  position: function position(a) {\n    for (var b, c, d = 0, e = 0, f = gj.core.height(a), g = gj.core.width(a); a;) {\n      \"BODY\" == a.tagName ? (b = a.scrollLeft || document.documentElement.scrollLeft, c = a.scrollTop || document.documentElement.scrollTop, d += a.offsetLeft - b, e += a.offsetTop - c) : (d += a.offsetLeft - a.scrollLeft, e += a.offsetTop - a.scrollTop), a = a.offsetParent;\n    }\n\n    return {\n      top: e,\n      left: d,\n      bottom: e + f,\n      right: d + g\n    };\n  },\n  setCaretAtEnd: function setCaretAtEnd(a) {\n    var b;\n    if (a) if (b = a.value.length, document.selection) {\n      a.focus();\n      var c = document.selection.createRange();\n      c.moveStart(\"character\", -b), c.moveStart(\"character\", b), c.moveEnd(\"character\", 0), c.select();\n    } else (a.selectionStart || \"0\" == a.selectionStart) && (a.selectionStart = b, a.selectionEnd = b, a.focus());\n  },\n  getScrollParent: function getScrollParent(a) {\n    return null == a ? null : a.scrollHeight > a.clientHeight ? a : gj.core.getScrollParent(a.parentNode);\n  }\n}, gj.picker = {\n  messages: {\n    \"en-us\": {}\n  }\n}, gj.picker.methods = {\n  initialize: function initialize(a, b, c) {\n    var d,\n        e = c.createPicker(a, b),\n        f = a.parent('div[role=\"wrapper\"]');\n    d = \"bootstrap\" === b.uiLibrary ? $('<span class=\"input-group-addon\">' + b.icons.rightIcon + \"</span>\") : \"bootstrap4\" === b.uiLibrary ? $('<span class=\"input-group-append\"><button class=\"btn btn-outline-secondary border-left-0\" type=\"button\">' + b.icons.rightIcon + \"</button></span>\") : $(b.icons.rightIcon), d.attr(\"role\", \"right-icon\"), 0 === f.length ? (f = $('<div role=\"wrapper\" />').addClass(b.style.wrapper), a.wrap(f)) : f.addClass(b.style.wrapper), f = a.parent('div[role=\"wrapper\"]'), b.width && f.css(\"width\", b.width), a.val(b.value).addClass(b.style.input).attr(\"role\", \"input\"), b.fontSize && a.css(\"font-size\", b.fontSize), \"bootstrap\" === b.uiLibrary || \"bootstrap4\" === b.uiLibrary ? \"small\" === b.size ? (f.addClass(\"input-group-sm\"), a.addClass(\"form-control-sm\")) : \"large\" === b.size && (f.addClass(\"input-group-lg\"), a.addClass(\"form-control-lg\")) : \"small\" === b.size ? f.addClass(\"small\") : \"large\" === b.size && f.addClass(\"large\"), d.on(\"click\", function (b) {\n      e.is(\":visible\") ? a.close() : a.open();\n    }), f.append(d), !0 !== b.footer && (a.on(\"blur\", function () {\n      a.timeout = setTimeout(function () {\n        a.close();\n      }, 500);\n    }), e.mousedown(function () {\n      return clearTimeout(a.timeout), a.focus(), !1;\n    }), e.on(\"click\", function () {\n      clearTimeout(a.timeout), a.focus();\n    }));\n  }\n}, gj.picker.widget = function (a, b) {\n  var c = this,\n      d = gj.picker.methods;\n  return c.destroy = function () {\n    return d.destroy(this);\n  }, a;\n}, gj.picker.widget.prototype = new gj.widget(), gj.picker.widget.constructor = gj.picker.widget, gj.picker.widget.prototype.init = function (a, b, c) {\n  return gj.widget.prototype.init.call(this, a, b), this.attr(\"data-\" + b, \"true\"), gj.picker.methods.initialize(this, this.data(), gj[b].methods), this;\n}, gj.picker.widget.prototype.open = function (a) {\n  var b = this.data(),\n      c = $(\"body\").find('[role=\"picker\"][guid=\"' + this.attr(\"data-guid\") + '\"]');\n  return c.show(), c.closest('div[role=\"modal\"]').show(), b.modal ? gj.core.center(c) : (gj.core.setChildPosition(this[0], c[0]), this.focus()), clearTimeout(this.timeout), gj[a].events.open(this), this;\n}, gj.picker.widget.prototype.close = function (a) {\n  var b = $(\"body\").find('[role=\"picker\"][guid=\"' + this.attr(\"data-guid\") + '\"]');\n  return b.hide(), b.closest('div[role=\"modal\"]').hide(), gj[a].events.close(this), this;\n}, gj.picker.widget.prototype.destroy = function (a) {\n  var b = this.data(),\n      c = this.parent(),\n      d = $(\"body\").find('[role=\"picker\"][guid=\"' + this.attr(\"data-guid\") + '\"]');\n  return b && (this.off(), d.parent('[role=\"modal\"]').length > 0 && d.unwrap(), d.remove(), this.removeData(), this.removeAttr(\"data-type\").removeAttr(\"data-guid\").removeAttr(\"data-\" + a), this.removeClass(), c.children('[role=\"right-icon\"]').remove(), this.unwrap()), this;\n}, gj.dialog = {\n  plugins: {},\n  messages: {}\n}, gj.dialog.config = {\n  base: {\n    autoOpen: !0,\n    closeButtonInHeader: !0,\n    closeOnEscape: !0,\n    draggable: !0,\n    height: \"auto\",\n    locale: \"en-us\",\n    maxHeight: void 0,\n    maxWidth: void 0,\n    minHeight: void 0,\n    minWidth: void 0,\n    modal: !1,\n    resizable: !1,\n    scrollable: !1,\n    title: void 0,\n    uiLibrary: void 0,\n    width: 300,\n    style: {\n      modal: \"gj-modal\",\n      content: \"gj-dialog-md\",\n      header: \"gj-dialog-md-header gj-unselectable\",\n      headerTitle: \"gj-dialog-md-title\",\n      headerCloseButton: \"gj-dialog-md-close\",\n      body: \"gj-dialog-md-body\",\n      footer: \"gj-dialog-footer gj-dialog-md-footer\"\n    }\n  },\n  bootstrap: {\n    style: {\n      modal: \"modal\",\n      content: \"modal-content gj-dialog-bootstrap\",\n      header: \"modal-header\",\n      headerTitle: \"modal-title\",\n      headerCloseButton: \"close\",\n      body: \"modal-body\",\n      footer: \"gj-dialog-footer modal-footer\"\n    }\n  },\n  bootstrap4: {\n    style: {\n      modal: \"modal\",\n      content: \"modal-content gj-dialog-bootstrap4\",\n      header: \"modal-header\",\n      headerTitle: \"modal-title\",\n      headerCloseButton: \"close\",\n      body: \"modal-body\",\n      footer: \"gj-dialog-footer modal-footer\"\n    }\n  }\n}, gj.dialog.events = {\n  initialized: function initialized(a) {\n    a.trigger(\"initialized\");\n  },\n  opening: function opening(a) {\n    a.trigger(\"opening\");\n  },\n  opened: function opened(a) {\n    a.trigger(\"opened\");\n  },\n  closing: function closing(a) {\n    a.trigger(\"closing\");\n  },\n  closed: function closed(a) {\n    a.trigger(\"closed\");\n  },\n  drag: function drag(a) {\n    a.trigger(\"drag\");\n  },\n  dragStart: function dragStart(a) {\n    a.trigger(\"dragStart\");\n  },\n  dragStop: function dragStop(a) {\n    a.trigger(\"dragStop\");\n  },\n  resize: function resize(a) {\n    a.trigger(\"resize\");\n  },\n  resizeStart: function resizeStart(a) {\n    a.trigger(\"resizeStart\");\n  },\n  resizeStop: function resizeStop(a) {\n    a.trigger(\"resizeStop\");\n  }\n}, gj.dialog.methods = {\n  init: function init(a) {\n    return gj.widget.prototype.init.call(this, a, \"dialog\"), gj.dialog.methods.localization(this), gj.dialog.methods.initialize(this), gj.dialog.events.initialized(this), this;\n  },\n  localization: function localization(a) {\n    var b = a.data();\n    void 0 === b.title && (b.title = gj.dialog.messages[b.locale].DefaultTitle);\n  },\n  getHTMLConfig: function getHTMLConfig() {\n    var a = gj.widget.prototype.getHTMLConfig.call(this),\n        b = this[0].attributes;\n    return b.title && (a.title = b.title.value), a;\n  },\n  initialize: function initialize(a) {\n    var b,\n        c,\n        d,\n        e = a.data();\n    a.addClass(e.style.content), gj.dialog.methods.setSize(a), e.closeOnEscape && $(document).keyup(function (b) {\n      27 === b.keyCode && a.close();\n    }), c = a.children('div[data-role=\"body\"]'), 0 === c.length ? (c = $('<div data-role=\"body\"/>').addClass(e.style.body), a.wrapInner(c)) : c.addClass(e.style.body), b = gj.dialog.methods.renderHeader(a), d = a.children('div[data-role=\"footer\"]').addClass(e.style.footer), a.find('[data-role=\"close\"]').on(\"click\", function () {\n      a.close();\n    }), gj.draggable && (e.draggable && gj.dialog.methods.draggable(a, b), e.resizable && gj.dialog.methods.resizable(a)), e.scrollable && e.height && (a.addClass(\"gj-dialog-scrollable\"), a.on(\"opened\", function () {\n      a.children('div[data-role=\"body\"]').css(\"height\", e.height - b.outerHeight() - (d.length ? d.outerHeight() : 0));\n    })), gj.core.center(a), e.modal && a.wrapAll('<div data-role=\"modal\" class=\"' + e.style.modal + '\"/>'), e.autoOpen && a.open();\n  },\n  setSize: function setSize(a) {\n    var b = a.data();\n    b.width && a.css(\"width\", b.width), b.height && a.css(\"height\", b.height);\n  },\n  renderHeader: function renderHeader(a) {\n    var b,\n        c,\n        d,\n        e = a.data();\n    return b = a.children('div[data-role=\"header\"]'), 0 === b.length && (b = $('<div data-role=\"header\" />'), a.prepend(b)), b.addClass(e.style.header), c = b.find('[data-role=\"title\"]'), 0 === c.length && (c = $('<h4 data-role=\"title\">' + e.title + \"</h4>\"), b.append(c)), c.addClass(e.style.headerTitle), d = b.find('[data-role=\"close\"]'), 0 === d.length && e.closeButtonInHeader ? (d = $('<button type=\"button\" data-role=\"close\" title=\"' + gj.dialog.messages[e.locale].Close + '\"><span>×</span></button>'), d.addClass(e.style.headerCloseButton), b.append(d)) : d.length > 0 && !1 === e.closeButtonInHeader ? d.hide() : d.addClass(e.style.headerCloseButton), b;\n  },\n  draggable: function draggable(a, b) {\n    a.appendTo(\"body\"), b.addClass(\"gj-draggable\"), a.draggable({\n      handle: b,\n      start: function start() {\n        a.addClass(\"gj-unselectable\"), gj.dialog.events.dragStart(a);\n      },\n      stop: function stop() {\n        a.removeClass(\"gj-unselectable\"), gj.dialog.events.dragStop(a);\n      }\n    });\n  },\n  resizable: function resizable(a) {\n    var b = {\n      drag: gj.dialog.methods.resize,\n      start: function start() {\n        a.addClass(\"gj-unselectable\"), gj.dialog.events.resizeStart(a);\n      },\n      stop: function stop() {\n        this.removeAttribute(\"style\"), a.removeClass(\"gj-unselectable\"), gj.dialog.events.resizeStop(a);\n      }\n    };\n    a.append($('<div class=\"gj-resizable-handle gj-resizable-n\"></div>').draggable($.extend(!0, {\n      horizontal: !1\n    }, b))), a.append($('<div class=\"gj-resizable-handle gj-resizable-e\"></div>').draggable($.extend(!0, {\n      vertical: !1\n    }, b))), a.append($('<div class=\"gj-resizable-handle gj-resizable-s\"></div>').draggable($.extend(!0, {\n      horizontal: !1\n    }, b))), a.append($('<div class=\"gj-resizable-handle gj-resizable-w\"></div>').draggable($.extend(!0, {\n      vertical: !1\n    }, b))), a.append($('<div class=\"gj-resizable-handle gj-resizable-ne\"></div>').draggable($.extend(!0, {}, b))), a.append($('<div class=\"gj-resizable-handle gj-resizable-nw\"></div>').draggable($.extend(!0, {}, b))), a.append($('<div class=\"gj-resizable-handle gj-resizable-sw\"></div>').draggable($.extend(!0, {}, b))), a.append($('<div class=\"gj-resizable-handle gj-resizable-se\"></div>').draggable($.extend(!0, {}, b)));\n  },\n  resize: function resize(a, b) {\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k = !1;\n    return c = $(this), d = c.parent(), e = gj.core.position(this), offset = {\n      top: b.top - e.top,\n      left: b.left - e.left\n    }, f = d.data(), c.hasClass(\"gj-resizable-n\") ? (g = d.height() - offset.top, i = d.offset().top + offset.top) : c.hasClass(\"gj-resizable-e\") ? h = d.width() + offset.left : c.hasClass(\"gj-resizable-s\") ? g = d.height() + offset.top : c.hasClass(\"gj-resizable-w\") ? (h = d.width() - offset.left, j = d.offset().left + offset.left) : c.hasClass(\"gj-resizable-ne\") ? (g = d.height() - offset.top, i = d.offset().top + offset.top, h = d.width() + offset.left) : c.hasClass(\"gj-resizable-nw\") ? (g = d.height() - offset.top, i = d.offset().top + offset.top, h = d.width() - offset.left, j = d.offset().left + offset.left) : c.hasClass(\"gj-resizable-se\") ? (g = d.height() + offset.top, h = d.width() + offset.left) : c.hasClass(\"gj-resizable-sw\") && (g = d.height() + offset.top, h = d.width() - offset.left, j = d.offset().left + offset.left), g && (!f.minHeight || g >= f.minHeight) && (!f.maxHeight || g <= f.maxHeight) && (d.height(g), i && d.css(\"top\", i), k = !0), h && (!f.minWidth || h >= f.minWidth) && (!f.maxWidth || h <= f.maxWidth) && (d.width(h), j && d.css(\"left\", j), k = !0), k && gj.dialog.events.resize(d), k;\n  },\n  open: function open(a, b) {\n    var c;\n    return gj.dialog.events.opening(a), a.css(\"display\", \"block\"), a.closest('div[data-role=\"modal\"]').css(\"display\", \"block\"), c = a.children('div[data-role=\"footer\"]'), c.length && c.outerHeight() && a.children('div[data-role=\"body\"]').css(\"margin-bottom\", c.outerHeight()), void 0 !== b && a.find('[data-role=\"title\"]').html(b), gj.dialog.events.opened(a), a;\n  },\n  close: function close(a) {\n    return a.is(\":visible\") && (gj.dialog.events.closing(a), a.css(\"display\", \"none\"), a.closest('div[data-role=\"modal\"]').css(\"display\", \"none\"), gj.dialog.events.closed(a)), a;\n  },\n  isOpen: function isOpen(a) {\n    return a.is(\":visible\");\n  },\n  content: function content(a, b) {\n    var c = a.children('div[data-role=\"body\"]');\n    return void 0 === b ? c.html() : c.html(b);\n  },\n  destroy: function destroy(a, b) {\n    var c = a.data();\n    return c && (!1 === b ? a.remove() : (a.close(), a.off(), a.removeData(), a.removeAttr(\"data-type\"), a.removeClass(c.style.content), a.find('[data-role=\"header\"]').removeClass(c.style.header), a.find('[data-role=\"title\"]').removeClass(c.style.headerTitle), a.find('[data-role=\"close\"]').remove(), a.find('[data-role=\"body\"]').removeClass(c.style.body), a.find('[data-role=\"footer\"]').removeClass(c.style.footer))), a;\n  }\n}, gj.dialog.widget = function (a, b) {\n  var c = this,\n      d = gj.dialog.methods;\n  return c.open = function (a) {\n    return d.open(this, a);\n  }, c.close = function () {\n    return d.close(this);\n  }, c.isOpen = function () {\n    return d.isOpen(this);\n  }, c.content = function (a) {\n    return d.content(this, a);\n  }, c.destroy = function (a) {\n    return d.destroy(this, a);\n  }, $.extend(a, c), \"dialog\" !== a.attr(\"data-type\") && d.init.call(a, b), a;\n}, gj.dialog.widget.prototype = new gj.widget(), gj.dialog.widget.constructor = gj.dialog.widget, gj.dialog.widget.prototype.getHTMLConfig = gj.dialog.methods.getHTMLConfig, function (a) {\n  a.fn.dialog = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.dialog.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.dialog.widget(this, a);\n    }\n  };\n}(jQuery), gj.dialog.messages[\"en-us\"] = {\n  Close: \"Close\",\n  DefaultTitle: \"Dialog\"\n}, gj.draggable = {\n  plugins: {}\n}, gj.draggable.config = {\n  base: {\n    handle: void 0,\n    vertical: !0,\n    horizontal: !0,\n    containment: void 0\n  }\n}, gj.draggable.methods = {\n  init: function init(a) {\n    var b,\n        c,\n        d = this;\n    return gj.widget.prototype.init.call(this, a, \"draggable\"), c = this.data(), d.attr(\"data-draggable\", \"true\"), b = gj.draggable.methods.getHandleElement(d), b.on(\"touchstart mousedown\", function (a) {\n      var e = gj.core.position(d[0]);\n      d[0].style.top = e.top + \"px\", d[0].style.left = e.left + \"px\", d[0].style.position = \"fixed\", d.attr(\"draggable-dragging\", !0), d.removeAttr(\"draggable-x\").removeAttr(\"draggable-y\"), gj.documentManager.subscribeForEvent(\"touchmove\", d.data(\"guid\"), gj.draggable.methods.createMoveHandler(d, b, c)), gj.documentManager.subscribeForEvent(\"mousemove\", d.data(\"guid\"), gj.draggable.methods.createMoveHandler(d, b, c));\n    }), gj.documentManager.subscribeForEvent(\"mouseup\", d.data(\"guid\"), gj.draggable.methods.createUpHandler(d)), gj.documentManager.subscribeForEvent(\"touchend\", d.data(\"guid\"), gj.draggable.methods.createUpHandler(d)), gj.documentManager.subscribeForEvent(\"touchcancel\", d.data(\"guid\"), gj.draggable.methods.createUpHandler(d)), d;\n  },\n  getHandleElement: function getHandleElement(a) {\n    var b = a.data(\"handle\");\n    return b && b.length ? b : a;\n  },\n  createUpHandler: function createUpHandler(a) {\n    return function (b) {\n      \"true\" === a.attr(\"draggable-dragging\") && (a.attr(\"draggable-dragging\", !1), gj.documentManager.unsubscribeForEvent(\"mousemove\", a.data(\"guid\")), gj.documentManager.unsubscribeForEvent(\"touchmove\", a.data(\"guid\")), gj.draggable.events.stop(a, {\n        x: a.mouseX(b),\n        y: a.mouseY(b)\n      }));\n    };\n  },\n  createMoveHandler: function createMoveHandler(a, b, c) {\n    return function (b) {\n      var d, e, f, g, h, i;\n      \"true\" === a.attr(\"draggable-dragging\") && (d = Math.round(a.mouseX(b)), e = Math.round(a.mouseY(b)), h = a.attr(\"draggable-x\"), i = a.attr(\"draggable-y\"), h && i ? (f = c.horizontal ? d - parseInt(h, 10) : 0, g = c.vertical ? e - parseInt(i, 10) : 0, gj.draggable.methods.move(a[0], c, f, g, d, e)) : gj.draggable.events.start(a, d, e), a.attr(\"draggable-x\", d), a.attr(\"draggable-y\", e));\n    };\n  },\n  move: function move(a, b, c, d, e, f) {\n    var g,\n        h,\n        i,\n        j = gj.core.position(a),\n        k = j.top + d,\n        l = j.left + c;\n    b.containment && (g = gj.core.position(b.containment), h = g.top + gj.core.height(b.containment) - gj.core.height(a), i = g.left + gj.core.width(b.containment) - gj.core.width(a), k > g.top && k < h ? (g.top >= f || g.bottom <= f) && (k = j.top) : k = k <= g.top ? g.top + 1 : h - 1, l > g.left && l < i ? (g.left >= e || g.right <= e) && (l = j.left) : l = l <= g.left ? g.left + 1 : i - 1), !1 !== gj.draggable.events.drag($(a), l, k, e, f) && (a.style.top = k + \"px\", a.style.left = l + \"px\");\n  },\n  destroy: function destroy(a) {\n    return \"true\" === a.attr(\"data-draggable\") && (gj.documentManager.unsubscribeForEvent(\"mouseup\", a.data(\"guid\")), a.removeData(), a.removeAttr(\"data-guid\").removeAttr(\"data-type\").removeAttr(\"data-draggable\"), a.removeAttr(\"draggable-x\").removeAttr(\"draggable-y\").removeAttr(\"draggable-dragging\"), a[0].style.top = \"\", a[0].style.left = \"\", a[0].style.position = \"\", a.off(\"drag\").off(\"start\").off(\"stop\"), gj.draggable.methods.getHandleElement(a).off(\"mousedown\")), a;\n  }\n}, gj.draggable.events = {\n  drag: function drag(a, b, c, d, e) {\n    return a.triggerHandler(\"drag\", [{\n      left: b,\n      top: c\n    }, {\n      x: d,\n      y: e\n    }]);\n  },\n  start: function start(a, b, c) {\n    a.triggerHandler(\"start\", [{\n      x: b,\n      y: c\n    }]);\n  },\n  stop: function stop(a, b) {\n    a.triggerHandler(\"stop\", [b]);\n  }\n}, gj.draggable.widget = function (a, b) {\n  var c = this,\n      d = gj.draggable.methods;\n  return a.destroy || (c.destroy = function () {\n    return d.destroy(this);\n  }), $.extend(a, c), \"true\" !== a.attr(\"data-draggable\") && d.init.call(a, b), a;\n}, gj.draggable.widget.prototype = new gj.widget(), gj.draggable.widget.constructor = gj.draggable.widget, function (a) {\n  a.fn.draggable = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.draggable.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.draggable.widget(this, a);\n    }\n  };\n}(jQuery), gj.droppable = {\n  plugins: {}\n}, gj.droppable.config = {\n  hoverClass: void 0\n}, gj.droppable.methods = {\n  init: function init(a) {\n    var b = this;\n    return gj.widget.prototype.init.call(this, a, \"droppable\"), b.attr(\"data-droppable\", \"true\"), gj.documentManager.subscribeForEvent(\"mousedown\", b.data(\"guid\"), gj.droppable.methods.createMouseDownHandler(b)), gj.documentManager.subscribeForEvent(\"mousemove\", b.data(\"guid\"), gj.droppable.methods.createMouseMoveHandler(b)), gj.documentManager.subscribeForEvent(\"mouseup\", b.data(\"guid\"), gj.droppable.methods.createMouseUpHandler(b)), b;\n  },\n  createMouseDownHandler: function createMouseDownHandler(a) {\n    return function (b) {\n      a.isDragging = !0;\n    };\n  },\n  createMouseMoveHandler: function createMouseMoveHandler(a) {\n    return function (b) {\n      if (a.isDragging) {\n        var c = a.data(\"hoverClass\"),\n            d = {\n          x: a.mouseX(b),\n          y: a.mouseY(b)\n        },\n            e = gj.droppable.methods.isOver(a, d);\n        e != a.isOver && (e ? (c && a.addClass(c), gj.droppable.events.over(a, d)) : (c && a.removeClass(c), gj.droppable.events.out(a))), a.isOver = e;\n      }\n    };\n  },\n  createMouseUpHandler: function createMouseUpHandler(a) {\n    return function (b) {\n      var c = {\n        left: a.mouseX(b),\n        top: a.mouseY(b)\n      };\n      a.isDragging = !1, gj.droppable.methods.isOver(a, c) && gj.droppable.events.drop(a);\n    };\n  },\n  isOver: function isOver(a, b) {\n    var c = a.offset().top,\n        d = a.offset().left;\n    return b.x > d && b.x < d + a.outerWidth(!0) && b.y > c && b.y < c + a.outerHeight(!0);\n  },\n  destroy: function destroy(a) {\n    return \"true\" === a.attr(\"data-droppable\") && (gj.documentManager.unsubscribeForEvent(\"mousedown\", a.data(\"guid\")), gj.documentManager.unsubscribeForEvent(\"mousemove\", a.data(\"guid\")), gj.documentManager.unsubscribeForEvent(\"mouseup\", a.data(\"guid\")), a.removeData(), a.removeAttr(\"data-guid\"), a.removeAttr(\"data-droppable\"), a.off(\"drop\").off(\"over\").off(\"out\")), a;\n  }\n}, gj.droppable.events = {\n  drop: function drop(a, b, c) {\n    a.trigger(\"drop\", [{\n      top: c,\n      left: b\n    }]);\n  },\n  over: function over(a, b) {\n    a.trigger(\"over\", [b]);\n  },\n  out: function out(a) {\n    a.trigger(\"out\");\n  }\n}, gj.droppable.widget = function (a, b) {\n  var c = this,\n      d = gj.droppable.methods;\n  return c.isOver = !1, c.isDragging = !1, c.destroy = function () {\n    return d.destroy(this);\n  }, c.isOver = function (a) {\n    return d.isOver(this, a);\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-droppable\") && d.init.call(a, b), a;\n}, gj.droppable.widget.prototype = new gj.widget(), gj.droppable.widget.constructor = gj.droppable.widget, function (a) {\n  a.fn.droppable = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.droppable.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.droppable.widget(this, a);\n    }\n  };\n}(jQuery), gj.grid = {\n  plugins: {},\n  messages: {}\n}, gj.grid.config = {\n  base: {\n    dataSource: void 0,\n    columns: [],\n    autoGenerateColumns: !1,\n    defaultColumnSettings: {\n      hidden: !1,\n      width: void 0,\n      sortable: !1,\n      type: \"text\",\n      title: void 0,\n      field: void 0,\n      align: void 0,\n      cssClass: void 0,\n      headerCssClass: void 0,\n      tooltip: void 0,\n      icon: void 0,\n      events: void 0,\n      format: \"mm/dd/yyyy\",\n      decimalDigits: void 0,\n      tmpl: void 0,\n      stopPropagation: !1,\n      renderer: void 0,\n      filter: void 0\n    },\n    mapping: {\n      dataField: \"records\",\n      totalRecordsField: \"total\"\n    },\n    params: {},\n    paramNames: {\n      sortBy: \"sortBy\",\n      direction: \"direction\"\n    },\n    uiLibrary: \"materialdesign\",\n    iconsLibrary: \"materialicons\",\n    selectionType: \"single\",\n    selectionMethod: \"basic\",\n    autoLoad: !0,\n    notFoundText: void 0,\n    width: void 0,\n    minWidth: void 0,\n    headerRowHeight: \"fixed\",\n    bodyRowHeight: \"autogrow\",\n    fontSize: void 0,\n    primaryKey: void 0,\n    locale: \"en-us\",\n    defaultIconColumnWidth: 70,\n    defaultCheckBoxColumnWidth: 70,\n    style: {\n      wrapper: \"gj-grid-wrapper\",\n      table: \"gj-grid gj-grid-md\",\n      loadingCover: \"gj-grid-loading-cover\",\n      loadingText: \"gj-grid-loading-text\",\n      header: {\n        cell: void 0,\n        sortable: \"gj-cursor-pointer gj-unselectable\"\n      },\n      content: {\n        rowSelected: \"gj-grid-md-select\"\n      }\n    },\n    icons: {\n      asc: \"▲\",\n      desc: \"▼\"\n    }\n  },\n  bootstrap: {\n    style: {\n      wrapper: \"gj-grid-wrapper\",\n      table: \"gj-grid gj-grid-bootstrap gj-grid-bootstrap-3 table table-bordered table-hover\",\n      content: {\n        rowSelected: \"active\"\n      }\n    },\n    iconsLibrary: \"glyphicons\",\n    defaultIconColumnWidth: 34,\n    defaultCheckBoxColumnWidth: 36\n  },\n  bootstrap4: {\n    style: {\n      wrapper: \"gj-grid-wrapper\",\n      table: \"gj-grid gj-grid-bootstrap gj-grid-bootstrap-4 table table-bordered table-hover\",\n      content: {\n        rowSelected: \"active\"\n      }\n    },\n    defaultIconColumnWidth: 42,\n    defaultCheckBoxColumnWidth: 44\n  },\n  materialicons: {\n    icons: {\n      asc: '<i class=\"gj-icon arrow-upward\" />',\n      desc: '<i class=\"gj-icon arrow-downward\" />'\n    }\n  },\n  fontawesome: {\n    icons: {\n      asc: '<i class=\"fa fa-sort-amount-asc\" aria-hidden=\"true\"></i>',\n      desc: '<i class=\"fa fa-sort-amount-desc\" aria-hidden=\"true\"></i>'\n    }\n  },\n  glyphicons: {\n    icons: {\n      asc: '<span class=\"glyphicon glyphicon-sort-by-alphabet\" />',\n      desc: '<span class=\"glyphicon glyphicon-sort-by-alphabet-alt\" />'\n    }\n  }\n}, gj.grid.events = {\n  beforeEmptyRowInsert: function beforeEmptyRowInsert(a, b) {\n    return a.triggerHandler(\"beforeEmptyRowInsert\", [b]);\n  },\n  dataBinding: function dataBinding(a, b) {\n    return a.triggerHandler(\"dataBinding\", [b]);\n  },\n  dataBound: function dataBound(a, b, c) {\n    return a.triggerHandler(\"dataBound\", [b, c]);\n  },\n  rowDataBound: function rowDataBound(a, b, c, d) {\n    return a.triggerHandler(\"rowDataBound\", [b, c, d]);\n  },\n  cellDataBound: function cellDataBound(a, b, c, d, e) {\n    return a.triggerHandler(\"cellDataBound\", [b, c, d, e]);\n  },\n  rowSelect: function rowSelect(a, b, c, d) {\n    return a.triggerHandler(\"rowSelect\", [b, c, d]);\n  },\n  rowUnselect: function rowUnselect(a, b, c, d) {\n    return a.triggerHandler(\"rowUnselect\", [b, c, d]);\n  },\n  rowRemoving: function rowRemoving(a, b, c, d) {\n    return a.triggerHandler(\"rowRemoving\", [b, c, d]);\n  },\n  destroying: function destroying(a) {\n    return a.triggerHandler(\"destroying\");\n  },\n  columnHide: function columnHide(a, b) {\n    return a.triggerHandler(\"columnHide\", [b]);\n  },\n  columnShow: function columnShow(a, b) {\n    return a.triggerHandler(\"columnShow\", [b]);\n  },\n  initialized: function initialized(a) {\n    return a.triggerHandler(\"initialized\");\n  },\n  dataFiltered: function dataFiltered(a, b) {\n    return a.triggerHandler(\"dataFiltered\", [b]);\n  }\n}, gj.grid.methods = {\n  init: function init(a) {\n    return gj.widget.prototype.init.call(this, a, \"grid\"), gj.grid.methods.initialize(this), this.data(\"autoLoad\") && this.reload(), this;\n  },\n  getConfig: function getConfig(a, b) {\n    var c = gj.widget.prototype.getConfig.call(this, a, b);\n    return gj.grid.methods.setDefaultColumnConfig(c.columns, c.defaultColumnSettings), c;\n  },\n  setDefaultColumnConfig: function setDefaultColumnConfig(a, b) {\n    var c, d;\n    if (a && a.length) for (d = 0; d < a.length; d++) {\n      c = $.extend(!0, {}, b), $.extend(!0, c, a[d]), a[d] = c;\n    }\n  },\n  getHTMLConfig: function getHTMLConfig() {\n    var a = gj.widget.prototype.getHTMLConfig.call(this);\n    return a.columns = [], this.find(\"thead > tr > th\").each(function () {\n      var b = $(this),\n          c = b.text(),\n          d = gj.widget.prototype.getHTMLConfig.call(b);\n      d.title = c, d.field || (d.field = c), d.events && (d.events = gj.grid.methods.eventsParser(d.events)), a.columns.push(d);\n    }), a;\n  },\n  eventsParser: function eventsParser(events) {\n    var result = {},\n        list,\n        i,\n        key,\n        func,\n        position;\n\n    for (list = events.split(\",\"), i = 0; i < list.length; i++) {\n      (position = list[i].indexOf(\":\")) > 0 && (key = $.trim(list[i].substr(0, position)), func = $.trim(list[i].substr(position + 1, list[i].length)), result[key] = eval(\"window.\" + func));\n    }\n\n    return result;\n  },\n  initialize: function initialize(a) {\n    var b = a.data(),\n        c = a.parent('div[data-role=\"wrapper\"]');\n    gj.grid.methods.localization(b), 0 === c.length ? (c = $('<div data-role=\"wrapper\" />').addClass(b.style.wrapper), a.wrap(c)) : c.addClass(b.style.wrapper), b.width && a.parent().css(\"width\", b.width), b.minWidth && a.css(\"min-width\", b.minWidth), b.fontSize && a.css(\"font-size\", b.fontSize), \"autogrow\" === b.headerRowHeight && a.addClass(\"autogrow-header-row\"), \"fixed\" === b.bodyRowHeight && a.addClass(\"fixed-body-rows\"), a.addClass(b.style.table), \"checkbox\" === b.selectionMethod && b.columns.splice(gj.grid.methods.getColumnPositionNotInRole(a), 0, {\n      title: \"\",\n      width: b.defaultCheckBoxColumnWidth,\n      align: \"center\",\n      type: \"checkbox\",\n      role: \"selectRow\",\n      events: {\n        click: function click(b) {\n          gj.grid.methods.setSelected(a, b.data.id, $(this).closest(\"tr\"));\n        }\n      },\n      headerCssClass: \"gj-grid-select-all\",\n      stopPropagation: !0\n    }), 0 === a.children(\"tbody\").length && a.append($(\"<tbody/>\")), gj.grid.methods.renderHeader(a), gj.grid.methods.appendEmptyRow(a, \"&nbsp;\"), gj.grid.events.initialized(a);\n  },\n  localization: function localization(a) {\n    a.notFoundText || (a.notFoundText = gj.grid.messages[a.locale].NoRecordsFound);\n  },\n  renderHeader: function renderHeader(a) {\n    var b, c, d, e, f, g, h, i, j;\n\n    for (b = a.data(), c = b.columns, d = b.style.header, e = a.children(\"thead\"), 0 === e.length && (e = $(\"<thead />\"), a.prepend(e)), f = $('<tr data-role=\"caption\" />'), i = 0; i < c.length; i += 1) {\n      g = $('<th data-field=\"' + (c[i].field || \"\") + '\" />'), c[i].width ? g.attr(\"width\", c[i].width) : \"checkbox\" === c[i].type && g.attr(\"width\", b.defaultIconColumnWidth), g.addClass(d.cell), c[i].headerCssClass && g.addClass(c[i].headerCssClass), g.css(\"text-align\", c[i].align || \"left\"), \"checkbox\" === b.selectionMethod && \"multiple\" === b.selectionType && \"checkbox\" === c[i].type && \"selectRow\" === c[i].role ? (j = g.find('input[data-role=\"selectAll\"]'), 0 === j.length && (j = $('<input type=\"checkbox\" data-role=\"selectAll\" />'), g.append(j), j.checkbox({\n        uiLibrary: b.uiLibrary\n      })), j.off(\"click\").on(\"click\", function () {\n        this.checked ? a.selectAll() : a.unSelectAll();\n      })) : (h = $('<div data-role=\"title\"/>').html(void 0 === c[i].title ? c[i].field : c[i].title), g.append(h), c[i].sortable && (h.addClass(d.sortable), h.on(\"click\", gj.grid.methods.createSortHandler(a, c[i])))), c[i].hidden && g.hide(), f.append(g);\n    }\n\n    e.empty().append(f);\n  },\n  createSortHandler: function createSortHandler(a, b) {\n    return function () {\n      var c,\n          d = {};\n      a.count() > 0 && (c = a.data(), d[c.paramNames.sortBy] = b.field, b.direction = \"asc\" === b.direction ? \"desc\" : \"asc\", d[c.paramNames.direction] = b.direction, a.reload(d));\n    };\n  },\n  updateHeader: function updateHeader(a) {\n    var b,\n        c,\n        d = a.data(),\n        e = d.params[d.paramNames.sortBy],\n        f = d.params[d.paramNames.direction];\n    a.find('thead tr th [data-role=\"sorticon\"]').remove(), e && (position = gj.grid.methods.getColumnPosition(a.data(\"columns\"), e), position > -1 && (c = a.find(\"thead tr th:eq(\" + position + ') div[data-role=\"title\"]'), b = $('<div data-role=\"sorticon\" class=\"gj-unselectable\" />').append(\"desc\" === f ? d.icons.desc : d.icons.asc), c.after(b)));\n  },\n  useHtmlDataSource: function useHtmlDataSource(a, b) {\n    var c,\n        d,\n        e,\n        f,\n        g = [],\n        h = a.find('tbody tr[data-role != \"empty\"]');\n\n    for (c = 0; c < h.length; c++) {\n      for (e = $(h[c]).find(\"td\"), f = {}, d = 0; d < e.length; d++) {\n        f[b.columns[d].field] = $(e[d]).html();\n      }\n\n      g.push(f);\n    }\n\n    b.dataSource = g;\n  },\n  startLoading: function startLoading(a) {\n    var b, c, d, e, f, g, h;\n    gj.grid.methods.stopLoading(a), h = a.data(), 0 !== a.outerHeight() && (b = a.children(\"tbody\"), e = b.outerWidth(!1), f = b.outerHeight(!1), g = Math.abs(a.parent().offset().top - b.offset().top), c = $('<div data-role=\"loading-cover\" />').addClass(h.style.loadingCover).css({\n      width: e,\n      height: f,\n      top: g\n    }), d = $('<div data-role=\"loading-text\">' + gj.grid.messages[h.locale].Loading + \"</div>\").addClass(h.style.loadingText), d.insertAfter(a), c.insertAfter(a), d.css({\n      top: g + f / 2 - d.outerHeight(!1) / 2,\n      left: e / 2 - d.outerWidth(!1) / 2\n    }));\n  },\n  stopLoading: function stopLoading(a) {\n    a.parent().find('div[data-role=\"loading-cover\"]').remove(), a.parent().find('div[data-role=\"loading-text\"]').remove();\n  },\n  appendEmptyRow: function appendEmptyRow(a, b) {\n    var c, d, e, f;\n    c = a.data(), d = $('<tr data-role=\"empty\"/>'), e = $(\"<td/>\").css({\n      width: \"100%\",\n      \"text-align\": \"center\"\n    }), e.attr(\"colspan\", gj.grid.methods.countVisibleColumns(a)), f = $(\"<div />\").html(b || c.notFoundText), e.append(f), d.append(e), gj.grid.events.beforeEmptyRowInsert(a, d), a.append(d);\n  },\n  autoGenerateColumns: function autoGenerateColumns(a, b) {\n    var c,\n        d,\n        e,\n        f,\n        g = a.data();\n\n    if (g.columns = [], b.length > 0) {\n      for (c = Object.getOwnPropertyNames(b[0]), f = 0; f < c.length; f++) {\n        d = b[0][c[f]], e = \"text\", d && (\"number\" == typeof d ? e = \"number\" : d.indexOf(\"/Date(\") > -1 && (e = \"date\")), g.columns.push({\n          field: c[f],\n          type: e\n        });\n      }\n\n      gj.grid.methods.setDefaultColumnConfig(g.columns, g.defaultColumnSettings);\n    }\n\n    gj.grid.methods.renderHeader(a);\n  },\n  loadData: function loadData(a) {\n    var b, c, d, e, f, g, h, i;\n\n    for (b = a.data(), c = a.getAll(), gj.grid.events.dataBinding(a, c), e = c.length, gj.grid.methods.stopLoading(a), b.autoGenerateColumns && gj.grid.methods.autoGenerateColumns(a, c), g = a.children(\"tbody\"), \"checkbox\" === b.selectionMethod && \"multiple\" === b.selectionType && a.find('thead input[data-role=\"selectAll\"]').prop(\"checked\", !1), g.children(\"tr\").not('[data-role=\"row\"]').remove(), 0 === e && (g.empty(), gj.grid.methods.appendEmptyRow(a)), h = g.children(\"tr\"), f = h.length, d = 0; d < f; d++) {\n      if (!(d < e)) {\n        g.find('tr[data-role=\"row\"]:gt(' + (d - 1) + \")\").remove();\n        break;\n      }\n\n      i = h.eq(d), gj.grid.methods.renderRow(a, i, c[d], d);\n    }\n\n    for (d = f; d < e; d++) {\n      gj.grid.methods.renderRow(a, null, c[d], d);\n    }\n\n    gj.grid.events.dataBound(a, c, b.totalRecords);\n  },\n  getId: function getId(a, b, c) {\n    return b && a[b] ? a[b] : c;\n  },\n  renderRow: function renderRow(a, b, c, d) {\n    var e, f, g, h, i;\n\n    for (h = a.data(), b && 0 !== b.length ? (i = \"update\", b.removeClass(h.style.content.rowSelected).removeAttr(\"data-selected\").off(\"click\")) : (i = \"create\", b = $('<tr data-role=\"row\"/>'), a.children(\"tbody\").append(b)), e = gj.grid.methods.getId(c, h.primaryKey, d + 1), b.attr(\"data-position\", d + 1), \"checkbox\" !== h.selectionMethod && b.on(\"click\", gj.grid.methods.createRowClickHandler(a, e)), g = 0; g < h.columns.length; g++) {\n      \"update\" === i ? (f = b.find(\"td:eq(\" + g + \")\"), gj.grid.methods.renderCell(a, f, h.columns[g], c, e)) : (f = gj.grid.methods.renderCell(a, null, h.columns[g], c, e), b.append(f));\n    }\n\n    gj.grid.events.rowDataBound(a, b, e, c);\n  },\n  renderCell: function renderCell(a, b, c, d, e, f) {\n    var g, h;\n    if (b && 0 !== b.length ? (g = b.find('div[data-role=\"display\"]'), f = \"update\") : (b = $(\"<td/>\"), g = $('<div data-role=\"display\" />'), c.align && b.css(\"text-align\", c.align), c.cssClass && b.addClass(c.cssClass), b.append(g), f = \"create\"), gj.grid.methods.renderDisplayElement(a, g, c, d, e, f), \"update\" === f && (b.off(), g.off()), c.events) for (h in c.events) {\n      c.events.hasOwnProperty(h) && b.on(h, {\n        id: e,\n        field: c.field,\n        record: d\n      }, gj.grid.methods.createCellEventHandler(c, c.events[h]));\n    }\n    return c.hidden && b.hide(), gj.grid.events.cellDataBound(a, g, e, c, d), b;\n  },\n  createCellEventHandler: function createCellEventHandler(a, b) {\n    return function (c) {\n      a.stopPropagation && c.stopPropagation(), b.call(this, c);\n    };\n  },\n  renderDisplayElement: function renderDisplayElement(a, b, c, d, e, f) {\n    var g, h;\n    \"checkbox\" === c.type && gj.checkbox ? \"create\" === f ? (h = $('<input type=\"checkbox\" />').val(e).prop(\"checked\", !!d[c.field]), c.role && h.attr(\"data-role\", c.role), b.append(h), h.checkbox({\n      uiLibrary: a.data(\"uiLibrary\")\n    }), \"selectRow\" === c.role ? h.on(\"click\", function () {\n      return !1;\n    }) : h.prop(\"disabled\", !0)) : b.find('input[type=\"checkbox\"]').val(e).prop(\"checked\", !!d[c.field]) : \"icon\" === c.type ? \"create\" === f && (b.append($(\"<span/>\").addClass(c.icon).css({\n      cursor: \"pointer\"\n    })), \"bootstrap\" === a.data().uiLibrary && b.children(\"span\").addClass(\"glyphicon\"), c.stopPropagation = !0) : c.tmpl ? (g = c.tmpl, c.tmpl.replace(/\\{(.+?)\\}/g, function (a, b) {\n      g = g.replace(a, gj.grid.methods.formatText(d[b], c));\n    }), b.html(g)) : c.renderer && \"function\" == typeof c.renderer ? (g = c.renderer(d[c.field], d, b.parent(), b, e, a)) && b.html(g) : (d[c.field] = gj.grid.methods.formatText(d[c.field], c), !c.tooltip && d[c.field] && b.attr(\"title\", d[c.field]), b.html(d[c.field])), c.tooltip && \"create\" === f && b.attr(\"title\", c.tooltip);\n  },\n  formatText: function formatText(a, b) {\n    return a = a && [\"date\", \"time\", \"datetime\"].indexOf(b.type) > -1 ? gj.core.formatDate(gj.core.parseDate(a, b.format), b.format) : void 0 === a || null === a ? \"\" : a.toString(), b.decimalDigits && a && (a = parseFloat(a).toFixed(b.decimalDigits)), a;\n  },\n  setRecordsData: function setRecordsData(a, b) {\n    var c = [],\n        d = 0,\n        e = a.data();\n    return $.isArray(b) ? (c = b, d = b.length) : e && e.mapping && $.isArray(b[e.mapping.dataField]) && (c = b[e.mapping.dataField], (d = b[e.mapping.totalRecordsField]) && !isNaN(d) || (d = 0)), a.data(\"records\", c), a.data(\"totalRecords\", d), c;\n  },\n  createRowClickHandler: function createRowClickHandler(a, b) {\n    return function () {\n      gj.grid.methods.setSelected(a, b, $(this));\n    };\n  },\n  selectRow: function selectRow(a, b, c, d) {\n    var e;\n    return c.addClass(b.style.content.rowSelected), c.attr(\"data-selected\", \"true\"), \"checkbox\" === b.selectionMethod && (e = c.find('input[type=\"checkbox\"][data-role=\"selectRow\"]'), e.length && !e.prop(\"checked\") && e.prop(\"checked\", !0), \"multiple\" === b.selectionType && a.getSelections().length === a.count(!1) && a.find('thead input[data-role=\"selectAll\"]').prop(\"checked\", !0)), gj.grid.events.rowSelect(a, c, d, a.getById(d));\n  },\n  unselectRow: function unselectRow(a, b, c, d) {\n    var e;\n    if (\"true\" === c.attr(\"data-selected\")) return c.removeClass(b.style.content.rowSelected), \"checkbox\" === b.selectionMethod && (e = c.find('td input[type=\"checkbox\"][data-role=\"selectRow\"]'), e.length && e.prop(\"checked\") && e.prop(\"checked\", !1), \"multiple\" === b.selectionType && a.find('thead input[data-role=\"selectAll\"]').prop(\"checked\", !1)), c.removeAttr(\"data-selected\"), gj.grid.events.rowUnselect(a, c, d, a.getById(d));\n  },\n  setSelected: function setSelected(a, b, c) {\n    var d = a.data();\n    return c && c.length || (c = gj.grid.methods.getRowById(a, b)), c && (\"true\" === c.attr(\"data-selected\") ? gj.grid.methods.unselectRow(a, d, c, b) : (\"single\" === d.selectionType && c.siblings('[data-selected=\"true\"]').each(function () {\n      var b = $(this),\n          c = gj.grid.methods.getId(b, d.primaryKey, b.data(\"position\"));\n      gj.grid.methods.unselectRow(a, d, b, c);\n    }), gj.grid.methods.selectRow(a, d, c, b))), a;\n  },\n  selectAll: function selectAll(a) {\n    var b = a.data();\n    return a.find('tbody tr[data-role=\"row\"]').each(function () {\n      var c = $(this),\n          d = c.data(\"position\"),\n          e = a.get(d),\n          f = gj.grid.methods.getId(e, b.primaryKey, d);\n      gj.grid.methods.selectRow(a, b, c, f);\n    }), a.find('thead input[data-role=\"selectAll\"]').prop(\"checked\", !0), a;\n  },\n  unSelectAll: function unSelectAll(a) {\n    var b = a.data();\n    return a.find(\"tbody tr\").each(function () {\n      var c = $(this),\n          d = c.data(\"position\"),\n          e = a.get(d),\n          f = gj.grid.methods.getId(e, b.primaryKey, d);\n      gj.grid.methods.unselectRow(a, b, c, f), c.find('input[type=\"checkbox\"][data-role=\"selectRow\"]').prop(\"checked\", !1);\n    }), a.find('thead input[data-role=\"selectAll\"]').prop(\"checked\", !1), a;\n  },\n  getSelected: function getSelected(a) {\n    var b,\n        c,\n        d,\n        e = null;\n    return b = a.find('tbody>tr[data-selected=\"true\"]'), b.length > 0 && (d = $(b[0]).data(\"position\"), c = a.get(d), e = gj.grid.methods.getId(c, a.data().primaryKey, d)), e;\n  },\n  getSelectedRows: function getSelectedRows(a) {\n    a.data();\n    return a.find('tbody>tr[data-selected=\"true\"]');\n  },\n  getSelections: function getSelections(a) {\n    var b,\n        c,\n        d = [],\n        e = a.data(),\n        f = gj.grid.methods.getSelectedRows(a);\n    return 0 < f.length && f.each(function () {\n      b = $(this).data(\"position\"), c = a.get(b), d.push(gj.grid.methods.getId(c, e.primaryKey, b));\n    }), d;\n  },\n  getById: function getById(a, b) {\n    var c,\n        d = null,\n        e = a.data(\"primaryKey\"),\n        f = a.data(\"records\");\n\n    if (e) {\n      for (c = 0; c < f.length; c++) {\n        if (f[c][e] == b) {\n          d = f[c];\n          break;\n        }\n      }\n    } else d = a.get(b);\n\n    return d;\n  },\n  getRecVPosById: function getRecVPosById(a, b) {\n    var c,\n        d = b,\n        e = a.data();\n    if (e.primaryKey) for (c = 0; c < e.dataSource.length; c++) {\n      if (e.dataSource[c][e.primaryKey] == b) {\n        d = c;\n        break;\n      }\n    }\n    return d;\n  },\n  getRowById: function getRowById(a, b) {\n    var c,\n        d,\n        e = a.getAll(!1),\n        f = a.data(\"primaryKey\"),\n        g = void 0;\n\n    if (f) {\n      for (d = 0; d < e.length; d++) {\n        if (e[d][f] == b) {\n          c = d + 1;\n          break;\n        }\n      }\n    } else c = b;\n\n    return c && (g = a.children(\"tbody\").children('tr[data-position=\"' + c + '\"]')), g;\n  },\n  getByPosition: function getByPosition(a, b) {\n    return a.getAll(!1)[b - 1];\n  },\n  getColumnPosition: function getColumnPosition(a, b) {\n    var c,\n        d = -1;\n\n    for (c = 0; c < a.length; c++) {\n      if (a[c].field === b) {\n        d = c;\n        break;\n      }\n    }\n\n    return d;\n  },\n  getColumnInfo: function getColumnInfo(a, b) {\n    var c,\n        d = {},\n        e = a.data();\n\n    for (c = 0; c < e.columns.length; c += 1) {\n      if (e.columns[c].field === b) {\n        d = e.columns[c];\n        break;\n      }\n    }\n\n    return d;\n  },\n  getCell: function getCell(a, b, c) {\n    var d,\n        e,\n        f = null;\n    return d = gj.grid.methods.getColumnPosition(a.data(\"columns\"), c), d > -1 && (e = gj.grid.methods.getRowById(a, b), f = e.find(\"td:eq(\" + d + ') div[data-role=\"display\"]')), f;\n  },\n  setCellContent: function setCellContent(a, b, c, d) {\n    var e,\n        f = gj.grid.methods.getCell(a, b, c);\n    f && (f.empty(), \"object\" == _typeof(d) ? f.append(d) : (e = gj.grid.methods.getColumnInfo(a, c), gj.grid.methods.renderDisplayElement(a, f, e, a.getById(b), b, \"update\")));\n  },\n  clone: function clone(a) {\n    var b = [];\n    return $.each(a, function () {\n      b.push(this.clone());\n    }), b;\n  },\n  getAll: function getAll(a) {\n    return a.data(\"records\");\n  },\n  countVisibleColumns: function countVisibleColumns(a) {\n    var b, c, d;\n\n    for (b = a.data().columns, c = 0, d = 0; d < b.length; d++) {\n      !0 !== b[d].hidden && c++;\n    }\n\n    return c;\n  },\n  clear: function clear(a, b) {\n    var c = a.data();\n    return a.xhr && a.xhr.abort(), a.children(\"tbody\").empty(), c.records = [], gj.grid.methods.stopLoading(a), gj.grid.methods.appendEmptyRow(a, b ? c.notFoundText : \"&nbsp;\"), gj.grid.events.dataBound(a, [], 0), a;\n  },\n  render: function render(a, b) {\n    return b && (gj.grid.methods.setRecordsData(a, b), gj.grid.methods.updateHeader(a), gj.grid.methods.loadData(a)), a;\n  },\n  filter: function filter(a) {\n    var b,\n        c,\n        d = a.data(),\n        e = d.dataSource.slice();\n    d.params[d.paramNames.sortBy] && (c = gj.grid.methods.getColumnInfo(a, d.params[d.paramNames.sortBy]), e.sort(c.sortable.sorter ? c.sortable.sorter(c.direction, c) : gj.grid.methods.createDefaultSorter(c.direction, c.field)));\n\n    for (b in d.params) {\n      d.params[b] && !d.paramNames[b] && (c = gj.grid.methods.getColumnInfo(a, b), e = $.grep(e, function (a) {\n        var e = a[b] || \"\",\n            f = d.params[b] || \"\";\n        return c && \"function\" == typeof c.filter ? c.filter(e, f) : e.toUpperCase().indexOf(f.toUpperCase()) > -1;\n      }));\n    }\n\n    return gj.grid.events.dataFiltered(a, e), e;\n  },\n  createDefaultSorter: function createDefaultSorter(a, b) {\n    return function (c, d) {\n      var e = (c[b] || \"\").toString(),\n          f = (d[b] || \"\").toString();\n      return \"asc\" === a ? e.localeCompare(f) : f.localeCompare(e);\n    };\n  },\n  destroy: function destroy(a, b, c) {\n    return a.data() && (gj.grid.events.destroying(a), gj.grid.methods.stopLoading(a), a.xhr && a.xhr.abort(), a.off(), !1 === c && a.parent('div[data-role=\"wrapper\"]').length > 0 && a.unwrap(), a.removeData(), !1 === b ? a.remove() : a.removeClass().empty(), a.removeAttr(\"data-type\")), a;\n  },\n  showColumn: function showColumn(a, b) {\n    var c,\n        d = a.data(),\n        e = gj.grid.methods.getColumnPosition(d.columns, b);\n    return e > -1 && (a.find(\"thead>tr\").each(function () {\n      $(this).children(\"th\").eq(e).show();\n    }), $.each(a.find(\"tbody>tr\"), function () {\n      $(this).children(\"td\").eq(e).show();\n    }), d.columns[e].hidden = !1, c = a.find('tbody > tr[data-role=\"empty\"] > td'), c && c.length && c.attr(\"colspan\", gj.grid.methods.countVisibleColumns(a)), gj.grid.events.columnShow(a, d.columns[e])), a;\n  },\n  hideColumn: function hideColumn(a, b) {\n    var c,\n        d = a.data(),\n        e = gj.grid.methods.getColumnPosition(d.columns, b);\n    return e > -1 && (a.find(\"thead>tr\").each(function () {\n      $(this).children(\"th\").eq(e).hide();\n    }), $.each(a.find(\"tbody>tr\"), function () {\n      $(this).children(\"td\").eq(e).hide();\n    }), d.columns[e].hidden = !0, c = a.find('tbody > tr[data-role=\"empty\"] > td'), c && c.length && c.attr(\"colspan\", gj.grid.methods.countVisibleColumns(a)), gj.grid.events.columnHide(a, d.columns[e])), a;\n  },\n  isLastRecordVisible: function isLastRecordVisible() {\n    return !0;\n  },\n  addRow: function addRow(a, b) {\n    var c = a.data();\n    return c.totalRecords = a.data(\"totalRecords\") + 1, gj.grid.events.dataBinding(a, [b]), c.records.push(b), $.isArray(c.dataSource) && c.dataSource.push(b), 1 === c.totalRecords && a.children(\"tbody\").empty(), gj.grid.methods.isLastRecordVisible(a) && gj.grid.methods.renderRow(a, null, b, a.count() - 1), gj.grid.events.dataBound(a, [b], c.totalRecords), a;\n  },\n  updateRow: function updateRow(a, b, c) {\n    var d,\n        e = gj.grid.methods.getRowById(a, b),\n        f = a.data();\n    return f.records[e.data(\"position\") - 1] = c, $.isArray(f.dataSource) && (d = gj.grid.methods.getRecVPosById(a, b), f.dataSource[d] = c), gj.grid.methods.renderRow(a, e, c, e.index()), a;\n  },\n  removeRow: function removeRow(a, b) {\n    var c,\n        d = a.data(),\n        e = gj.grid.methods.getRowById(a, b);\n    return gj.grid.events.rowRemoving(a, e, b, a.getById(b)), $.isArray(d.dataSource) && (c = gj.grid.methods.getRecVPosById(a, b), d.dataSource.splice(c, 1)), a.reload(), a;\n  },\n  count: function count(a, b) {\n    return b ? a.data().totalRecords : a.getAll().length;\n  },\n  getColumnPositionByRole: function getColumnPositionByRole(a, b) {\n    var c,\n        d,\n        e = a.data(\"columns\");\n\n    for (c = 0; c < e.length; c++) {\n      if (e[c].role === b) {\n        d = c;\n        break;\n      }\n    }\n\n    return d;\n  },\n  getColumnPositionNotInRole: function getColumnPositionNotInRole(a) {\n    var b,\n        c = 0,\n        d = a.data(\"columns\");\n\n    for (b = 0; b < d.length; b++) {\n      if (!d[b].role) {\n        c = b;\n        break;\n      }\n    }\n\n    return c;\n  }\n}, gj.grid.widget = function (a, b) {\n  var c = this,\n      d = gj.grid.methods;\n  return c.reload = function (a) {\n    return d.startLoading(this), gj.widget.prototype.reload.call(this, a);\n  }, c.clear = function (a) {\n    return d.clear(this, a);\n  }, c.count = function (a) {\n    return d.count(this, a);\n  }, c.render = function (b) {\n    return d.render(a, b);\n  }, c.destroy = function (a, b) {\n    return d.destroy(this, a, b);\n  }, c.setSelected = function (a) {\n    return d.setSelected(this, a);\n  }, c.getSelected = function () {\n    return d.getSelected(this);\n  }, c.getSelections = function () {\n    return d.getSelections(this);\n  }, c.selectAll = function () {\n    return d.selectAll(this);\n  }, c.unSelectAll = function () {\n    return d.unSelectAll(this);\n  }, c.getById = function (a) {\n    return d.getById(this, a);\n  }, c.get = function (a) {\n    return d.getByPosition(this, a);\n  }, c.getAll = function (a) {\n    return d.getAll(this, a);\n  }, c.showColumn = function (a) {\n    return d.showColumn(this, a);\n  }, c.hideColumn = function (a) {\n    return d.hideColumn(this, a);\n  }, c.addRow = function (a) {\n    return d.addRow(this, a);\n  }, c.updateRow = function (a, b) {\n    return d.updateRow(this, a, b);\n  }, c.setCellContent = function (a, b, c) {\n    d.setCellContent(this, a, b, c);\n  }, c.removeRow = function (a) {\n    return d.removeRow(this, a);\n  }, $.extend(a, c), \"grid\" !== a.attr(\"data-type\") && d.init.call(a, b), a;\n}, gj.grid.widget.prototype = new gj.widget(), gj.grid.widget.constructor = gj.grid.widget, gj.grid.widget.prototype.getConfig = gj.grid.methods.getConfig, gj.grid.widget.prototype.getHTMLConfig = gj.grid.methods.getHTMLConfig, function (a) {\n  a.fn.grid = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.grid.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.grid.widget(this, a);\n    }\n  };\n}(jQuery), gj.grid.plugins.fixedHeader = {\n  config: {\n    base: {\n      fixedHeader: !1,\n      height: 300\n    }\n  },\n  \"private\": {\n    init: function init(a) {\n      var b = a.data(),\n          c = a.children(\"tbody\"),\n          d = a.children(\"thead\"),\n          e = b.height - d.outerHeight() - (a.children(\"tfoot\").outerHeight() || 0);\n      a.addClass(\"gj-grid-scrollable\"), c.css(\"width\", d.outerWidth()), c.height(e);\n    },\n    refresh: function refresh(a) {\n      var b,\n          c,\n          d = (a.data(), a.children(\"tbody\")),\n          e = a.children(\"thead\"),\n          f = a.find('tbody tr[data-role=\"row\"] td'),\n          g = a.find('thead tr[data-role=\"caption\"] th');\n\n      for (a.children(\"tbody\").height() < gj.grid.plugins.fixedHeader[\"private\"].getRowsHeight(a) ? d.css(\"width\", e.outerWidth() + gj.grid.plugins.fixedHeader[\"private\"].getScrollBarWidth() + (navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1 ? 1 : 0)) : d.css(\"width\", e.outerWidth()), b = 0; b < g.length; b++) {\n        c = $(g[b]).outerWidth(), 0 === b && gj.core.isIE() && (c -= 1), $(f[b]).attr(\"width\", c);\n      }\n    },\n    getRowsHeight: function getRowsHeight(a) {\n      var b = 0;\n      return a.find(\"tbody tr\").each(function () {\n        b += $(this).height();\n      }), b;\n    },\n    getScrollBarWidth: function getScrollBarWidth() {\n      var a = document.createElement(\"p\");\n      a.style.width = \"100%\", a.style.height = \"200px\";\n      var b = document.createElement(\"div\");\n      b.style.position = \"absolute\", b.style.top = \"0px\", b.style.left = \"0px\", b.style.visibility = \"hidden\", b.style.width = \"200px\", b.style.height = \"150px\", b.style.overflow = \"hidden\", b.appendChild(a), document.body.appendChild(b);\n      var c = a.offsetWidth;\n      b.style.overflow = \"scroll\";\n      var d = a.offsetWidth;\n      return c == d && (d = b.clientWidth), document.body.removeChild(b), c - d;\n    }\n  },\n  \"public\": {},\n  events: {},\n  configure: function configure(a, b, c) {\n    $.extend(!0, a, gj.grid.plugins.fixedHeader[\"public\"]);\n    a.data();\n    c.fixedHeader && (a.on(\"initialized\", function () {\n      gj.grid.plugins.fixedHeader[\"private\"].init(a);\n    }), a.on(\"dataBound\", function () {\n      gj.grid.plugins.fixedHeader[\"private\"].refresh(a);\n    }), a.on(\"resize\", function () {\n      gj.grid.plugins.fixedHeader[\"private\"].refresh(a);\n    }));\n  }\n}, gj.grid.plugins.expandCollapseRows = {\n  config: {\n    base: {\n      detailTemplate: void 0,\n      keepExpandedRows: !0,\n      expandedRows: [],\n      icons: {\n        expandRow: '<i class=\"gj-icon chevron-right\" />',\n        collapseRow: '<i class=\"gj-icon chevron-down\" />'\n      }\n    },\n    fontawesome: {\n      icons: {\n        expandRow: '<i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>',\n        collapseRow: '<i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>'\n      }\n    },\n    glyphicons: {\n      icons: {\n        expandRow: '<span class=\"glyphicon glyphicon-chevron-right\" />',\n        collapseRow: '<span class=\"glyphicon glyphicon-chevron-down\" />'\n      }\n    }\n  },\n  \"private\": {\n    expandDetail: function expandDetail(a, b, c) {\n      var d = b.closest(\"tr\"),\n          e = $('<tr data-role=\"details\" />'),\n          f = $('<td colspan=\"' + gj.grid.methods.countVisibleColumns(a) + '\" />'),\n          g = $('<div data-role=\"display\" />'),\n          h = a.data(),\n          i = d.data(\"position\"),\n          j = a.get(i),\n          k = gj.grid.plugins.expandCollapseRows;\n      void 0 === _typeof(c) && (c = gj.grid.methods.getId(j, h.primaryKey, j)), e.append(f.append(g.append(d.data(\"details\")))), e.insertAfter(d), b.children('div[data-role=\"display\"]').empty().append(h.icons.collapseRow), a.updateDetails(d), k[\"private\"].keepSelection(a, c), k.events.detailExpand(a, e.find(\"td>div\"), c);\n    },\n    collapseDetail: function collapseDetail(a, b, c) {\n      var d = b.closest(\"tr\"),\n          e = d.next('tr[data-role=\"details\"]'),\n          f = a.data(),\n          g = gj.grid.plugins.expandCollapseRows;\n      void 0 === _typeof(c) && (c = gj.grid.methods.getId(record, f.primaryKey, record)), e.remove(), b.children('div[data-role=\"display\"]').empty().append(f.icons.expandRow), g[\"private\"].removeSelection(a, c), g.events.detailCollapse(a, e.find(\"td>div\"), c);\n    },\n    keepSelection: function keepSelection(a, b) {\n      var c = a.data();\n      c.keepExpandedRows && ($.isArray(c.expandedRows) ? -1 == c.expandedRows.indexOf(b) && c.expandedRows.push(b) : c.expandedRows = [b]);\n    },\n    removeSelection: function removeSelection(a, b) {\n      var c = a.data();\n      c.keepExpandedRows && $.isArray(c.expandedRows) && c.expandedRows.indexOf(b) > -1 && c.expandedRows.splice(c.expandedRows.indexOf(b), 1);\n    },\n    updateDetailsColSpan: function updateDetailsColSpan(a) {\n      var b = a.find('tbody > tr[data-role=\"details\"] > td');\n      b && b.length && b.attr(\"colspan\", gj.grid.methods.countVisibleColumns(a));\n    }\n  },\n  \"public\": {\n    collapseAll: function collapseAll() {\n      var a,\n          b = this,\n          c = b.data();\n      return void 0 !== c.detailTemplate && (a = gj.grid.methods.getColumnPositionByRole(b, \"expander\"), b.find('tbody tr[data-role=\"row\"]').each(function () {\n        gj.grid.plugins.expandCollapseRows[\"private\"].collapseDetail(b, $(this).find(\"td:eq(\" + a + \")\"));\n      })), void 0 !== c.grouping && b.find('tbody tr[role=\"group\"]').each(function () {\n        gj.grid.plugins.grouping[\"private\"].collapseGroup(c, $(this).find(\"td:eq(0)\"));\n      }), b;\n    },\n    expandAll: function expandAll() {\n      var a,\n          b = this,\n          c = b.data();\n      return void 0 !== c.detailTemplate && (a = gj.grid.methods.getColumnPositionByRole(b, \"expander\"), b.find('tbody tr[data-role=\"row\"]').each(function () {\n        gj.grid.plugins.expandCollapseRows[\"private\"].expandDetail(b, $(this).find(\"td:eq(\" + a + \")\"));\n      })), void 0 !== c.grouping && b.find('tbody tr[role=\"group\"]').each(function () {\n        gj.grid.plugins.grouping[\"private\"].expandGroup(c, $(this).find(\"td:eq(0)\"));\n      }), b;\n    },\n    updateDetails: function updateDetails(a) {\n      var b = this,\n          c = a.data(\"details\"),\n          d = c.html(),\n          e = b.get(a.data(\"position\"));\n      return e && d && (c.html().replace(/\\{(.+?)\\}/g, function (a, c) {\n        var f = gj.grid.methods.getColumnInfo(b, c);\n        d = d.replace(a, gj.grid.methods.formatText(e[c], f));\n      }), c.html(d)), b;\n    }\n  },\n  events: {\n    detailExpand: function detailExpand(a, b, c) {\n      a.triggerHandler(\"detailExpand\", [b, c]);\n    },\n    detailCollapse: function detailCollapse(a, b, c) {\n      a.triggerHandler(\"detailCollapse\", [b, c]);\n    }\n  },\n  configure: function configure(a) {\n    var b,\n        c = a.data();\n    $.extend(!0, a, gj.grid.plugins.expandCollapseRows[\"public\"]), void 0 !== c.detailTemplate && (b = {\n      title: \"\",\n      width: c.defaultIconColumnWidth,\n      align: \"center\",\n      stopPropagation: !0,\n      cssClass: \"gj-cursor-pointer gj-unselectable\",\n      tmpl: c.icons.expandRow,\n      role: \"expander\",\n      events: {\n        click: function click(b) {\n          var c = $(this),\n              d = gj.grid.plugins.expandCollapseRows[\"private\"];\n          \"details\" === c.closest(\"tr\").next().attr(\"data-role\") ? d.collapseDetail(a, c, b.data.id) : d.expandDetail(a, $(this), b.data.id);\n        }\n      }\n    }, c.columns = [b].concat(c.columns), a.on(\"rowDataBound\", function (a, b, d, e) {\n      b.data(\"details\", $(c.detailTemplate));\n    }), a.on(\"columnShow\", function (b, c) {\n      gj.grid.plugins.expandCollapseRows[\"private\"].updateDetailsColSpan(a);\n    }), a.on(\"columnHide\", function (b, c) {\n      gj.grid.plugins.expandCollapseRows[\"private\"].updateDetailsColSpan(a);\n    }), a.on(\"rowRemoving\", function (b, c, d, e) {\n      gj.grid.plugins.expandCollapseRows[\"private\"].collapseDetail(a, c.children(\"td\").first(), d);\n    }), a.on(\"dataBinding\", function () {\n      a.collapseAll();\n    }), a.on(\"pageChanging\", function () {\n      a.collapseAll();\n    }), a.on(\"dataBound\", function () {\n      var b,\n          c,\n          d,\n          e,\n          f = a.data();\n      if (f.keepExpandedRows && $.isArray(f.expandedRows)) for (b = 0; b < f.expandedRows.length; b++) {\n        (d = gj.grid.methods.getRowById(a, f.expandedRows[b])) && d.length && (e = gj.grid.methods.getColumnPositionByRole(a, \"expander\"), (c = d.children(\"td:eq(\" + e + \")\")) && c.length && gj.grid.plugins.expandCollapseRows[\"private\"].expandDetail(a, c));\n      }\n    }));\n  }\n}, gj.grid.plugins.inlineEditing = {\n  renderers: {\n    editManager: function editManager(a, b, c, d, e, f) {\n      var g = f.data(),\n          h = $(g.inlineEditing.editButton).attr(\"key\", e),\n          i = $(g.inlineEditing.deleteButton).attr(\"key\", e),\n          j = $(g.inlineEditing.updateButton).attr(\"key\", e).hide(),\n          k = $(g.inlineEditing.cancelButton).attr(\"key\", e).hide();\n      h.on(\"click\", function (a) {\n        f.edit($(this).attr(\"key\"));\n      }), i.on(\"click\", function (a) {\n        f.removeRow($(this).attr(\"key\"));\n      }), j.on(\"click\", function (a) {\n        f.update($(this).attr(\"key\"));\n      }), k.on(\"click\", function (a) {\n        f.cancel($(this).attr(\"key\"));\n      }), d.empty().append(h).append(i).append(j).append(k);\n    }\n  }\n}, gj.grid.plugins.inlineEditing.config = {\n  base: {\n    defaultColumnSettings: {\n      editor: void 0,\n      editField: void 0,\n      mode: \"readEdit\"\n    },\n    inlineEditing: {\n      mode: \"click\",\n      managementColumn: !0,\n      managementColumnConfig: {\n        width: 300,\n        role: \"managementColumn\",\n        align: \"center\",\n        renderer: gj.grid.plugins.inlineEditing.renderers.editManager,\n        cssClass: \"gj-grid-management-column\"\n      }\n    }\n  },\n  bootstrap: {\n    inlineEditing: {\n      managementColumnConfig: {\n        width: 200,\n        role: \"managementColumn\",\n        align: \"center\",\n        renderer: gj.grid.plugins.inlineEditing.renderers.editManager,\n        cssClass: \"gj-grid-management-column\"\n      }\n    }\n  },\n  bootstrap4: {\n    inlineEditing: {\n      managementColumnConfig: {\n        width: 280,\n        role: \"managementColumn\",\n        align: \"center\",\n        renderer: gj.grid.plugins.inlineEditing.renderers.editManager,\n        cssClass: \"gj-grid-management-column\"\n      }\n    }\n  }\n}, gj.grid.plugins.inlineEditing[\"private\"] = {\n  localization: function localization(a) {\n    \"bootstrap\" === a.uiLibrary ? (a.inlineEditing.editButton = '<button role=\"edit\" class=\"btn btn-default btn-sm\"><span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span> ' + gj.grid.messages[a.locale].Edit + \"</button>\", a.inlineEditing.deleteButton = '<button role=\"delete\" class=\"btn btn-default btn-sm gj-margin-left-10\"><span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span> ' + gj.grid.messages[a.locale].Delete + \"</button>\", a.inlineEditing.updateButton = '<button role=\"update\" class=\"btn btn-default btn-sm\"><span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span> ' + gj.grid.messages[a.locale].Update + \"</button>\", a.inlineEditing.cancelButton = '<button role=\"cancel\" class=\"btn btn-default btn-sm gj-margin-left-10\"><span class=\"glyphicon glyphicon-ban-circle\" aria-hidden=\"true\"></span> ' + gj.grid.messages[a.locale].Cancel + \"</button>\") : (a.inlineEditing.editButton = '<button role=\"edit\" class=\"gj-button-md\"><i class=\"gj-icon pencil\" /> ' + gj.grid.messages[a.locale].Edit.toUpperCase() + \"</button>\", a.inlineEditing.deleteButton = '<button role=\"delete\" class=\"gj-button-md\"><i class=\"gj-icon delete\" /> ' + gj.grid.messages[a.locale].Delete.toUpperCase() + \"</button>\", a.inlineEditing.updateButton = '<button role=\"update\" class=\"gj-button-md\"><i class=\"gj-icon check-circle\" /> ' + gj.grid.messages[a.locale].Update.toUpperCase() + \"</button>\", a.inlineEditing.cancelButton = '<button role=\"cancel\" class=\"gj-button-md\"><i class=\"gj-icon cancel\" /> ' + gj.grid.messages[a.locale].Cancel.toUpperCase() + \"</button>\");\n  },\n  editMode: function editMode(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        i,\n        j = a.data();\n    if (\"edit\" !== b.attr(\"data-mode\")) if (c.editor) {\n      if (gj.grid.plugins.inlineEditing[\"private\"].updateOtherCells(a, c.mode), e = b.find('div[data-role=\"display\"]').hide(), f = b.find('div[data-role=\"edit\"]').show(), 0 === f.length && (f = $('<div data-role=\"edit\" />'), b.append(f)), h = d[c.editField || c.field], g = f.find(\"input, select, textarea\").first(), g.length) switch (c.type) {\n        case \"checkbox\":\n          g.prop(\"checked\", h);\n          break;\n\n        case \"dropdown\":\n          g = g.dropdown(\"value\", h);\n          break;\n\n        default:\n          g.val(h);\n      } else {\n        if (\"function\" == typeof c.editor) c.editor(f, h, d), g = f.find(\"input, select, textarea\").first();else if (i = \"object\" == _typeof(c.editor) ? c.editor : {}, i.uiLibrary = j.uiLibrary, i.iconsLibrary = j.iconsLibrary, i.fontSize = a.css(\"font-size\"), i.showOnFocus = !1, \"checkbox\" === c.type && gj.checkbox) g = $('<input type=\"checkbox\" />').prop(\"checked\", h), f.append(g), g.checkbox(i);else if (\"date\" === c.type && gj.datepicker || \"time\" === c.type && gj.timepicker || \"datetime\" === c.type && gj.datetimepicker) {\n          switch (g = $('<input type=\"text\" width=\"100%\"/>'), f.append(g), c.format && (i.format = c.format), c.type) {\n            case \"date\":\n              g = g.datepicker(i);\n              break;\n\n            case \"time\":\n              g = g.timepicker(i);\n              break;\n\n            case \"datetime\":\n              g = g.datetimepicker(i);\n          }\n\n          g.value && g.value(e.html());\n        } else \"dropdown\" === c.type && gj.dropdown ? (g = $('<select type=\"text\" width=\"100%\"/>'), f.append(g), i.dataBound = function (a) {\n          var b = $(this).dropdown();\n          c.editField ? b.value(d[c.editField]) : b.value(d[c.field]);\n        }, g = g.dropdown(i)) : (g = $('<input type=\"text\" value=\"' + h + '\" class=\"gj-width-full\"/>'), \"materialdesign\" === j.uiLibrary && g.addClass(\"gj-textbox-md\").css(\"font-size\", a.css(\"font-size\")), f.append(g));\n        \"command\" !== j.inlineEditing.mode && \"editOnly\" !== c.mode && (g = f.find(\"input, select, textarea\").first(), g.on(\"keyup\", function (d) {\n          13 !== d.keyCode && 27 !== d.keyCode || gj.grid.plugins.inlineEditing[\"private\"].displayMode(a, b, c);\n        }));\n      }\n      \"INPUT\" === g.prop(\"tagName\").toUpperCase() && \"TEXT\" === g.prop(\"type\").toUpperCase() ? gj.core.setCaretAtEnd(g[0]) : g.focus(), b.attr(\"data-mode\", \"edit\");\n    } else \"managementColumn\" === c.role && (b.find('[role=\"edit\"]').hide(), b.find('[role=\"delete\"]').hide(), b.find('[role=\"update\"]').show(), b.find('[role=\"cancel\"]').show());\n  },\n  displayMode: function displayMode(a, b, c, d) {\n    var e, f, g, h, i, j, k;\n    \"editOnly\" !== c.mode && (\"edit\" === b.attr(\"data-mode\") && (e = b.find('div[data-role=\"edit\"]'), f = b.find('div[data-role=\"display\"]'), g = e.find(\"input, select, textarea\").first(), \"SELECT\" === g[0].tagName.toUpperCase() && g[0].selectedIndex > -1 ? (h = g[0].options[g[0].selectedIndex].innerHTML, i = g[0].value) : h = \"INPUT\" === g[0].tagName.toUpperCase() && \"CHECKBOX\" === g[0].type.toUpperCase() ? g[0].checked : g.val(), k = b.parent().data(\"position\"), j = a.get(k), !0 !== d && h !== j[c.field] && (j[c.field] = \"date\" === c.type ? gj.core.parseDate(h, c.format) : h, c.editField && (j[c.editField] = i || h), \"editOnly\" !== c.mode && (gj.grid.methods.renderDisplayElement(a, f, c, j, gj.grid.methods.getId(j, a.data(\"primaryKey\"), k), \"update\"), 0 === b.find(\"span.gj-dirty\").length && b.prepend($('<span class=\"gj-dirty\" />'))), gj.grid.plugins.inlineEditing.events.cellDataChanged(a, b, c, j, h), gj.grid.plugins.inlineEditing[\"private\"].updateChanges(a, c, j, h)), e.hide(), f.show(), b.attr(\"data-mode\", \"display\")), \"managementColumn\" === c.role && (b.find('[role=\"update\"]').hide(), b.find('[role=\"cancel\"]').hide(), b.find('[role=\"edit\"]').show(), b.find('[role=\"delete\"]').show()));\n  },\n  updateOtherCells: function updateOtherCells(a, b) {\n    var c = a.data();\n    \"command\" !== c.inlineEditing.mode && \"editOnly\" !== b && a.find('div[data-role=\"edit\"]:visible').parent(\"td\").each(function () {\n      var b = $(this),\n          d = c.columns[b.index()];\n      gj.grid.plugins.inlineEditing[\"private\"].displayMode(a, b, d);\n    });\n  },\n  updateChanges: function updateChanges(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h = a.data();\n    h.guid || (h.guid = gj.grid.plugins.inlineEditing[\"private\"].generateGUID()), h.primaryKey && (e = JSON.parse(sessionStorage.getItem(\"gj.grid.\" + h.guid)), e ? f = e.filter(function (a) {\n      return a[h.primaryKey] === c[h.primaryKey];\n    }) : e = [], f && 1 === f.length ? f[0][b.field] = d : (g = {}, g[h.primaryKey] = c[h.primaryKey], h.primaryKey !== b.field && (g[b.field] = d), e.push(g)), sessionStorage.setItem(\"gj.grid.\" + h.guid, JSON.stringify(e)));\n  },\n  generateGUID: function generateGUID() {\n    function a() {\n      return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);\n    }\n\n    return a() + a() + \"-\" + a() + \"-\" + a() + \"-\" + a() + \"-\" + a() + a() + a();\n  }\n}, gj.grid.plugins.inlineEditing[\"public\"] = {\n  getChanges: function getChanges() {\n    return JSON.parse(sessionStorage.getItem(\"gj.grid.\" + this.data().guid));\n  },\n  edit: function edit(a) {\n    var b,\n        c = this.getById(a),\n        d = gj.grid.methods.getRowById(this, a).children(\"td\"),\n        e = this.data(\"columns\");\n\n    for (b = 0; b < d.length; b++) {\n      gj.grid.plugins.inlineEditing[\"private\"].editMode(this, $(d[b]), e[b], c);\n    }\n\n    return this;\n  },\n  update: function update(a) {\n    var b,\n        c = this.getById(a),\n        d = gj.grid.methods.getRowById(this, a).children(\"td\"),\n        e = this.data(\"columns\");\n\n    for (b = 0; b < d.length; b++) {\n      gj.grid.plugins.inlineEditing[\"private\"].displayMode(this, $(d[b]), e[b], !1);\n    }\n\n    return gj.grid.plugins.inlineEditing.events.rowDataChanged(this, a, c), this;\n  },\n  cancel: function cancel(a) {\n    var b,\n        c = (this.getById(a), gj.grid.methods.getRowById(this, a).children(\"td\")),\n        d = this.data(\"columns\");\n\n    for (b = 0; b < c.length; b++) {\n      gj.grid.plugins.inlineEditing[\"private\"].displayMode(this, $(c[b]), d[b], !0);\n    }\n\n    return this;\n  }\n}, gj.grid.plugins.inlineEditing.events = {\n  cellDataChanged: function cellDataChanged(a, b, c, d, e, f) {\n    a.triggerHandler(\"cellDataChanged\", [b, c, d, e, f]);\n  },\n  rowDataChanged: function rowDataChanged(a, b, c) {\n    a.triggerHandler(\"rowDataChanged\", [b, c]);\n  }\n}, gj.grid.plugins.inlineEditing.configure = function (a, b, c) {\n  var d = a.data();\n  $.extend(!0, a, gj.grid.plugins.inlineEditing[\"public\"]), c.inlineEditing && (a.on(\"dataBound\", function () {\n    a.find(\"span.gj-dirty\").remove();\n  }), a.on(\"rowDataBound\", function (b, c, d, e) {\n    a.cancel(d);\n  })), \"command\" === d.inlineEditing.mode ? (gj.grid.plugins.inlineEditing[\"private\"].localization(d), b.inlineEditing.managementColumn && d.columns.push(b.inlineEditing.managementColumnConfig)) : a.on(\"cellDataBound\", function (b, c, e, f, g) {\n    f.editor && (\"editOnly\" === f.mode ? gj.grid.plugins.inlineEditing[\"private\"].editMode(a, c.parent(), f, g) : c.parent(\"td\").on(\"dblclick\" === d.inlineEditing.mode ? \"dblclick\" : \"click\", function () {\n      gj.grid.plugins.inlineEditing[\"private\"].editMode(a, c.parent(), f, g);\n    }));\n  });\n}, gj.grid.plugins.optimisticPersistence = {\n  config: {\n    base: {\n      optimisticPersistence: {\n        localStorage: void 0,\n        sessionStorage: void 0\n      }\n    }\n  },\n  \"private\": {\n    applyParams: function applyParams(a) {\n      var b,\n          c = a.data(),\n          d = {};\n      b = JSON.parse(sessionStorage.getItem(\"gj.grid.\" + c.guid)), b && b.optimisticPersistence && $.extend(d, b.optimisticPersistence), b = JSON.parse(localStorage.getItem(\"gj.grid.\" + c.guid)), b && b.optimisticPersistence && $.extend(d, b.optimisticPersistence), $.extend(c.params, d);\n    },\n    saveParams: function saveParams(a) {\n      var b,\n          c,\n          d = a.data(),\n          e = {\n        optimisticPersistence: {}\n      };\n\n      if (d.optimisticPersistence.sessionStorage) {\n        for (b = 0; b < d.optimisticPersistence.sessionStorage.length; b++) {\n          c = d.optimisticPersistence.sessionStorage[b], e.optimisticPersistence[c] = d.params[c];\n        }\n\n        e = $.extend(!0, JSON.parse(sessionStorage.getItem(\"gj.grid.\" + d.guid)), e), sessionStorage.setItem(\"gj.grid.\" + d.guid, JSON.stringify(e));\n      }\n\n      if (d.optimisticPersistence.localStorage) {\n        for (e = {\n          optimisticPersistence: {}\n        }, b = 0; b < d.optimisticPersistence.localStorage.length; b++) {\n          c = d.optimisticPersistence.localStorage[b], e.optimisticPersistence[c] = d.params[c];\n        }\n\n        e = $.extend(!0, JSON.parse(localStorage.getItem(\"gj.grid.\" + d.guid)), e), localStorage.setItem(\"gj.grid.\" + d.guid, JSON.stringify(e));\n      }\n    }\n  },\n  configure: function configure(a, b, c) {\n    b.guid && (b.optimisticPersistence.localStorage || b.optimisticPersistence.sessionStorage) && (gj.grid.plugins.optimisticPersistence[\"private\"].applyParams(a), a.on(\"dataBound\", function (b) {\n      gj.grid.plugins.optimisticPersistence[\"private\"].saveParams(a);\n    }));\n  }\n}, gj.grid.plugins.pagination = {\n  config: {\n    base: {\n      style: {\n        pager: {\n          panel: \"\",\n          stateDisabled: \"\",\n          activeButton: \"\"\n        }\n      },\n      paramNames: {\n        page: \"page\",\n        limit: \"limit\"\n      },\n      pager: {\n        limit: 10,\n        sizes: [5, 10, 20, 100],\n        leftControls: void 0,\n        rightControls: void 0\n      }\n    },\n    bootstrap: {\n      style: {\n        pager: {\n          panel: \"\",\n          stateDisabled: \"\"\n        }\n      }\n    },\n    bootstrap4: {\n      style: {\n        pager: {\n          panel: \"btn-toolbar\",\n          stateDisabled: \"\"\n        }\n      }\n    },\n    glyphicons: {\n      icons: {\n        first: '<span class=\"glyphicon glyphicon-step-backward\"></span>',\n        previous: '<span class=\"glyphicon glyphicon-backward\"></span>',\n        next: '<span class=\"glyphicon glyphicon-forward\"></span>',\n        last: '<span class=\"glyphicon glyphicon-step-forward\"></span>',\n        refresh: '<span class=\"glyphicon glyphicon-refresh\"></span>'\n      }\n    },\n    materialicons: {\n      icons: {\n        first: '<i class=\"gj-icon first-page\" />',\n        previous: '<i class=\"gj-icon chevron-left\" />',\n        next: '<i class=\"gj-icon chevron-right\" />',\n        last: '<i class=\"gj-icon last-page\" />',\n        refresh: '<i class=\"gj-icon refresh\" />'\n      }\n    },\n    fontawesome: {\n      icons: {\n        first: '<i class=\"fa fa-fast-backward\" aria-hidden=\"true\"></i>',\n        previous: '<i class=\"fa fa-backward\" aria-hidden=\"true\"></i>',\n        next: '<i class=\"fa fa-forward\" aria-hidden=\"true\"></i>',\n        last: '<i class=\"fa fa-fast-forward\" aria-hidden=\"true\"></i>',\n        refresh: '<i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>'\n      }\n    }\n  },\n  \"private\": {\n    init: function init(a) {\n      var b, c, d, e, f, g, h, i, j, k;\n      if (d = a.data(), d.pager) for (d.params[d.paramNames.page] || (d.params[d.paramNames.page] = 1), d.params[d.paramNames.limit] || (d.params[d.paramNames.limit] = d.pager.limit), gj.grid.plugins.pagination[\"private\"].localization(d), b = $('<tr data-role=\"pager\"/>'), c = $(\"<th/>\"), b.append(c), f = $('<div data-role=\"display\" />').addClass(d.style.pager.panel).css({\n        \"float\": \"left\"\n      }), g = $('<div data-role=\"display\" />').addClass(d.style.pager.panel).css({\n        \"float\": \"right\"\n      }), c.append(f).append(g), h = $(\"<tfoot />\").append(b), a.append(h), gj.grid.plugins.pagination[\"private\"].updatePagerColSpan(a), i = gj.grid.methods.clone(d.pager.leftControls), $.each(i, function () {\n        f.append(this);\n      }), j = gj.grid.methods.clone(d.pager.rightControls), $.each(j, function () {\n        g.append(this);\n      }), e = a.find(\"tfoot [data-role]\"), k = 0; k < e.length; k++) {\n        gj.grid.plugins.pagination[\"private\"].initPagerControl($(e[k]), a);\n      }\n    },\n    localization: function localization(a) {\n      \"bootstrap\" === a.uiLibrary ? gj.grid.plugins.pagination[\"private\"].localizationBootstrap(a) : \"bootstrap4\" === a.uiLibrary ? gj.grid.plugins.pagination[\"private\"].localizationBootstrap4(a) : gj.grid.plugins.pagination[\"private\"].localizationMaterialDesign(a);\n    },\n    localizationBootstrap: function localizationBootstrap(a) {\n      var b = gj.grid.messages[a.locale];\n      void 0 === a.pager.leftControls && (a.pager.leftControls = [$('<button type=\"button\" class=\"btn btn-default btn-sm\">' + (a.icons.first || b.First) + \"</button>\").attr(\"title\", b.FirstPageTooltip).attr(\"data-role\", \"page-first\"), $('<button type=\"button\" class=\"btn btn-default btn-sm\">' + (a.icons.previous || b.Previous) + \"</button>\").attr(\"title\", b.PreviousPageTooltip).attr(\"data-role\", \"page-previous\"), $(\"<div>\" + b.Page + \"</div>\"), $('<input data-role=\"page-number\" class=\"form-control input-sm\" type=\"text\" value=\"0\">'), $(\"<div>\" + b.Of + \"</div>\"), $('<div data-role=\"page-label-last\">0</div>'), $('<button type=\"button\" class=\"btn btn-default btn-sm\">' + (a.icons.next || b.Next) + \"</button>\").attr(\"title\", b.NextPageTooltip).attr(\"data-role\", \"page-next\"), $('<button type=\"button\" class=\"btn btn-default btn-sm\">' + (a.icons.last || b.Last) + \"</button>\").attr(\"title\", b.LastPageTooltip).attr(\"data-role\", \"page-last\"), $('<button type=\"button\" class=\"btn btn-default btn-sm\">' + (a.icons.refresh || b.Refresh) + \"</button>\").attr(\"title\", b.Refresh).attr(\"data-role\", \"page-refresh\"), $('<select data-role=\"page-size\" class=\"form-control input-sm\" width=\"60\"></select>')]), void 0 === a.pager.rightControls && (a.pager.rightControls = [$(\"<div>\" + b.DisplayingRecords + \"</div>\"), $('<div data-role=\"record-first\">0</div>'), $(\"<div>-</div>\"), $('<div data-role=\"record-last\">0</div>'), $(\"<div>\" + b.Of + \"</div>\"), $('<div data-role=\"record-total\">0</div>')]);\n    },\n    localizationBootstrap4: function localizationBootstrap4(a) {\n      var b = gj.grid.messages[a.locale];\n      void 0 === a.pager.leftControls && (a.pager.leftControls = [$('<button class=\"btn btn-default btn-sm gj-cursor-pointer\">' + (a.icons.first || b.First) + \"</button>\").attr(\"title\", b.FirstPageTooltip).attr(\"data-role\", \"page-first\"), $('<button class=\"btn btn-default btn-sm gj-cursor-pointer\">' + (a.icons.previous || b.Previous) + \"</button>\").attr(\"title\", b.PreviousPageTooltip).attr(\"data-role\", \"page-previous\"), $(\"<div>\" + b.Page + \"</div>\"), $('<div class=\"input-group\"><input data-role=\"page-number\" class=\"form-control form-control-sm\" type=\"text\" value=\"0\"></div>'), $(\"<div>\" + b.Of + \"</div>\"), $('<div data-role=\"page-label-last\">0</div>'), $('<button class=\"btn btn-default btn-sm gj-cursor-pointer\">' + (a.icons.next || b.Next) + \"</button>\").attr(\"title\", b.NextPageTooltip).attr(\"data-role\", \"page-next\"), $('<button class=\"btn btn-default btn-sm gj-cursor-pointer\">' + (a.icons.last || b.Last) + \"</button>\").attr(\"title\", b.LastPageTooltip).attr(\"data-role\", \"page-last\"), $('<button class=\"btn btn-default btn-sm gj-cursor-pointer\">' + (a.icons.refresh || b.Refresh) + \"</button>\").attr(\"title\", b.Refresh).attr(\"data-role\", \"page-refresh\"), $('<select data-role=\"page-size\" class=\"form-control input-sm\" width=\"60\"></select>')]), void 0 === a.pager.rightControls && (a.pager.rightControls = [$(\"<div>\" + b.DisplayingRecords + \"&nbsp;</div>\"), $('<div data-role=\"record-first\">0</div>'), $(\"<div>-</div>\"), $('<div data-role=\"record-last\">0</div>'), $(\"<div>\" + b.Of + \"</div>\"), $('<div data-role=\"record-total\">0</div>')]);\n    },\n    localizationMaterialDesign: function localizationMaterialDesign(a) {\n      var b = gj.grid.messages[a.locale];\n      void 0 === a.pager.leftControls && (a.pager.leftControls = []), void 0 === a.pager.rightControls && (a.pager.rightControls = [$('<span class=\"\">' + b.RowsPerPage + \"</span>\"), $('<select data-role=\"page-size\" class=\"gj-grid-md-limit-select\" width=\"52\"></select></div>'), $('<span class=\"gj-md-spacer-32\">&nbsp;</span>'), $('<span data-role=\"record-first\" class=\"\">0</span>'), $('<span class=\"\">-</span>'), $('<span data-role=\"record-last\" class=\"\">0</span>'), $('<span class=\"gj-grid-mdl-pager-label\">' + b.Of + \"</span>\"), $('<span data-role=\"record-total\" class=\"\">0</span>'), $('<span class=\"gj-md-spacer-32\">&nbsp;</span>'), $('<button class=\"gj-button-md\">' + (a.icons.previous || b.Previous) + \"</button>\").attr(\"title\", b.PreviousPageTooltip).attr(\"data-role\", \"page-previous\").addClass(a.icons.first ? \"gj-button-md-icon\" : \"\"), $('<span class=\"gj-md-spacer-24\">&nbsp;</span>'), $('<button class=\"gj-button-md\">' + (a.icons.next || b.Next) + \"</button>\").attr(\"title\", b.NextPageTooltip).attr(\"data-role\", \"page-next\").addClass(a.icons.first ? \"gj-button-md-icon\" : \"\")]);\n    },\n    initPagerControl: function initPagerControl(a, b) {\n      var c = b.data();\n\n      switch (a.data(\"role\")) {\n        case \"page-size\":\n          c.pager.sizes && 0 < c.pager.sizes.length ? (a.show(), $.each(c.pager.sizes, function () {\n            a.append($(\"<option/>\").attr(\"value\", this.toString()).text(this.toString()));\n          }), a.change(function () {\n            var a = parseInt(this.value, 10);\n            c.params[c.paramNames.limit] = a, gj.grid.plugins.pagination[\"private\"].changePage(b, 1), gj.grid.plugins.pagination.events.pageSizeChange(b, a);\n          }), a.val(c.params[c.paramNames.limit]), gj.dropdown && a.dropdown({\n            uiLibrary: c.uiLibrary,\n            iconsLibrary: c.iconsLibrary,\n            fontSize: a.css(\"font-size\"),\n            style: {\n              presenter: \"btn btn-default btn-sm\"\n            }\n          })) : a.hide();\n          break;\n\n        case \"page-refresh\":\n          a.on(\"click\", function () {\n            b.reload();\n          });\n      }\n    },\n    reloadPager: function reloadPager(a, b) {\n      var c, d, e, f, g, h, i, j;\n\n      if (h = a.data(), h.pager) {\n        for (c = 0 === b ? 0 : parseInt(h.params[h.paramNames.page], 10), d = parseInt(h.params[h.paramNames.limit], 10), e = Math.ceil(b / d), f = 0 === c ? 0 : d * (c - 1) + 1, g = f + d > b ? b : f + d - 1, i = a.find(\"TFOOT [data-role]\"), j = 0; j < i.length; j++) {\n          gj.grid.plugins.pagination[\"private\"].reloadPagerControl($(i[j]), a, c, e, f, g, b);\n        }\n\n        gj.grid.plugins.pagination[\"private\"].updatePagerColSpan(a);\n      }\n    },\n    reloadPagerControl: function reloadPagerControl(a, b, c, d, e, f, g) {\n      var h;\n\n      switch (a.data(\"role\")) {\n        case \"page-first\":\n          gj.grid.plugins.pagination[\"private\"].assignPageHandler(b, a, 1, c < 2);\n          break;\n\n        case \"page-previous\":\n          gj.grid.plugins.pagination[\"private\"].assignPageHandler(b, a, c - 1, c < 2);\n          break;\n\n        case \"page-number\":\n          a.val(c).off(\"change\").on(\"change\", gj.grid.plugins.pagination[\"private\"].createChangePageHandler(b, c));\n          break;\n\n        case \"page-label-last\":\n          a.text(d);\n          break;\n\n        case \"page-next\":\n          gj.grid.plugins.pagination[\"private\"].assignPageHandler(b, a, c + 1, d === c);\n          break;\n\n        case \"page-last\":\n          gj.grid.plugins.pagination[\"private\"].assignPageHandler(b, a, d, d === c);\n          break;\n\n        case \"page-button-one\":\n          h = 1 === c ? 1 : c == d ? c - 2 : c - 1, gj.grid.plugins.pagination[\"private\"].assignButtonHandler(b, a, c, h, d);\n          break;\n\n        case \"page-button-two\":\n          h = 1 === c ? 2 : c == d ? d - 1 : c, gj.grid.plugins.pagination[\"private\"].assignButtonHandler(b, a, c, h, d);\n          break;\n\n        case \"page-button-three\":\n          h = 1 === c ? c + 2 : c == d ? c : c + 1, gj.grid.plugins.pagination[\"private\"].assignButtonHandler(b, a, c, h, d);\n          break;\n\n        case \"record-first\":\n          a.text(e);\n          break;\n\n        case \"record-last\":\n          a.text(f);\n          break;\n\n        case \"record-total\":\n          a.text(g);\n      }\n    },\n    assignPageHandler: function assignPageHandler(a, b, c, d) {\n      var e = a.data().style.pager;\n      d ? b.addClass(e.stateDisabled).prop(\"disabled\", !0).off(\"click\") : b.removeClass(e.stateDisabled).prop(\"disabled\", !1).off(\"click\").on(\"click\", function () {\n        gj.grid.plugins.pagination[\"private\"].changePage(a, c);\n      });\n    },\n    assignButtonHandler: function assignButtonHandler(a, b, c, d, e) {\n      var f = a.data().style.pager;\n      d < 1 || d > e ? b.hide() : (b.show().off(\"click\").text(d), d === c ? b.addClass(f.activeButton) : b.removeClass(f.activeButton).on(\"click\", function () {\n        gj.grid.plugins.pagination[\"private\"].changePage(a, d);\n      }));\n    },\n    createChangePageHandler: function createChangePageHandler(a, b) {\n      return function () {\n        var b = (a.data(), parseInt(this.value, 10));\n        gj.grid.plugins.pagination[\"private\"].changePage(a, b);\n      };\n    },\n    changePage: function changePage(a, b) {\n      var c = a.data();\n      !1 === gj.grid.plugins.pagination.events.pageChanging(a, b) || isNaN(b) || (a.find('TFOOT [data-role=\"page-number\"]').val(b), c.params[c.paramNames.page] = b), a.reload();\n    },\n    updatePagerColSpan: function updatePagerColSpan(a) {\n      var b = a.find('tfoot > tr[data-role=\"pager\"] > th');\n      b && b.length && b.attr(\"colspan\", gj.grid.methods.countVisibleColumns(a));\n    },\n    isLastRecordVisible: function isLastRecordVisible(a) {\n      var b = !0,\n          c = a.data(),\n          d = parseInt(c.params[c.paramNames.limit], 10),\n          e = parseInt(c.params[c.paramNames.page], 10),\n          f = a.count();\n      return d && e && (b = (e - 1) * d + f === c.totalRecords), b;\n    }\n  },\n  \"public\": {\n    getAll: function getAll(a) {\n      var b,\n          c,\n          d,\n          e = this.data();\n      return $.isArray(e.dataSource) ? a ? e.dataSource : e.params[e.paramNames.limit] && e.params[e.paramNames.page] ? (b = parseInt(e.params[e.paramNames.limit], 10), c = parseInt(e.params[e.paramNames.page], 10), d = (c - 1) * b, e.records.slice(d, d + b)) : e.records : e.records;\n    }\n  },\n  events: {\n    pageSizeChange: function pageSizeChange(a, b) {\n      a.triggerHandler(\"pageSizeChange\", [b]);\n    },\n    pageChanging: function pageChanging(a, b) {\n      a.triggerHandler(\"pageChanging\", [b]);\n    }\n  },\n  configure: function configure(a, b, c) {\n    $.extend(!0, a, gj.grid.plugins.pagination[\"public\"]);\n    a.data();\n    c.pager && (gj.grid.methods.isLastRecordVisible = gj.grid.plugins.pagination[\"private\"].isLastRecordVisible, a.on(\"initialized\", function () {\n      gj.grid.plugins.pagination[\"private\"].init(a);\n    }), a.on(\"dataBound\", function (b, c, d) {\n      gj.grid.plugins.pagination[\"private\"].reloadPager(a, d);\n    }), a.on(\"columnShow\", function () {\n      gj.grid.plugins.pagination[\"private\"].updatePagerColSpan(a);\n    }), a.on(\"columnHide\", function () {\n      gj.grid.plugins.pagination[\"private\"].updatePagerColSpan(a);\n    }));\n  }\n}, gj.grid.plugins.responsiveDesign = {\n  config: {\n    base: {\n      resizeCheckInterval: 500,\n      responsive: !1,\n      showHiddenColumnsAsDetails: !1,\n      defaultColumn: {\n        priority: void 0,\n        minWidth: 250\n      },\n      style: {\n        rowDetailItem: \"\"\n      }\n    },\n    bootstrap: {\n      style: {\n        rowDetailItem: \"col-lg-4\"\n      }\n    }\n  },\n  \"private\": {\n    orderColumns: function orderColumns(a) {\n      var b = [];\n\n      if (a.columns && a.columns.length) {\n        for (i = 0; i < a.columns.length; i++) {\n          b.push({\n            position: i,\n            field: a.columns[i].field,\n            minWidth: a.columns[i].width || a.columns[i].minWidth || a.defaultColumn.minWidth,\n            priority: a.columns[i].priority || 0\n          });\n        }\n\n        b.sort(function (a, b) {\n          var c = 0;\n          return a.priority < b.priority ? c = -1 : a.priority > b.priority && (c = 1), c;\n        });\n      }\n\n      return b;\n    },\n    updateDetails: function updateDetails(a) {\n      var b, c, d, e, f, g, h, i, j;\n\n      for (b = a.find('tbody > tr[data-role=\"row\"]'), c = a.data(), d = 0; d < b.length; d++) {\n        for (f = $(b[d]), g = f.data(\"details\"), e = 0; e < c.columns.length; e++) {\n          i = c.columns[e], h = g && g.find('div[data-id=\"' + i.field + '\"]'), c.columns[e].hidden ? (j = \"<b>\" + (i.title || i.field) + \"</b>: {\" + i.field + \"}\", h && h.length ? h.empty().html(j) : (h = $('<div data-id=\"' + i.field + '\"/>').html(j), h.addClass(c.style.rowDetailItem), g && g.length || (g = $('<div class=\"row\"/>')), g.append(h))) : h && h.length && h.remove();\n        }\n\n        a.updateDetails(f);\n      }\n    }\n  },\n  \"public\": {\n    oldWidth: void 0,\n    resizeCheckIntervalId: void 0,\n    makeResponsive: function makeResponsive() {\n      var a,\n          b,\n          c = 0,\n          d = this.data(),\n          e = gj.grid.plugins.responsiveDesign[\"private\"].orderColumns(d);\n\n      for (a = 0; a < e.length; a++) {\n        b = this.find(\"thead>tr>th:eq(\" + e[a].position + \")\"), b.is(\":visible\") && e[a].minWidth < b.width() && (c += b.width() - e[a].minWidth);\n      }\n\n      if (c) for (a = 0; a < e.length; a++) {\n        b = this.find(\"thead>tr>th:eq(\" + e[a].position + \")\"), !b.is(\":visible\") && e[a].minWidth <= c && (this.showColumn(e[a].field), c -= b.width());\n      }\n\n      for (a = e.length - 1; a >= 0; a--) {\n        b = this.find(\"thead>tr>th:eq(\" + e[a].position + \")\"), b.is(\":visible\") && e[a].priority && e[a].minWidth > b.outerWidth() && this.hideColumn(e[a].field);\n      }\n\n      return this;\n    }\n  },\n  events: {\n    resize: function resize(a, b, c) {\n      a.triggerHandler(\"resize\", [b, c]);\n    }\n  },\n  configure: function configure(a, b, c) {\n    $.extend(!0, a, gj.grid.plugins.responsiveDesign[\"public\"]), b.responsive && (a.on(\"initialized\", function () {\n      a.makeResponsive(), a.oldWidth = a.width(), a.resizeCheckIntervalId = setInterval(function () {\n        var b = a.width();\n        b !== a.oldWidth && gj.grid.plugins.responsiveDesign.events.resize(a, b, a.oldWidth), a.oldWidth = b;\n      }, b.resizeCheckInterval);\n    }), a.on(\"destroy\", function () {\n      a.resizeCheckIntervalId && clearInterval(a.resizeCheckIntervalId);\n    }), a.on(\"resize\", function () {\n      a.makeResponsive();\n    })), b.showHiddenColumnsAsDetails && gj.grid.plugins.expandCollapseRows && (a.on(\"dataBound\", function () {\n      gj.grid.plugins.responsiveDesign[\"private\"].updateDetails(a);\n    }), a.on(\"columnHide\", function () {\n      gj.grid.plugins.responsiveDesign[\"private\"].updateDetails(a);\n    }), a.on(\"columnShow\", function () {\n      gj.grid.plugins.responsiveDesign[\"private\"].updateDetails(a);\n    }), a.on(\"rowDataBound\", function () {\n      gj.grid.plugins.responsiveDesign[\"private\"].updateDetails(a);\n    }));\n  }\n}, gj.grid.plugins.toolbar = {\n  config: {\n    base: {\n      toolbarTemplate: void 0,\n      title: void 0,\n      style: {\n        toolbar: \"gj-grid-md-toolbar\"\n      }\n    },\n    bootstrap: {\n      style: {\n        toolbar: \"gj-grid-bootstrap-toolbar\"\n      }\n    },\n    bootstrap4: {\n      style: {\n        toolbar: \"gj-grid-bootstrap-4-toolbar\"\n      }\n    }\n  },\n  \"private\": {\n    init: function init(a) {\n      var b, c, d;\n      b = a.data(), c = a.prev('div[data-role=\"toolbar\"]'), (void 0 !== b.toolbarTemplate || void 0 !== b.title || c.length > 0) && (0 === c.length && (c = $('<div data-role=\"toolbar\"></div>'), a.before(c)), c.addClass(b.style.toolbar), 0 === c.children().length && b.toolbarTemplate && c.append(b.toolbarTemplate), d = c.find('[data-role=\"title\"]'), 0 === d.length && (d = $('<div data-role=\"title\"/>'), c.prepend(d)), b.title && d.text(b.title), b.minWidth && c.css(\"min-width\", b.minWidth));\n    }\n  },\n  \"public\": {\n    title: function title(a) {\n      var b = this.parent().find('div[data-role=\"toolbar\"] [data-role=\"title\"]');\n      return void 0 !== a ? (b.text(a), this) : b.text();\n    }\n  },\n  configure: function configure(a) {\n    $.extend(!0, a, gj.grid.plugins.toolbar[\"public\"]), a.on(\"initialized\", function () {\n      gj.grid.plugins.toolbar[\"private\"].init(a);\n    }), a.on(\"destroying\", function () {\n      a.prev('[data-role=\"toolbar\"]').remove();\n    });\n  }\n}, gj.grid.plugins.resizableColumns = {\n  config: {\n    base: {\n      resizableColumns: !1\n    }\n  },\n  \"private\": {\n    init: function init(a, b) {\n      var c, d, e, f, g, h;\n\n      if (c = a.find('thead tr[data-role=\"caption\"] th'), c.length) {\n        for (e = 0; e < c.length - 1; e++) {\n          d = $(c[e]), f = $('<div class=\"gj-grid-column-resizer-wrapper\" />'), h = parseInt(d.css(\"padding-right\"), 10) + 3, g = $('<span class=\"gj-grid-column-resizer\" />').css(\"margin-right\", \"-\" + h + \"px\"), g.draggable({\n            start: function start() {\n              a.addClass(\"gj-unselectable\"), a.addClass(\"gj-grid-resize-cursor\");\n            },\n            stop: function stop() {\n              a.removeClass(\"gj-unselectable\"), a.removeClass(\"gj-grid-resize-cursor\"), this.style.removeProperty(\"top\"), this.style.removeProperty(\"left\"), this.style.removeProperty(\"position\");\n            },\n            drag: gj.grid.plugins.resizableColumns[\"private\"].createResizeHandle(a, d, b.columns[e])\n          }), d.append(f.append(g));\n        }\n\n        for (e = 0; e < c.length; e++) {\n          d = $(c[e]), d.attr(\"width\") || d.attr(\"width\", d.outerWidth());\n        }\n      }\n    },\n    createResizeHandle: function createResizeHandle(a, b, c) {\n      var d = a.data();\n      return function (e, f) {\n        var g,\n            h,\n            i,\n            j,\n            k,\n            l,\n            m = parseInt(b.attr(\"width\"), 10),\n            n = gj.core.position(this),\n            o = {\n          top: f.top - n.top,\n          left: f.left - n.left\n        };\n        if (m || (m = b.outerWidth()), o.left && (k = m + o.left, c.width = k, b.attr(\"width\", k), h = b[0].cellIndex, j = b[0].parentElement.children[h + 1], l = parseInt($(j).attr(\"width\"), 10) - o.left, j.setAttribute(\"width\", l), d.resizableColumns)) for (i = a[0].tBodies[0].children, g = 0; g < i.length; g++) {\n          i[g].cells[h].setAttribute(\"width\", k), j = i[g].cells[h + 1], j.setAttribute(\"width\", l);\n        }\n      };\n    }\n  },\n  \"public\": {},\n  configure: function configure(a, b, c) {\n    $.extend(!0, a, gj.grid.plugins.resizableColumns[\"public\"]), b.resizableColumns && gj.draggable && a.on(\"initialized\", function () {\n      gj.grid.plugins.resizableColumns[\"private\"].init(a, b);\n    });\n  }\n}, gj.grid.plugins.rowReorder = {\n  config: {\n    base: {\n      rowReorder: !1,\n      rowReorderColumn: void 0,\n      orderNumberField: void 0,\n      style: {\n        targetRowIndicatorTop: \"gj-grid-row-reorder-indicator-top\",\n        targetRowIndicatorBottom: \"gj-grid-row-reorder-indicator-bottom\"\n      }\n    }\n  },\n  \"private\": {\n    init: function init(a) {\n      var b,\n          c,\n          d,\n          e = a.find('tbody tr[data-role=\"row\"]');\n\n      for (a.data(\"rowReorderColumn\") && (c = gj.grid.methods.getColumnPosition(a.data(\"columns\"), a.data(\"rowReorderColumn\"))), b = 0; b < e.length; b++) {\n        d = $(e[b]), void 0 !== c ? d.find(\"td:eq(\" + c + \")\").on(\"mousedown\", gj.grid.plugins.rowReorder[\"private\"].createRowMouseDownHandler(a, d)) : d.on(\"mousedown\", gj.grid.plugins.rowReorder[\"private\"].createRowMouseDownHandler(a, d));\n      }\n    },\n    createRowMouseDownHandler: function createRowMouseDownHandler(a, b) {\n      return function (c) {\n        var d,\n            e,\n            f = a.clone(),\n            g = a.data(\"columns\");\n\n        for (a.addClass(\"gj-unselectable\"), $(\"body\").append(f), f.attr(\"data-role\", \"draggable-clone\").css(\"cursor\", \"move\"), f.children(\"thead\").remove().children(\"tfoot\").remove(), f.find('tbody tr:not([data-position=\"' + b.data(\"position\") + '\"])').remove(), e = f.find(\"tbody tr td\"), d = 0; d < e.length; d++) {\n          g[d].width && e[d].setAttribute(\"width\", g[d].width);\n        }\n\n        f.draggable({\n          stop: gj.grid.plugins.rowReorder[\"private\"].createDragStopHandler(a, b)\n        }), f.css({\n          position: \"absolute\",\n          top: b.offset().top,\n          left: b.offset().left,\n          width: b.width(),\n          zIndex: 1\n        }), \"true\" === b.attr(\"data-droppable\") && b.droppable(\"destroy\"), b.siblings('tr[data-role=\"row\"]').each(function () {\n          var a = $(this);\n          \"true\" === a.attr(\"data-droppable\") && a.droppable(\"destroy\"), a.droppable({\n            over: gj.grid.plugins.rowReorder[\"private\"].createDroppableOverHandler(b),\n            out: gj.grid.plugins.rowReorder[\"private\"].droppableOut\n          });\n        }), f.trigger(\"mousedown\");\n      };\n    },\n    createDragStopHandler: function createDragStopHandler(a, b) {\n      return function (c, d) {\n        $('table[data-role=\"draggable-clone\"]').draggable(\"destroy\").remove(), a.removeClass(\"gj-unselectable\"), b.siblings('tr[data-role=\"row\"]').each(function () {\n          var c,\n              e,\n              f,\n              g,\n              h,\n              i = $(this),\n              j = i.data(\"position\"),\n              k = b.data(\"position\"),\n              l = a.data();\n\n          if (i.droppable(\"isOver\", d)) {\n            for (j < k ? i.before(b) : i.after(b), l.records.splice(j - 1, 0, l.records.splice(k - 1, 1)[0]), c = i.parent().find('tr[data-role=\"row\"]'), f = 0; f < c.length; f++) {\n              $(c[f]).attr(\"data-position\", f + 1);\n            }\n\n            if (l.orderNumberField) {\n              for (f = 0; f < l.records.length; f++) {\n                l.records[f][l.orderNumberField] = f + 1;\n              }\n\n              for (f = 0; f < c.length; f++) {\n                e = $(c[f]), h = gj.grid.methods.getId(e, l.primaryKey, e.attr(\"data-position\")), g = gj.grid.methods.getByPosition(a, e.attr(\"data-position\")), a.setCellContent(h, l.orderNumberField, g[l.orderNumberField]);\n              }\n            }\n          }\n\n          i.removeClass(\"gj-grid-top-border\"), i.removeClass(\"gj-grid-bottom-border\"), i.droppable(\"destroy\");\n        });\n      };\n    },\n    createDroppableOverHandler: function createDroppableOverHandler(a) {\n      return function (b) {\n        var c = $(this);\n        c.data(\"position\") < a.data(\"position\") ? c.addClass(\"gj-grid-top-border\") : c.addClass(\"gj-grid-bottom-border\");\n      };\n    },\n    droppableOut: function droppableOut() {\n      $(this).removeClass(\"gj-grid-top-border\"), $(this).removeClass(\"gj-grid-bottom-border\");\n    }\n  },\n  \"public\": {},\n  configure: function configure(a, b, c) {\n    $.extend(!0, a, gj.grid.plugins.rowReorder[\"public\"]), b.rowReorder && gj.draggable && gj.droppable && a.on(\"dataBound\", function () {\n      gj.grid.plugins.rowReorder[\"private\"].init(a);\n    });\n  }\n}, gj.grid.plugins[\"export\"] = {\n  config: {\n    base: {}\n  },\n  \"public\": {\n    getCSV: function getCSV(a) {\n      var b,\n          c,\n          d = \"\",\n          e = \"\",\n          f = this.data().columns,\n          g = this.getAll(a);\n\n      if (g.length) {\n        for (b = 0; b < f.length; b++) {\n          gj.grid.plugins[\"export\"][\"public\"].isColumnApplicable(f[b]) && (d += '\"' + (f[b].title || f[b].field).replace(/<[^>]+>/g, \" \") + '\",');\n        }\n\n        for (e += d.slice(0, d.length - 1) + \"\\r\\n\", b = 0; b < g.length; b++) {\n          for (d = \"\", c = 0; c < f.length; c++) {\n            gj.grid.plugins[\"export\"][\"public\"].isColumnApplicable(f[c]) && (d += '\"' + g[b][f[c].field] + '\",');\n          }\n\n          e += d.slice(0, d.length - 1) + \"\\r\\n\";\n        }\n      }\n\n      return e;\n    },\n    downloadCSV: function downloadCSV(a, b) {\n      var c = document.createElement(\"a\");\n      return document.body.appendChild(c), c.download = a || \"griddata.csv\", window.navigator.userAgent.indexOf(\"Edge\") > -1 ? c.href = URL.createObjectURL(new Blob([this.getCSV(b)], {\n        type: \"text/csv;charset=utf-8;\"\n      })) : c.href = \"data:text/csv;charset=utf-8,\" + escape(this.getCSV(b)), c.click(), document.body.removeChild(c), this;\n    },\n    isColumnApplicable: function isColumnApplicable(a) {\n      return !0 !== a.hidden && !a.role;\n    }\n  },\n  configure: function configure(a) {\n    $.extend(!0, a, gj.grid.plugins[\"export\"][\"public\"]);\n  }\n}, gj.grid.plugins.columnReorder = {\n  config: {\n    base: {\n      columnReorder: !1,\n      dragReady: !1,\n      style: {\n        targetRowIndicatorTop: \"gj-grid-row-reorder-indicator-top\",\n        targetRowIndicatorBottom: \"gj-grid-row-reorder-indicator-bottom\"\n      }\n    }\n  },\n  \"private\": {\n    init: function init(a) {\n      var b,\n          c,\n          d = a.find(\"thead tr th\");\n\n      for (b = 0; b < d.length; b++) {\n        c = $(d[b]), c.on(\"mousedown\", gj.grid.plugins.columnReorder[\"private\"].createMouseDownHandler(a, c)), c.on(\"mousemove\", gj.grid.plugins.columnReorder[\"private\"].createMouseMoveHandler(a, c)), c.on(\"mouseup\", gj.grid.plugins.columnReorder[\"private\"].createMouseUpHandler(a, c));\n      }\n    },\n    createMouseDownHandler: function createMouseDownHandler(a) {\n      return function (b) {\n        a.timeout = setTimeout(function () {\n          a.data(\"dragReady\", !0);\n        }, 100);\n      };\n    },\n    createMouseUpHandler: function createMouseUpHandler(a) {\n      return function (b) {\n        clearTimeout(a.timeout), a.data(\"dragReady\", !1);\n      };\n    },\n    createMouseMoveHandler: function createMouseMoveHandler(a, b) {\n      return function (c) {\n        var d, e;\n        a.data(\"dragReady\") && (a.data(\"dragReady\", !1), d = a.clone(), e = b.index(), a.addClass(\"gj-unselectable\"), $(\"body\").append(d), d.attr(\"data-role\", \"draggable-clone\").css(\"cursor\", \"move\"), d.find(\"thead tr th:eq(\" + e + \")\").siblings().remove(), d.find('tbody tr[data-role != \"row\"]').remove(), d.find(\"tbody tr td:nth-child(\" + (e + 1) + \")\").siblings().remove(), d.find(\"tfoot\").remove(), d.draggable({\n          stop: gj.grid.plugins.columnReorder[\"private\"].createDragStopHandler(a, b)\n        }), d.css({\n          position: \"absolute\",\n          top: b.offset().top,\n          left: b.offset().left,\n          width: b.width(),\n          zIndex: 1\n        }), \"true\" === b.attr(\"data-droppable\") && b.droppable(\"destroy\"), b.siblings(\"th\").each(function () {\n          var c = $(this);\n          \"true\" === c.attr(\"data-droppable\") && c.droppable(\"destroy\"), c.droppable({\n            over: gj.grid.plugins.columnReorder[\"private\"].createDroppableOverHandler(a, b),\n            out: gj.grid.plugins.columnReorder[\"private\"].droppableOut\n          });\n        }), d.trigger(\"mousedown\"));\n      };\n    },\n    createDragStopHandler: function createDragStopHandler(a, b) {\n      return function (c, d) {\n        $('table[data-role=\"draggable-clone\"]').draggable(\"destroy\").remove(), a.removeClass(\"gj-unselectable\"), b.siblings(\"th\").each(function () {\n          var c = $(this),\n              e = a.data(),\n              f = gj.grid.methods.getColumnPosition(e.columns, c.data(\"field\")),\n              g = gj.grid.methods.getColumnPosition(e.columns, b.data(\"field\"));\n          c.removeClass(\"gj-grid-left-border\").removeClass(\"gj-grid-right-border\"), c.closest(\"table\").find('tbody tr[data-role=\"row\"] td:nth-child(' + (c.index() + 1) + \")\").removeClass(\"gj-grid-left-border\").removeClass(\"gj-grid-right-border\"), c.droppable(\"isOver\", d) && (f < g ? c.before(b) : c.after(b), gj.grid.plugins.columnReorder[\"private\"].moveRowCells(a, g, f), e.columns.splice(f, 0, e.columns.splice(g, 1)[0])), c.droppable(\"destroy\");\n        });\n      };\n    },\n    moveRowCells: function moveRowCells(a, b, c) {\n      var d,\n          e,\n          f = a.find('tbody tr[data-role=\"row\"]');\n\n      for (d = 0; d < f.length; d++) {\n        e = $(f[d]), c < b ? e.find(\"td:eq(\" + c + \")\").before(e.find(\"td:eq(\" + b + \")\")) : e.find(\"td:eq(\" + c + \")\").after(e.find(\"td:eq(\" + b + \")\"));\n      }\n    },\n    createDroppableOverHandler: function createDroppableOverHandler(a, b) {\n      return function (c) {\n        var d = $(this),\n            e = a.data();\n        gj.grid.methods.getColumnPosition(e.columns, d.data(\"field\")) < gj.grid.methods.getColumnPosition(e.columns, b.data(\"field\")) ? (d.addClass(\"gj-grid-left-border\"), a.find('tbody tr[data-role=\"row\"] td:nth-child(' + (d.index() + 1) + \")\").addClass(\"gj-grid-left-border\")) : (d.addClass(\"gj-grid-right-border\"), a.find('tbody tr[data-role=\"row\"] td:nth-child(' + (d.index() + 1) + \")\").addClass(\"gj-grid-right-border\"));\n      };\n    },\n    droppableOut: function droppableOut() {\n      var a = $(this);\n      a.removeClass(\"gj-grid-left-border\").removeClass(\"gj-grid-right-border\"), a.closest(\"table\").find('tbody tr[data-role=\"row\"] td:nth-child(' + (a.index() + 1) + \")\").removeClass(\"gj-grid-left-border\").removeClass(\"gj-grid-right-border\");\n    }\n  },\n  \"public\": {},\n  configure: function configure(a, b, c) {\n    $.extend(!0, a, gj.grid.plugins.columnReorder[\"public\"]), b.columnReorder && a.on(\"initialized\", function () {\n      gj.grid.plugins.columnReorder[\"private\"].init(a);\n    });\n  }\n}, gj.grid.plugins.headerFilter = {\n  config: {\n    base: {\n      defaultColumnSettings: {\n        filterable: !0\n      },\n      headerFilter: {\n        type: \"onenterkeypress\"\n      }\n    }\n  },\n  \"private\": {\n    init: function init(a) {\n      var b,\n          c,\n          d,\n          e = a.data(),\n          f = $('<tr data-role=\"filter\"/>');\n\n      for (b = 0; b < e.columns.length; b++) {\n        c = $(\"<th/>\"), e.columns[b].filterable && (d = $('<input data-field=\"' + e.columns[b].field + '\" class=\"gj-width-full\" />'), \"onchange\" === e.headerFilter.type ? d.on(\"input propertychange\", function (b) {\n          gj.grid.plugins.headerFilter[\"private\"].reload(a, $(this));\n        }) : (d.on(\"keypress\", function (b) {\n          13 == b.which && gj.grid.plugins.headerFilter[\"private\"].reload(a, $(this));\n        }), d.on(\"blur\", function (b) {\n          gj.grid.plugins.headerFilter[\"private\"].reload(a, $(this));\n        })), c.append(d)), e.columns[b].hidden && c.hide(), f.append(c);\n      }\n\n      a.children(\"thead\").append(f);\n    },\n    reload: function reload(a, b) {\n      var c = {};\n      c[b.data(\"field\")] = b.val(), a.reload(c);\n    }\n  },\n  \"public\": {},\n  events: {},\n  configure: function configure(a, b, c) {\n    $.extend(!0, a, gj.grid.plugins.headerFilter[\"public\"]);\n    a.data();\n    c.headerFilter && a.on(\"initialized\", function () {\n      gj.grid.plugins.headerFilter[\"private\"].init(a);\n    });\n  }\n}, gj.grid.plugins.grouping = {\n  config: {\n    base: {\n      paramNames: {\n        groupBy: \"groupBy\",\n        groupByDirection: \"groupByDirection\"\n      },\n      grouping: {\n        groupBy: void 0,\n        direction: \"asc\"\n      },\n      icons: {\n        expandGroup: '<i class=\"gj-icon plus\" />',\n        collapseGroup: '<i class=\"gj-icon minus\" />'\n      }\n    },\n    fontawesome: {\n      icons: {\n        expandGroup: '<i class=\"fa fa-plus\" aria-hidden=\"true\"></i>',\n        collapseGroup: '<i class=\"fa fa-minus\" aria-hidden=\"true\"></i>'\n      }\n    },\n    glyphicons: {\n      icons: {\n        expandGroup: '<span class=\"glyphicon glyphicon-plus\" />',\n        collapseGroup: '<span class=\"glyphicon glyphicon-minus\" />'\n      }\n    }\n  },\n  \"private\": {\n    init: function init(a) {\n      var b,\n          c = a.data();\n      b = void 0, a.on(\"rowDataBound\", function (d, e, f, g) {\n        if (b !== g[c.grouping.groupBy] || 1 === e[0].rowIndex) {\n          var h = gj.grid.methods.countVisibleColumns(a) - 1,\n              i = $('<tr role=\"group\" />'),\n              j = $('<td class=\"gj-text-align-center gj-unselectable gj-cursor-pointer\" />');\n          j.append('<div data-role=\"display\">' + c.icons.collapseGroup + \"</div>\"), j.on(\"click\", gj.grid.plugins.grouping[\"private\"].createExpandCollapseHandler(c)), i.append(j), i.append('<td colspan=\"' + h + '\"><div data-role=\"display\">' + c.grouping.groupBy + \": \" + g[c.grouping.groupBy] + \"</div></td>\"), i.insertBefore(e), b = g[c.grouping.groupBy];\n        }\n\n        e.show();\n      }), c.params[c.paramNames.groupBy] = c.grouping.groupBy, c.params[c.paramNames.groupByDirection] = c.grouping.direction;\n    },\n    grouping: function grouping(a, b) {\n      var c = a.data();\n      b.sort(gj.grid.methods.createDefaultSorter(c.grouping.direction, c.grouping.groupBy));\n    },\n    createExpandCollapseHandler: function createExpandCollapseHandler(a) {\n      return function (b) {\n        var c = $(this),\n            d = gj.grid.plugins.grouping[\"private\"];\n        \"row\" === c.closest(\"tr\").next(\":visible\").data(\"role\") ? d.collapseGroup(a, c) : d.expandGroup(a, c);\n      };\n    },\n    collapseGroup: function collapseGroup(a, b) {\n      var c = b.children('div[data-role=\"display\"]');\n      b.closest(\"tr\").nextUntil('[role=\"group\"]').hide(), c.empty().append(a.icons.expandGroup);\n    },\n    expandGroup: function expandGroup(a, b) {\n      var c = b.children('div[data-role=\"display\"]');\n      b.closest(\"tr\").nextUntil('[role=\"group\"]').show(), c.empty().append(a.icons.collapseGroup);\n    }\n  },\n  \"public\": {},\n  configure: function configure(a) {\n    var b,\n        c = a.data();\n    $.extend(!0, a, gj.grid.plugins.grouping[\"public\"]), c.grouping && c.grouping.groupBy && (b = {\n      title: \"\",\n      width: c.defaultIconColumnWidth,\n      align: \"center\",\n      stopPropagation: !0,\n      cssClass: \"gj-cursor-pointer gj-unselectable\"\n    }, c.columns = [b].concat(c.columns), a.on(\"initialized\", function () {\n      gj.grid.plugins.grouping[\"private\"].init(a);\n    }), a.on(\"dataFiltered\", function (b, c) {\n      gj.grid.plugins.grouping[\"private\"].grouping(a, c);\n    }));\n  }\n}, gj.grid.messages[\"en-us\"] = {\n  First: \"First\",\n  Previous: \"Previous\",\n  Next: \"Next\",\n  Last: \"Last\",\n  Page: \"Page\",\n  FirstPageTooltip: \"First Page\",\n  PreviousPageTooltip: \"Previous Page\",\n  NextPageTooltip: \"Next Page\",\n  LastPageTooltip: \"Last Page\",\n  Refresh: \"Refresh\",\n  Of: \"of\",\n  DisplayingRecords: \"Displaying records\",\n  RowsPerPage: \"Rows per page:\",\n  Edit: \"Edit\",\n  Delete: \"Delete\",\n  Update: \"Update\",\n  Cancel: \"Cancel\",\n  NoRecordsFound: \"No records found.\",\n  Loading: \"Loading...\"\n}, gj.tree = {\n  plugins: {}\n}, gj.tree.config = {\n  base: {\n    params: {},\n    autoLoad: !0,\n    selectionType: \"single\",\n    cascadeSelection: !1,\n    dataSource: void 0,\n    primaryKey: void 0,\n    textField: \"text\",\n    childrenField: \"children\",\n    hasChildrenField: \"hasChildren\",\n    imageCssClassField: \"imageCssClass\",\n    imageUrlField: \"imageUrl\",\n    imageHtmlField: \"imageHtml\",\n    disabledField: \"disabled\",\n    width: void 0,\n    border: !1,\n    uiLibrary: \"materialdesign\",\n    iconsLibrary: \"materialicons\",\n    autoGenId: 1,\n    autoGenFieldName: \"autoId_b5497cc5-7ef3-49f5-a7dc-4a932e1aee4a\",\n    indentation: 24,\n    style: {\n      wrapper: \"gj-unselectable\",\n      list: \"gj-list gj-list-md\",\n      item: void 0,\n      active: \"gj-list-md-active\",\n      leafIcon: void 0,\n      border: \"gj-tree-md-border\"\n    },\n    icons: {\n      expand: '<i class=\"gj-icon chevron-right\" />',\n      collapse: '<i class=\"gj-icon chevron-down\" />'\n    }\n  },\n  bootstrap: {\n    style: {\n      wrapper: \"gj-unselectable gj-tree-bootstrap-3\",\n      list: \"gj-list gj-list-bootstrap list-group\",\n      item: \"list-group-item\",\n      active: \"active\",\n      border: \"gj-tree-bootstrap-border\"\n    },\n    iconsLibrary: \"glyphicons\"\n  },\n  bootstrap4: {\n    style: {\n      wrapper: \"gj-unselectable gj-tree-bootstrap-4\",\n      list: \"gj-list gj-list-bootstrap\",\n      item: \"list-group-item\",\n      active: \"active\",\n      border: \"gj-tree-bootstrap-border\"\n    },\n    icons: {\n      expand: '<i class=\"gj-icon plus\" />',\n      collapse: '<i class=\"gj-icon minus\" />'\n    }\n  },\n  materialicons: {\n    style: {\n      expander: \"gj-tree-material-icons-expander\"\n    }\n  },\n  fontawesome: {\n    style: {\n      expander: \"gj-tree-font-awesome-expander\"\n    },\n    icons: {\n      expand: '<i class=\"fa fa-plus\" aria-hidden=\"true\"></i>',\n      collapse: '<i class=\"fa fa-minus\" aria-hidden=\"true\"></i>'\n    }\n  },\n  glyphicons: {\n    style: {\n      expander: \"gj-tree-glyphicons-expander\"\n    },\n    icons: {\n      expand: '<span class=\"glyphicon glyphicon-plus\" />',\n      collapse: '<span class=\"glyphicon glyphicon-minus\" />'\n    }\n  }\n}, gj.tree.events = {\n  initialized: function initialized(a) {\n    a.triggerHandler(\"initialized\");\n  },\n  dataBinding: function dataBinding(a) {\n    a.triggerHandler(\"dataBinding\");\n  },\n  dataBound: function dataBound(a) {\n    a.triggerHandler(\"dataBound\");\n  },\n  select: function select(a, b, c) {\n    return a.triggerHandler(\"select\", [b, c]);\n  },\n  unselect: function unselect(a, b, c) {\n    return a.triggerHandler(\"unselect\", [b, c]);\n  },\n  expand: function expand(a, b, c) {\n    return a.triggerHandler(\"expand\", [b, c]);\n  },\n  collapse: function collapse(a, b, c) {\n    return a.triggerHandler(\"collapse\", [b, c]);\n  },\n  enable: function enable(a, b) {\n    return a.triggerHandler(\"enable\", [b]);\n  },\n  disable: function disable(a, b) {\n    return a.triggerHandler(\"disable\", [b]);\n  },\n  destroying: function destroying(a) {\n    return a.triggerHandler(\"destroying\");\n  },\n  nodeDataBound: function nodeDataBound(a, b, c, d) {\n    return a.triggerHandler(\"nodeDataBound\", [b, c, d]);\n  }\n}, gj.tree.methods = {\n  init: function init(a) {\n    return gj.widget.prototype.init.call(this, a, \"tree\"), gj.tree.methods.initialize.call(this), this.data(\"autoLoad\") && this.reload(), this;\n  },\n  initialize: function initialize() {\n    var a = this.data(),\n        b = $('<ul class=\"' + a.style.list + '\"/>');\n    this.empty().addClass(a.style.wrapper).append(b), a.width && this.width(a.width), a.border && this.addClass(a.style.border), gj.tree.events.initialized(this);\n  },\n  useHtmlDataSource: function useHtmlDataSource(a, b) {\n    b.dataSource = [];\n  },\n  render: function render(a, b) {\n    var c;\n    return b && (\"string\" == typeof b && JSON && (b = JSON.parse(b)), c = a.data(), c.records = b, c.primaryKey || gj.tree.methods.genAutoId(c, c.records), gj.tree.methods.loadData(a)), a;\n  },\n  filter: function filter(a) {\n    return a.data().dataSource;\n  },\n  genAutoId: function genAutoId(a, b) {\n    var c;\n\n    for (c = 0; c < b.length; c++) {\n      b[c][a.autoGenFieldName] = a.autoGenId++, b[c][a.childrenField] && b[c][a.childrenField].length && gj.tree.methods.genAutoId(a, b[c][a.childrenField]);\n    }\n  },\n  loadData: function loadData(a) {\n    var b,\n        c = a.data(\"records\"),\n        d = a.children(\"ul\");\n\n    for (gj.tree.events.dataBinding(a), d.off().empty(), b = 0; b < c.length; b++) {\n      gj.tree.methods.appendNode(a, d, c[b], 1);\n    }\n\n    gj.tree.events.dataBound(a);\n  },\n  appendNode: function appendNode(a, b, c, d, e) {\n    var f,\n        g,\n        h,\n        i,\n        j,\n        k = a.data(),\n        l = k.primaryKey ? c[k.primaryKey] : c[k.autoGenFieldName];\n\n    if (g = $('<li data-id=\"' + l + '\" data-role=\"node\" />').addClass(k.style.item), $wrapper = $('<div data-role=\"wrapper\" />'), $expander = $('<span data-role=\"expander\" data-mode=\"close\"></span>').addClass(k.style.expander), $display = $('<span data-role=\"display\">' + c[k.textField] + \"</span>\"), hasChildren = void 0 !== c[k.hasChildrenField] && \"true\" === c[k.hasChildrenField].toString().toLowerCase(), disabled = void 0 !== c[k.disabledField] && \"true\" === c[k.disabledField].toString().toLowerCase(), k.indentation && $wrapper.append('<span data-role=\"spacer\" style=\"width: ' + k.indentation * (d - 1) + 'px;\"></span>'), disabled ? gj.tree.methods.disableNode(a, g) : ($expander.on(\"click\", gj.tree.methods.expanderClickHandler(a)), $display.on(\"click\", gj.tree.methods.displayClickHandler(a))), $wrapper.append($expander), $wrapper.append($display), g.append($wrapper), e ? b.find(\"li:eq(\" + (e - 1) + \")\").before(g) : b.append(g), k.imageCssClassField && c[k.imageCssClassField] ? (i = $('<span data-role=\"image\"><span class=\"' + c[k.imageCssClassField] + '\"></span></span>'), i.insertBefore($display)) : k.imageUrlField && c[k.imageUrlField] ? (i = $('<span data-role=\"image\"></span>'), i.insertBefore($display), j = $('<img src=\"' + c[k.imageUrlField] + '\"></img>'), j.attr(\"width\", i.width()).attr(\"height\", i.height()), i.append(j)) : k.imageHtmlField && c[k.imageHtmlField] && (i = $('<span data-role=\"image\">' + c[k.imageHtmlField] + \"</span>\"), i.insertBefore($display)), c[k.childrenField] && c[k.childrenField].length || hasChildren) {\n      if ($expander.empty().append(k.icons.expand), h = $(\"<ul />\").addClass(k.style.list).addClass(\"gj-hidden\"), g.append(h), c[k.childrenField] && c[k.childrenField].length) for (f = 0; f < c[k.childrenField].length; f++) {\n        gj.tree.methods.appendNode(a, h, c[k.childrenField][f], d + 1);\n      }\n    } else k.style.leafIcon ? $expander.addClass(k.style.leafIcon) : $expander.html(\"&nbsp;\");\n\n    gj.tree.events.nodeDataBound(a, g, c.id, c);\n  },\n  expanderClickHandler: function expanderClickHandler(a) {\n    return function (b) {\n      var c = $(this),\n          d = c.closest(\"li\");\n      \"close\" === c.attr(\"data-mode\") ? a.expand(d) : a.collapse(d);\n    };\n  },\n  expand: function expand(a, b, c) {\n    var d,\n        e,\n        f = b.find('>[data-role=\"wrapper\"]>[data-role=\"expander\"]'),\n        g = a.data(),\n        h = b.attr(\"data-id\"),\n        i = b.children(\"ul\");\n    if (!1 !== gj.tree.events.expand(a, b, h) && i && i.length && (i.show(), f.attr(\"data-mode\", \"open\"), f.empty().append(g.icons.collapse), c)) for (d = b.find(\"ul>li\"), e = 0; e < d.length; e++) {\n      gj.tree.methods.expand(a, $(d[e]), c);\n    }\n    return a;\n  },\n  collapse: function collapse(a, b, c) {\n    var d,\n        e,\n        f = b.find('>[data-role=\"wrapper\"]>[data-role=\"expander\"]'),\n        g = a.data(),\n        h = b.attr(\"data-id\"),\n        i = b.children(\"ul\");\n    if (!1 !== gj.tree.events.collapse(a, b, h) && i && i.length && (i.hide(), f.attr(\"data-mode\", \"close\"), f.empty().append(g.icons.expand), c)) for (d = b.find(\"ul>li\"), e = 0; e < d.length; e++) {\n      gj.tree.methods.collapse(a, $(d[e]), c);\n    }\n    return a;\n  },\n  expandAll: function expandAll(a) {\n    var b,\n        c = a.find(\"ul>li\");\n\n    for (b = 0; b < c.length; b++) {\n      gj.tree.methods.expand(a, $(c[b]), !0);\n    }\n\n    return a;\n  },\n  collapseAll: function collapseAll(a) {\n    var b,\n        c = a.find(\"ul>li\");\n\n    for (b = 0; b < c.length; b++) {\n      gj.tree.methods.collapse(a, $(c[b]), !0);\n    }\n\n    return a;\n  },\n  displayClickHandler: function displayClickHandler(a) {\n    return function (b) {\n      var c = $(this),\n          d = c.closest(\"li\"),\n          e = a.data().cascadeSelection;\n      \"true\" === d.attr(\"data-selected\") ? gj.tree.methods.unselect(a, d, e) : (\"single\" === a.data(\"selectionType\") && gj.tree.methods.unselectAll(a), gj.tree.methods.select(a, d, e));\n    };\n  },\n  selectAll: function selectAll(a) {\n    var b,\n        c = a.find(\"ul>li\");\n\n    for (b = 0; b < c.length; b++) {\n      gj.tree.methods.select(a, $(c[b]), !0);\n    }\n\n    return a;\n  },\n  select: function select(a, b, c) {\n    var d,\n        e,\n        f = a.data();\n    if (\"true\" !== b.attr(\"data-selected\") && !1 !== gj.tree.events.select(a, b, b.attr(\"data-id\")) && (b.addClass(f.style.active).attr(\"data-selected\", \"true\"), c)) for (e = b.find(\"ul>li\"), d = 0; d < e.length; d++) {\n      gj.tree.methods.select(a, $(e[d]), c);\n    }\n  },\n  unselectAll: function unselectAll(a) {\n    var b,\n        c = a.find(\"ul>li\");\n\n    for (b = 0; b < c.length; b++) {\n      gj.tree.methods.unselect(a, $(c[b]), !0);\n    }\n\n    return a;\n  },\n  unselect: function unselect(a, b, c) {\n    var d, e;\n    a.data();\n    if (\"true\" === b.attr(\"data-selected\") && !1 !== gj.tree.events.unselect(a, b, b.attr(\"data-id\")) && (b.removeClass(a.data().style.active).removeAttr(\"data-selected\"), c)) for (e = b.find(\"ul>li\"), d = 0; d < e.length; d++) {\n      gj.tree.methods.unselect(a, $(e[d]), c);\n    }\n  },\n  getSelections: function getSelections(a) {\n    var b,\n        c,\n        d,\n        e = [],\n        f = a.children(\"li\");\n    if (f && f.length) for (b = 0; b < f.length; b++) {\n      c = $(f[b]), \"true\" === c.attr(\"data-selected\") ? e.push(c.attr(\"data-id\")) : c.has(\"ul\") && (d = gj.tree.methods.getSelections(c.children(\"ul\")), d.length && (e = e.concat(d)));\n    }\n    return e;\n  },\n  getDataById: function getDataById(a, b, c) {\n    var d,\n        e = a.data(),\n        f = void 0;\n\n    for (d = 0; d < c.length; d++) {\n      if (e.primaryKey && c[d][e.primaryKey] == b) {\n        f = c[d];\n        break;\n      }\n\n      if (c[d][e.autoGenFieldName] == b) {\n        f = c[d];\n        break;\n      }\n\n      if (c[d][e.childrenField] && c[d][e.childrenField].length && (f = gj.tree.methods.getDataById(a, b, c[d][e.childrenField]))) break;\n    }\n\n    return f;\n  },\n  getDataByText: function getDataByText(a, b, c) {\n    var d,\n        e = void 0,\n        f = a.data();\n\n    for (d = 0; d < c.length; d++) {\n      if (b === c[d][f.textField]) {\n        e = c[d];\n        break;\n      }\n\n      if (c[d][f.childrenField] && c[d][f.childrenField].length && (e = gj.tree.methods.getDataByText(a, b, c[d][f.childrenField]))) break;\n    }\n\n    return e;\n  },\n  getNodeById: function getNodeById(a, b) {\n    var c,\n        d,\n        e = void 0,\n        f = a.children(\"li\");\n    if (f && f.length) for (c = 0; c < f.length; c++) {\n      if (d = $(f[c]), b == d.attr(\"data-id\")) {\n        e = d;\n        break;\n      }\n\n      if (d.has(\"ul\") && (e = gj.tree.methods.getNodeById(d.children(\"ul\"), b))) break;\n    }\n    return e;\n  },\n  getNodeByText: function getNodeByText(a, b) {\n    var c,\n        d,\n        e = void 0,\n        f = a.children(\"li\");\n    if (f && f.length) for (c = 0; c < f.length; c++) {\n      if (d = $(f[c]), b === d.find('>[data-role=\"wrapper\"]>[data-role=\"display\"]').text()) {\n        e = d;\n        break;\n      }\n\n      if (d.has(\"ul\") && (e = gj.tree.methods.getNodeByText(d.children(\"ul\"), b))) break;\n    }\n    return e;\n  },\n  addNode: function addNode(a, b, c, d) {\n    var e,\n        f,\n        g = a.data();\n    return c && c.length ? (\"li\" === c[0].tagName.toLowerCase() && (0 === c.children(\"ul\").length && (c.find('[data-role=\"expander\"]').empty().append(g.icons.collapse), c.append($(\"<ul />\").addClass(g.style.list))), c = c.children(\"ul\")), f = a.getDataById(c.parent().data(\"id\")), f[g.childrenField] || (f[g.childrenField] = []), f[g.childrenField].push(b)) : (c = a.children(\"ul\"), a.data(\"records\").push(b)), e = c.parentsUntil('[data-type=\"tree\"]', \"ul\").length + 1, g.primaryKey || gj.tree.methods.genAutoId(g, [b]), gj.tree.methods.appendNode(a, c, b, e, d), a;\n  },\n  remove: function remove(a, b) {\n    return gj.tree.methods.removeDataById(a, b.attr(\"data-id\"), a.data(\"records\")), b.remove(), a;\n  },\n  removeDataById: function removeDataById(a, b, c) {\n    var d,\n        e = a.data();\n\n    for (d = 0; d < c.length; d++) {\n      if (e.primaryKey && c[d][e.primaryKey] == b) {\n        c.splice(d, 1);\n        break;\n      }\n\n      if (c[d][e.autoGenFieldName] == b) {\n        c.splice(d, 1);\n        break;\n      }\n\n      c[d][e.childrenField] && c[d][e.childrenField].length && gj.tree.methods.removeDataById(a, b, c[d][e.childrenField]);\n    }\n  },\n  update: function update(a, b, c) {\n    var d = a.data(),\n        e = a.getNodeById(b);\n    a.getDataById(b);\n    return c, e.find('>[data-role=\"wrapper\"]>[data-role=\"display\"]').html(c[d.textField]), gj.tree.events.nodeDataBound(a, e, b, c), a;\n  },\n  getChildren: function getChildren(a, b, c) {\n    var d,\n        e,\n        f = [],\n        c = void 0 === c || c;\n\n    for (e = c ? b.find(\"ul li\") : b.find(\">ul>li\"), d = 0; d < e.length; d++) {\n      f.push($(e[d]).data(\"id\"));\n    }\n\n    return f;\n  },\n  enableAll: function enableAll(a) {\n    var b,\n        c = a.find(\"ul>li\");\n\n    for (b = 0; b < c.length; b++) {\n      gj.tree.methods.enableNode(a, $(c[b]), !0);\n    }\n\n    return a;\n  },\n  enableNode: function enableNode(a, b, c) {\n    var d,\n        e,\n        f = b.find('>[data-role=\"wrapper\"]>[data-role=\"expander\"]'),\n        g = b.find('>[data-role=\"wrapper\"]>[data-role=\"display\"]'),\n        c = void 0 === c || c;\n    if (b.removeClass(\"disabled\"), f.on(\"click\", gj.tree.methods.expanderClickHandler(a)), g.on(\"click\", gj.tree.methods.displayClickHandler(a)), gj.tree.events.enable(a, b), c) for (e = b.find(\"ul>li\"), d = 0; d < e.length; d++) {\n      gj.tree.methods.enableNode(a, $(e[d]), c);\n    }\n  },\n  disableAll: function disableAll(a) {\n    var b,\n        c = a.find(\"ul>li\");\n\n    for (b = 0; b < c.length; b++) {\n      gj.tree.methods.disableNode(a, $(c[b]), !0);\n    }\n\n    return a;\n  },\n  disableNode: function disableNode(a, b, c) {\n    var d,\n        e,\n        f = b.find('>[data-role=\"wrapper\"]>[data-role=\"expander\"]'),\n        g = b.find('>[data-role=\"wrapper\"]>[data-role=\"display\"]'),\n        c = void 0 === c || c;\n    if (b.addClass(\"disabled\"), f.off(\"click\"), g.off(\"click\"), gj.tree.events.disable(a, b), c) for (e = b.find(\"ul>li\"), d = 0; d < e.length; d++) {\n      gj.tree.methods.disableNode(a, $(e[d]), c);\n    }\n  },\n  destroy: function destroy(a) {\n    return a.data() && (gj.tree.events.destroying(a), a.xhr && a.xhr.abort(), a.off(), a.removeData(), a.removeAttr(\"data-type\"), a.removeClass().empty()), a;\n  },\n  pathFinder: function pathFinder(a, b, c, d) {\n    var e,\n        f = !1;\n\n    for (e = 0; e < b.length; e++) {\n      if (b[e].id == c) {\n        f = !0;\n        break;\n      }\n\n      if (gj.tree.methods.pathFinder(a, b[e][a.childrenField], c, d)) {\n        d.push(b[e].data[a.textField]), f = !0;\n        break;\n      }\n    }\n\n    return f;\n  }\n}, gj.tree.widget = function (a, b) {\n  var c = this,\n      d = gj.tree.methods;\n  return c.reload = function (a) {\n    return gj.widget.prototype.reload.call(this, a);\n  }, c.render = function (a) {\n    return d.render(this, a);\n  }, c.addNode = function (a, b, c) {\n    return d.addNode(this, a, b, c);\n  }, c.removeNode = function (a) {\n    return d.remove(this, a);\n  }, c.updateNode = function (a, b) {\n    return d.update(this, a, b);\n  }, c.destroy = function () {\n    return d.destroy(this);\n  }, c.expand = function (a, b) {\n    return d.expand(this, a, b);\n  }, c.collapse = function (a, b) {\n    return d.collapse(this, a, b);\n  }, c.expandAll = function () {\n    return d.expandAll(this);\n  }, c.collapseAll = function () {\n    return d.collapseAll(this);\n  }, c.getDataById = function (a) {\n    return d.getDataById(this, a, this.data(\"records\"));\n  }, c.getDataByText = function (a) {\n    return d.getDataByText(this, a, this.data(\"records\"));\n  }, c.getNodeById = function (a) {\n    return d.getNodeById(this.children(\"ul\"), a);\n  }, c.getNodeByText = function (a) {\n    return d.getNodeByText(this.children(\"ul\"), a);\n  }, c.getAll = function () {\n    return this.data(\"records\");\n  }, c.select = function (a) {\n    return d.select(this, a);\n  }, c.unselect = function (a) {\n    return d.unselect(this, a);\n  }, c.selectAll = function () {\n    return d.selectAll(this);\n  }, c.unselectAll = function () {\n    return d.unselectAll(this);\n  }, c.getSelections = function () {\n    return d.getSelections(this.children(\"ul\"));\n  }, c.getChildren = function (a, b) {\n    return d.getChildren(this, a, b);\n  }, c.parents = function (a) {\n    var b = [],\n        c = this.data();\n    return d.pathFinder(c, c.records, a, b), b.reverse();\n  }, c.enable = function (a, b) {\n    return d.enableNode(this, a, b);\n  }, c.enableAll = function () {\n    return d.enableAll(this);\n  }, c.disable = function (a, b) {\n    return d.disableNode(this, a, b);\n  }, c.disableAll = function () {\n    return d.disableAll(this);\n  }, $.extend(a, c), \"tree\" !== a.attr(\"data-type\") && d.init.call(a, b), a;\n}, gj.tree.widget.prototype = new gj.widget(), gj.tree.widget.constructor = gj.tree.widget, function (a) {\n  a.fn.tree = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.tree.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.tree.widget(this, a);\n    }\n  };\n}(jQuery), gj.tree.plugins.checkboxes = {\n  config: {\n    base: {\n      checkboxes: void 0,\n      checkedField: \"checked\",\n      cascadeCheck: !0\n    }\n  },\n  \"private\": {\n    dataBound: function dataBound(a) {\n      var b;\n      a.data(\"cascadeCheck\") && (b = a.find('li[data-role=\"node\"]'), $.each(b, function () {\n        var a = $(this),\n            b = a.find('[data-role=\"checkbox\"] input[type=\"checkbox\"]').checkbox(\"state\");\n        \"checked\" === b && (gj.tree.plugins.checkboxes[\"private\"].updateChildrenState(a, b), gj.tree.plugins.checkboxes[\"private\"].updateParentState(a, b));\n      }));\n    },\n    nodeDataBound: function nodeDataBound(a, b, c, d) {\n      var e, f, g, h, i;\n      0 === b.find('> [data-role=\"wrapper\"] > [data-role=\"checkbox\"]').length && (e = a.data(), f = b.find('> [data-role=\"wrapper\"] > [data-role=\"expander\"]'), g = $('<input type=\"checkbox\"/>'), h = $('<span data-role=\"checkbox\"></span>').append(g), i = void 0 !== d[e.disabledField] && \"true\" === d[e.disabledField].toString().toLowerCase(), g = g.checkbox({\n        uiLibrary: e.uiLibrary,\n        iconsLibrary: e.iconsLibrary,\n        change: function change(c, e) {\n          gj.tree.plugins.checkboxes.events.checkboxChange(a, b, d, g.state());\n        }\n      }), i && g.prop(\"disabled\", !0), d[e.checkedField] && g.state(\"checked\"), g.on(\"click\", function (a) {\n        var b = g.closest(\"li\"),\n            c = g.state();\n        e.cascadeCheck && (gj.tree.plugins.checkboxes[\"private\"].updateChildrenState(b, c), gj.tree.plugins.checkboxes[\"private\"].updateParentState(b, c));\n      }), f.after(h));\n    },\n    updateParentState: function updateParentState(a, b) {\n      var c, d, e, f, g, h;\n      c = a.parent(\"ul\").parent(\"li\"), 1 === c.length && (d = a.parent(\"ul\").parent(\"li\").find('> [data-role=\"wrapper\"] > [data-role=\"checkbox\"] input[type=\"checkbox\"]'), e = a.siblings().find('> [data-role=\"wrapper\"] > span[data-role=\"checkbox\"] input[type=\"checkbox\"]'), f = \"checked\" === b, g = \"unchecked\" === b, h = \"indeterminate\", $.each(e, function () {\n        var a = $(this).checkbox(\"state\");\n        f && \"checked\" !== a && (f = !1), g && \"unchecked\" !== a && (g = !1);\n      }), f && !g && (h = \"checked\"), !f && g && (h = \"unchecked\"), d.checkbox(\"state\", h), gj.tree.plugins.checkboxes[\"private\"].updateParentState(c, d.checkbox(\"state\")));\n    },\n    updateChildrenState: function updateChildrenState(a, b) {\n      var c = a.find('ul li [data-role=\"wrapper\"] [data-role=\"checkbox\"] input[type=\"checkbox\"]');\n      c.length > 0 && $.each(c, function () {\n        $(this).checkbox(\"state\", b);\n      });\n    },\n    update: function update(a, b, c) {\n      var d = b.find('[data-role=\"checkbox\"] input[type=\"checkbox\"]').first();\n      $(d).checkbox(\"state\", c), a.data().cascadeCheck && (gj.tree.plugins.checkboxes[\"private\"].updateChildrenState(b, c), gj.tree.plugins.checkboxes[\"private\"].updateParentState(b, c));\n    }\n  },\n  \"public\": {\n    getCheckedNodes: function getCheckedNodes() {\n      var a = [],\n          b = this.find('li [data-role=\"checkbox\"] input[type=\"checkbox\"]');\n      return $.each(b, function () {\n        var b = $(this);\n        \"checked\" === b.checkbox(\"state\") && a.push(b.closest(\"li\").data(\"id\"));\n      }), a;\n    },\n    checkAll: function checkAll() {\n      var a = this.find('li [data-role=\"checkbox\"] input[type=\"checkbox\"]');\n      return $.each(a, function () {\n        $(this).checkbox(\"state\", \"checked\");\n      }), this;\n    },\n    uncheckAll: function uncheckAll() {\n      var a = this.find('li [data-role=\"checkbox\"] input[type=\"checkbox\"]');\n      return $.each(a, function () {\n        $(this).checkbox(\"state\", \"unchecked\");\n      }), this;\n    },\n    check: function check(a) {\n      return gj.tree.plugins.checkboxes[\"private\"].update(this, a, \"checked\"), this;\n    },\n    uncheck: function uncheck(a) {\n      return gj.tree.plugins.checkboxes[\"private\"].update(this, a, \"unchecked\"), this;\n    }\n  },\n  events: {\n    checkboxChange: function checkboxChange(a, b, c, d) {\n      return a.triggerHandler(\"checkboxChange\", [b, c, d]);\n    }\n  },\n  configure: function configure(a) {\n    a.data(\"checkboxes\") && gj.checkbox && ($.extend(!0, a, gj.tree.plugins.checkboxes[\"public\"]), a.on(\"nodeDataBound\", function (b, c, d, e) {\n      gj.tree.plugins.checkboxes[\"private\"].nodeDataBound(a, c, d, e);\n    }), a.on(\"dataBound\", function () {\n      gj.tree.plugins.checkboxes[\"private\"].dataBound(a);\n    }), a.on(\"enable\", function (a, b) {\n      b.find('>[data-role=\"wrapper\"]>[data-role=\"checkbox\"] input[type=\"checkbox\"]').prop(\"disabled\", !1);\n    }), a.on(\"disable\", function (a, b) {\n      b.find('>[data-role=\"wrapper\"]>[data-role=\"checkbox\"] input[type=\"checkbox\"]').prop(\"disabled\", !0);\n    }));\n  }\n}, gj.tree.plugins.dragAndDrop = {\n  config: {\n    base: {\n      dragAndDrop: void 0,\n      style: {\n        dragEl: \"gj-tree-drag-el gj-tree-md-drag-el\",\n        dropAsChildIcon: \"gj-cursor-pointer gj-icon plus\",\n        dropAbove: \"gj-tree-drop-above\",\n        dropBelow: \"gj-tree-drop-below\"\n      }\n    },\n    bootstrap: {\n      style: {\n        dragEl: \"gj-tree-drag-el gj-tree-bootstrap-drag-el\",\n        dropAsChildIcon: \"glyphicon glyphicon-plus\",\n        dropAbove: \"drop-above\",\n        dropBelow: \"drop-below\"\n      }\n    },\n    bootstrap4: {\n      style: {\n        dragEl: \"gj-tree-drag-el gj-tree-bootstrap-drag-el\",\n        dropAsChildIcon: \"gj-cursor-pointer gj-icon plus\",\n        dropAbove: \"drop-above\",\n        dropBelow: \"drop-below\"\n      }\n    }\n  },\n  \"private\": {\n    nodeDataBound: function nodeDataBound(a, b) {\n      var c = b.children('[data-role=\"wrapper\"]'),\n          d = b.find('>[data-role=\"wrapper\"]>[data-role=\"display\"]');\n      c.length && d.length && (d.on(\"mousedown\", gj.tree.plugins.dragAndDrop[\"private\"].createNodeMouseDownHandler(a)), d.on(\"mousemove\", gj.tree.plugins.dragAndDrop[\"private\"].createNodeMouseMoveHandler(a, b, d)), d.on(\"mouseup\", gj.tree.plugins.dragAndDrop[\"private\"].createNodeMouseUpHandler(a)));\n    },\n    createNodeMouseDownHandler: function createNodeMouseDownHandler(a) {\n      return function (b) {\n        a.data(\"dragReady\", !0);\n      };\n    },\n    createNodeMouseUpHandler: function createNodeMouseUpHandler(a) {\n      return function (b) {\n        a.data(\"dragReady\", !1);\n      };\n    },\n    createNodeMouseMoveHandler: function createNodeMouseMoveHandler(a, b, c) {\n      return function (d) {\n        if (a.data(\"dragReady\")) {\n          var e,\n              f,\n              g,\n              h,\n              i = a.data();\n          a.data(\"dragReady\", !1), e = c.clone().wrap('<div data-role=\"wrapper\"/>').closest(\"div\").wrap('<li class=\"' + i.style.item + '\" />').closest(\"li\").wrap('<ul class=\"' + i.style.list + '\" />').closest(\"ul\"), $(\"body\").append(e), e.attr(\"data-role\", \"draggable-clone\").addClass(\"gj-unselectable\").addClass(i.style.dragEl), e.find('[data-role=\"wrapper\"]').prepend('<span data-role=\"indicator\" />'), e.draggable({\n            drag: gj.tree.plugins.dragAndDrop[\"private\"].createDragHandler(a, b, c),\n            stop: gj.tree.plugins.dragAndDrop[\"private\"].createDragStopHandler(a, b, c)\n          }), f = c.parent(), g = c.offset().top, g -= parseInt(f.css(\"border-top-width\")) + parseInt(f.css(\"margin-top\")) + parseInt(f.css(\"padding-top\")), h = c.offset().left, h -= parseInt(f.css(\"border-left-width\")) + parseInt(f.css(\"margin-left\")) + parseInt(f.css(\"padding-left\")), h -= e.find('[data-role=\"indicator\"]').outerWidth(!0), e.css({\n            position: \"absolute\",\n            top: g,\n            left: h,\n            width: c.outerWidth(!0)\n          }), \"true\" === c.attr(\"data-droppable\") && c.droppable(\"destroy\"), gj.tree.plugins.dragAndDrop[\"private\"].getTargetDisplays(a, b, c).each(function () {\n            var a = $(this);\n            \"true\" === a.attr(\"data-droppable\") && a.droppable(\"destroy\"), a.droppable();\n          }), gj.tree.plugins.dragAndDrop[\"private\"].getTargetDisplays(a, b).each(function () {\n            var a = $(this);\n            \"true\" === a.attr(\"data-droppable\") && a.droppable(\"destroy\"), a.droppable();\n          }), e.trigger(\"mousedown\");\n        }\n      };\n    },\n    getTargetDisplays: function getTargetDisplays(a, b, c) {\n      return a.find('[data-role=\"display\"]').not(c).not(b.find('[data-role=\"display\"]'));\n    },\n    getTargetWrappers: function getTargetWrappers(a, b) {\n      return a.find('[data-role=\"wrapper\"]').not(b.find('[data-role=\"wrapper\"]'));\n    },\n    createDragHandler: function createDragHandler(a, b, c) {\n      var d = gj.tree.plugins.dragAndDrop[\"private\"].getTargetDisplays(a, b, c),\n          e = gj.tree.plugins.dragAndDrop[\"private\"].getTargetWrappers(a, b),\n          f = a.data();\n      return function (a, b, c) {\n        var g = $(this),\n            h = !1;\n        d.each(function () {\n          var a,\n              b = $(this);\n          if (b.droppable(\"isOver\", c)) return a = g.find('[data-role=\"indicator\"]'), f.style.dropAsChildIcon ? a.addClass(f.style.dropAsChildIcon) : a.text(\"+\"), h = !0, !1;\n          g.find('[data-role=\"indicator\"]').removeClass(f.style.dropAsChildIcon).empty();\n        }), e.each(function () {\n          var a,\n              b = $(this);\n          !h && b.droppable(\"isOver\", c) ? (a = b.position().top + b.outerHeight() / 2, c.y < a ? b.addClass(f.style.dropAbove).removeClass(f.style.dropBelow) : b.addClass(f.style.dropBelow).removeClass(f.style.dropAbove)) : b.removeClass(f.style.dropAbove).removeClass(f.style.dropBelow);\n        });\n      };\n    },\n    createDragStopHandler: function createDragStopHandler(a, b, c) {\n      var d = gj.tree.plugins.dragAndDrop[\"private\"].getTargetDisplays(a, b, c),\n          e = gj.tree.plugins.dragAndDrop[\"private\"].getTargetWrappers(a, b),\n          f = a.data();\n      return function (c, g) {\n        var h,\n            i,\n            j,\n            k,\n            l = !1;\n        $(this).draggable(\"destroy\").remove(), d.each(function () {\n          var c,\n              d = $(this);\n          if (d.droppable(\"isOver\", g)) return i = d.closest(\"li\"), j = b.parent(\"ul\").parent(\"li\"), c = i.children(\"ul\"), 0 === c.length && (c = $(\"<ul />\").addClass(f.style.list), i.append(c)), !1 !== gj.tree.plugins.dragAndDrop.events.nodeDrop(a, b.data(\"id\"), i.data(\"id\"), c.children(\"li\").length + 1) && (c.append(b), h = a.getDataById(b.data(\"id\")), gj.tree.methods.removeDataById(a, b.data(\"id\"), f.records), k = a.getDataById(c.parent().data(\"id\")), void 0 === k[f.childrenField] && (k[f.childrenField] = []), k[f.childrenField].push(h), gj.tree.plugins.dragAndDrop[\"private\"].refresh(a, b, i, j)), l = !0, !1;\n          d.droppable(\"destroy\");\n        }), l || e.each(function () {\n          var c,\n              d,\n              e,\n              k = $(this);\n          if (k.droppable(\"isOver\", g)) return i = k.closest(\"li\"), j = b.parent(\"ul\").parent(\"li\"), c = g.y < k.position().top + k.outerHeight() / 2, e = b.data(\"id\"), d = i.prevAll('li:not([data-id=\"' + e + '\"])').length + (c ? 1 : 2), !1 !== gj.tree.plugins.dragAndDrop.events.nodeDrop(a, e, i.parent(\"ul\").parent(\"li\").data(\"id\"), d) && (h = a.getDataById(b.data(\"id\")), gj.tree.methods.removeDataById(a, b.data(\"id\"), f.records), a.getDataById(i.parent().data(\"id\"))[f.childrenField].splice(i.index() + (c ? 0 : 1), 0, h), c ? b.insertBefore(i) : b.insertAfter(i), gj.tree.plugins.dragAndDrop[\"private\"].refresh(a, b, i, j)), !1;\n          k.droppable(\"destroy\");\n        });\n      };\n    },\n    refresh: function refresh(a, b, c, d) {\n      var e = a.data();\n      gj.tree.plugins.dragAndDrop[\"private\"].refreshNode(a, c), gj.tree.plugins.dragAndDrop[\"private\"].refreshNode(a, d), gj.tree.plugins.dragAndDrop[\"private\"].refreshNode(a, b), b.find('li[data-role=\"node\"]').each(function () {\n        gj.tree.plugins.dragAndDrop[\"private\"].refreshNode(a, $(this));\n      }), c.children('[data-role=\"wrapper\"]').removeClass(e.style.dropAbove).removeClass(e.style.dropBelow);\n    },\n    refreshNode: function refreshNode(a, b) {\n      var c = b.children('[data-role=\"wrapper\"]'),\n          d = c.children('[data-role=\"expander\"]'),\n          e = c.children('[data-role=\"spacer\"]'),\n          f = b.children(\"ul\"),\n          g = a.data(),\n          h = b.parentsUntil('[data-type=\"tree\"]', \"ul\").length;\n      f.length && f.children().length ? f.is(\":visible\") ? d.empty().append(g.icons.collapse) : d.empty().append(g.icons.expand) : d.empty(), c.removeClass(g.style.dropAbove).removeClass(g.style.dropBelow), e.css(\"width\", g.indentation * (h - 1));\n    }\n  },\n  \"public\": {},\n  events: {\n    nodeDrop: function nodeDrop(a, b, c, d) {\n      return a.triggerHandler(\"nodeDrop\", [b, c, d]);\n    }\n  },\n  configure: function configure(a) {\n    $.extend(!0, a, gj.tree.plugins.dragAndDrop[\"public\"]), a.data(\"dragAndDrop\") && gj.draggable && gj.droppable && a.on(\"nodeDataBound\", function (b, c) {\n      gj.tree.plugins.dragAndDrop[\"private\"].nodeDataBound(a, c);\n    });\n  }\n}, gj.tree.plugins.lazyLoading = {\n  config: {\n    base: {\n      paramNames: {\n        parentId: \"parentId\"\n      },\n      lazyLoading: !1\n    }\n  },\n  \"private\": {\n    nodeDataBound: function nodeDataBound(a, b, c, d) {\n      var e = a.data(),\n          f = b.find('> [data-role=\"wrapper\"] > [data-role=\"expander\"]');\n      d.hasChildren && f.empty().append(e.icons.expand);\n    },\n    createDoneHandler: function createDoneHandler(a, b) {\n      return function (c) {\n        var d,\n            e,\n            f,\n            g = a.data();\n\n        if (\"string\" == typeof c && JSON && (c = JSON.parse(c)), c && c.length) {\n          for (f = b.children(\"ul\"), 0 === f.length && (f = $(\"<ul />\").addClass(g.style.list), b.append(f)), d = 0; d < c.length; d++) {\n            a.addNode(c[d], f);\n          }\n\n          e = b.find('>[data-role=\"wrapper\"]>[data-role=\"expander\"]'), e.attr(\"data-mode\", \"open\"), e.empty().append(g.icons.collapse), gj.tree.events.dataBound(a);\n        }\n      };\n    },\n    expand: function expand(a, b, c) {\n      var d,\n          e = a.data(),\n          f = {},\n          g = b.find(\">ul>li\");\n      g && g.length || \"string\" == typeof e.dataSource && (f[e.paramNames.parentId] = c, d = {\n        url: e.dataSource,\n        data: f\n      }, a.xhr && a.xhr.abort(), a.xhr = $.ajax(d).done(gj.tree.plugins.lazyLoading[\"private\"].createDoneHandler(a, b)).fail(a.createErrorHandler()));\n    }\n  },\n  \"public\": {},\n  events: {},\n  configure: function configure(a, b, c) {\n    c.lazyLoading && (a.on(\"nodeDataBound\", function (b, c, d, e) {\n      gj.tree.plugins.lazyLoading[\"private\"].nodeDataBound(a, c, d, e);\n    }), a.on(\"expand\", function (b, c, d) {\n      gj.tree.plugins.lazyLoading[\"private\"].expand(a, c, d);\n    }));\n  }\n}, gj.checkbox = {\n  plugins: {}\n}, gj.checkbox.config = {\n  base: {\n    uiLibrary: \"materialdesign\",\n    iconsLibrary: \"materialicons\",\n    style: {\n      wrapperCssClass: \"gj-checkbox-md\",\n      spanCssClass: void 0\n    }\n  },\n  bootstrap: {\n    style: {\n      wrapperCssClass: \"gj-checkbox-bootstrap\"\n    },\n    iconsLibrary: \"glyphicons\"\n  },\n  bootstrap4: {\n    style: {\n      wrapperCssClass: \"gj-checkbox-bootstrap gj-checkbox-bootstrap-4\"\n    },\n    iconsLibrary: \"materialicons\"\n  },\n  materialicons: {\n    style: {\n      iconsCssClass: \"gj-checkbox-material-icons\",\n      spanCssClass: \"gj-icon\"\n    }\n  },\n  glyphicons: {\n    style: {\n      iconsCssClass: \"gj-checkbox-glyphicons\",\n      spanCssClass: \"\"\n    }\n  },\n  fontawesome: {\n    style: {\n      iconsCssClass: \"gj-checkbox-fontawesome\",\n      spanCssClass: \"fa\"\n    }\n  }\n}, gj.checkbox.methods = {\n  init: function init(a) {\n    var b = this;\n    return gj.widget.prototype.init.call(this, a, \"checkbox\"), b.attr(\"data-checkbox\", \"true\"), gj.checkbox.methods.initialize(b), b;\n  },\n  initialize: function initialize(a) {\n    var b,\n        c,\n        d = a.data();\n    d.style.wrapperCssClass && (b = $('<label class=\"' + d.style.wrapperCssClass + \" \" + d.style.iconsCssClass + '\"></label>'), a.attr(\"id\") && b.attr(\"for\", a.attr(\"id\")), a.wrap(b), c = $(\"<span />\"), d.style.spanCssClass && c.addClass(d.style.spanCssClass), a.parent().append(c));\n  },\n  state: function state(a, b) {\n    return b ? (\"checked\" === b ? (a.prop(\"indeterminate\", !1), a.prop(\"checked\", !0)) : \"unchecked\" === b ? (a.prop(\"indeterminate\", !1), a.prop(\"checked\", !1)) : \"indeterminate\" === b && (a.prop(\"checked\", !0), a.prop(\"indeterminate\", !0)), gj.checkbox.events.change(a, b), a) : b = a.prop(\"indeterminate\") ? \"indeterminate\" : a.prop(\"checked\") ? \"checked\" : \"unchecked\";\n  },\n  toggle: function toggle(a) {\n    return \"checked\" == a.state() ? a.state(\"unchecked\") : a.state(\"checked\"), a;\n  },\n  destroy: function destroy(a) {\n    return \"true\" === a.attr(\"data-checkbox\") && (a.removeData(), a.removeAttr(\"data-guid\"), a.removeAttr(\"data-checkbox\"), a.off(), a.next(\"span\").remove(), a.unwrap()), a;\n  }\n}, gj.checkbox.events = {\n  change: function change(a, b) {\n    return a.triggerHandler(\"change\", [b]);\n  }\n}, gj.checkbox.widget = function (a, b) {\n  var c = this,\n      d = gj.checkbox.methods;\n  return c.toggle = function () {\n    return d.toggle(this);\n  }, c.state = function (a) {\n    return d.state(this, a);\n  }, c.destroy = function () {\n    return d.destroy(this);\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-checkbox\") && d.init.call(a, b), a;\n}, gj.checkbox.widget.prototype = new gj.widget(), gj.checkbox.widget.constructor = gj.checkbox.widget, function (a) {\n  a.fn.checkbox = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.checkbox.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.checkbox.widget(this, a);\n    }\n  };\n}(jQuery), gj.editor = {\n  plugins: {},\n  messages: {}\n}, gj.editor.config = {\n  base: {\n    height: 300,\n    width: void 0,\n    uiLibrary: \"materialdesign\",\n    iconsLibrary: \"materialicons\",\n    locale: \"en-us\",\n    buttons: void 0,\n    style: {\n      wrapper: \"gj-editor gj-editor-md\",\n      buttonsGroup: \"gj-button-md-group\",\n      button: \"gj-button-md\",\n      buttonActive: \"active\"\n    }\n  },\n  bootstrap: {\n    style: {\n      wrapper: \"gj-editor gj-editor-bootstrap\",\n      buttonsGroup: \"btn-group\",\n      button: \"btn btn-default gj-cursor-pointer\",\n      buttonActive: \"active\"\n    }\n  },\n  bootstrap4: {\n    style: {\n      wrapper: \"gj-editor gj-editor-bootstrap\",\n      buttonsGroup: \"btn-group\",\n      button: \"btn btn-outline-secondary gj-cursor-pointer\",\n      buttonActive: \"active\"\n    }\n  },\n  materialicons: {\n    icons: {\n      bold: '<i class=\"gj-icon bold\" />',\n      italic: '<i class=\"gj-icon italic\" />',\n      strikethrough: '<i class=\"gj-icon strikethrough\" />',\n      underline: '<i class=\"gj-icon underlined\" />',\n      listBulleted: '<i class=\"gj-icon list-bulleted\" />',\n      listNumbered: '<i class=\"gj-icon list-numbered\" />',\n      indentDecrease: '<i class=\"gj-icon indent-decrease\" />',\n      indentIncrease: '<i class=\"gj-icon indent-increase\" />',\n      alignLeft: '<i class=\"gj-icon align-left\" />',\n      alignCenter: '<i class=\"gj-icon align-center\" />',\n      alignRight: '<i class=\"gj-icon align-right\" />',\n      alignJustify: '<i class=\"gj-icon align-justify\" />',\n      undo: '<i class=\"gj-icon undo\" />',\n      redo: '<i class=\"gj-icon redo\" />'\n    }\n  },\n  fontawesome: {\n    icons: {\n      bold: '<i class=\"fa fa-bold\" aria-hidden=\"true\"></i>',\n      italic: '<i class=\"fa fa-italic\" aria-hidden=\"true\"></i>',\n      strikethrough: '<i class=\"fa fa-strikethrough\" aria-hidden=\"true\"></i>',\n      underline: '<i class=\"fa fa-underline\" aria-hidden=\"true\"></i>',\n      listBulleted: '<i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i>',\n      listNumbered: '<i class=\"fa fa-list-ol\" aria-hidden=\"true\"></i>',\n      indentDecrease: '<i class=\"fa fa-indent\" aria-hidden=\"true\"></i>',\n      indentIncrease: '<i class=\"fa fa-outdent\" aria-hidden=\"true\"></i>',\n      alignLeft: '<i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>',\n      alignCenter: '<i class=\"fa fa-align-center\" aria-hidden=\"true\"></i>',\n      alignRight: '<i class=\"fa fa-align-right\" aria-hidden=\"true\"></i>',\n      alignJustify: '<i class=\"fa fa-align-justify\" aria-hidden=\"true\"></i>',\n      undo: '<i class=\"fa fa-undo\" aria-hidden=\"true\"></i>',\n      redo: '<i class=\"fa fa-repeat\" aria-hidden=\"true\"></i>'\n    }\n  }\n}, gj.editor.methods = {\n  init: function init(a) {\n    return gj.widget.prototype.init.call(this, a, \"editor\"), this.attr(\"data-editor\", \"true\"), gj.editor.methods.initialize(this), this;\n  },\n  initialize: function initialize(a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g = this,\n        h = a.data();\n\n    if (a.hide(), \"wrapper\" !== a[0].parentElement.attributes.role && (d = document.createElement(\"div\"), d.setAttribute(\"role\", \"wrapper\"), a[0].parentNode.insertBefore(d, a[0]), d.appendChild(a[0])), gj.editor.methods.localization(h), $(d).addClass(h.style.wrapper), h.width && $(d).width(h.width), e = $(d).children('div[role=\"body\"]'), 0 === e.length && (e = $('<div role=\"body\"></div>'), $(d).append(e), a[0].innerText && (e[0].innerHTML = a[0].innerText)), e.attr(\"contenteditable\", !0), e.on(\"keydown\", function (b) {\n      var c = event.keyCode || event.charCode;\n      !1 === gj.editor.events.changing(a) && 8 !== c && 46 !== c && b.preventDefault();\n    }), e.on(\"mouseup keyup mouseout cut paste\", function (b) {\n      g.updateToolbar(a, f), gj.editor.events.changed(a), a.html(e.html());\n    }), f = $(d).children('div[role=\"toolbar\"]'), 0 === f.length) {\n      f = $('<div role=\"toolbar\"></div>'), e.before(f);\n\n      for (var i in h.buttons) {\n        b = $(\"<div />\").addClass(h.style.buttonsGroup);\n\n        for (var j in h.buttons[i]) {\n          c = $(h.buttons[i][j]), c.on(\"click\", function () {\n            gj.editor.methods.executeCmd(a, e, f, $(this));\n          }), b.append(c);\n        }\n\n        f.append(b);\n      }\n    }\n\n    e.height(h.height - gj.core.height(f[0], !0));\n  },\n  localization: function localization(a) {\n    var b = gj.editor.messages[a.locale];\n    void 0 === a.buttons && (a.buttons = [['<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.bold + '\" role=\"bold\">' + a.icons.bold + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.italic + '\" role=\"italic\">' + a.icons.italic + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.strikethrough + '\" role=\"strikethrough\">' + a.icons.strikethrough + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.underline + '\" role=\"underline\">' + a.icons.underline + \"</button>\"], ['<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.listBulleted + '\" role=\"insertunorderedlist\">' + a.icons.listBulleted + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.listNumbered + '\" role=\"insertorderedlist\">' + a.icons.listNumbered + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.indentDecrease + '\" role=\"outdent\">' + a.icons.indentDecrease + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.indentIncrease + '\" role=\"indent\">' + a.icons.indentIncrease + \"</button>\"], ['<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.alignLeft + '\" role=\"justifyleft\">' + a.icons.alignLeft + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.alignCenter + '\" role=\"justifycenter\">' + a.icons.alignCenter + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.alignRight + '\" role=\"justifyright\">' + a.icons.alignRight + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.alignJustify + '\" role=\"justifyfull\">' + a.icons.alignJustify + \"</button>\"], ['<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.undo + '\" role=\"undo\">' + a.icons.undo + \"</button>\", '<button type=\"button\" class=\"' + a.style.button + '\" title=\"' + b.redo + '\" role=\"redo\">' + a.icons.redo + \"</button>\"]]);\n  },\n  updateToolbar: function updateToolbar(a, b) {\n    var c = a.data();\n    $buttons = b.find(\"[role]\").each(function () {\n      var a = $(this),\n          b = a.attr(\"role\");\n      b && document.queryCommandEnabled(b) && \"true\" === document.queryCommandValue(b) ? a.addClass(c.style.buttonActive) : a.removeClass(c.style.buttonActive);\n    });\n  },\n  executeCmd: function executeCmd(a, b, c, d) {\n    b.focus(), document.execCommand(d.attr(\"role\"), !1), gj.editor.methods.updateToolbar(a, c);\n  },\n  content: function content(a, b) {\n    var c = a.parent().children('div[role=\"body\"]');\n    return void 0 === b ? c.html() : c.html(b);\n  },\n  destroy: function destroy(a) {\n    var b;\n    return \"true\" === a.attr(\"data-editor\") && (b = a.parent(), b.children('div[role=\"body\"]').remove(), b.children('div[role=\"toolbar\"]').remove(), a.unwrap(), a.removeData(), a.removeAttr(\"data-guid\"), a.removeAttr(\"data-editor\"), a.off(), a.show()), a;\n  }\n}, gj.editor.events = {\n  changing: function changing(a) {\n    return a.triggerHandler(\"changing\");\n  },\n  changed: function changed(a) {\n    return a.triggerHandler(\"changed\");\n  }\n}, gj.editor.widget = function (a, b) {\n  var c = this,\n      d = gj.editor.methods;\n  return c.content = function (a) {\n    return d.content(this, a);\n  }, c.destroy = function () {\n    return d.destroy(this);\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-editor\") && d.init.call(a, b), a;\n}, gj.editor.widget.prototype = new gj.widget(), gj.editor.widget.constructor = gj.editor.widget, function (a) {\n  a.fn.editor = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.editor.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.editor.widget(this, a);\n    }\n  };\n}(jQuery), gj.editor.messages[\"en-us\"] = {\n  bold: \"Bold\",\n  italic: \"Italic\",\n  strikethrough: \"Strikethrough\",\n  underline: \"Underline\",\n  listBulleted: \"List Bulleted\",\n  listNumbered: \"List Numbered\",\n  indentDecrease: \"Indent Decrease\",\n  indentIncrease: \"Indent Increase\",\n  alignLeft: \"Align Left\",\n  alignCenter: \"Align Center\",\n  alignRight: \"Align Right\",\n  alignJustify: \"Align Justify\",\n  undo: \"Undo\",\n  redo: \"Redo\"\n}, gj.dropdown = {\n  plugins: {}\n}, gj.dropdown.config = {\n  base: {\n    dataSource: void 0,\n    textField: \"text\",\n    valueField: \"value\",\n    selectedField: \"selected\",\n    width: void 0,\n    maxHeight: \"auto\",\n    placeholder: void 0,\n    fontSize: void 0,\n    uiLibrary: \"materialdesign\",\n    iconsLibrary: \"materialicons\",\n    icons: {\n      dropdown: '<i class=\"gj-icon arrow-dropdown\" />',\n      dropup: '<i class=\"gj-icon arrow-dropup\" />'\n    },\n    style: {\n      wrapper: \"gj-dropdown gj-dropdown-md gj-unselectable\",\n      list: \"gj-list gj-list-md gj-dropdown-list-md\",\n      active: \"gj-list-md-active\"\n    }\n  },\n  bootstrap: {\n    style: {\n      wrapper: \"gj-dropdown gj-dropdown-bootstrap gj-dropdown-bootstrap-3 gj-unselectable\",\n      presenter: \"btn btn-default\",\n      list: \"gj-list gj-list-bootstrap gj-dropdown-list-bootstrap list-group\",\n      item: \"list-group-item\",\n      active: \"active\"\n    },\n    iconsLibrary: \"glyphicons\"\n  },\n  bootstrap4: {\n    style: {\n      wrapper: \"gj-dropdown gj-dropdown-bootstrap gj-dropdown-bootstrap-4 gj-unselectable\",\n      presenter: \"btn btn-outline-secondary\",\n      list: \"gj-list gj-list-bootstrap gj-dropdown-list-bootstrap list-group\",\n      item: \"list-group-item\",\n      active: \"active\"\n    }\n  },\n  materialicons: {\n    style: {\n      expander: \"gj-dropdown-expander-mi\"\n    }\n  },\n  fontawesome: {\n    icons: {\n      dropdown: '<i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>',\n      dropup: '<i class=\"fa fa-caret-up\" aria-hidden=\"true\"></i>'\n    },\n    style: {\n      expander: \"gj-dropdown-expander-fa\"\n    }\n  },\n  glyphicons: {\n    icons: {\n      dropdown: '<span class=\"caret\"></span>',\n      dropup: '<span class=\"dropup\"><span class=\"caret\" ></span></span>'\n    },\n    style: {\n      expander: \"gj-dropdown-expander-glyphicons\"\n    }\n  }\n}, gj.dropdown.methods = {\n  init: function init(a) {\n    return gj.widget.prototype.init.call(this, a, \"dropdown\"), this.attr(\"data-dropdown\", \"true\"), gj.dropdown.methods.initialize(this), this;\n  },\n  getHTMLConfig: function getHTMLConfig() {\n    var a = gj.widget.prototype.getHTMLConfig.call(this),\n        b = this[0].attributes;\n    return b.placeholder && (a.placeholder = b.placeholder.value), a;\n  },\n  initialize: function initialize(a) {\n    var b = a.data(),\n        c = a.parent('div[role=\"wrapper\"]'),\n        d = $('<span role=\"display\"></span>'),\n        e = $('<span role=\"expander\">' + b.icons.dropdown + \"</span>\").addClass(b.style.expander),\n        f = $('<button role=\"presenter\" type=\"button\"></button>').addClass(b.style.presenter),\n        g = $('<ul role=\"list\" class=\"' + b.style.list + '\"></ul>').attr(\"guid\", a.attr(\"data-guid\"));\n    0 === c.length ? (c = $('<div role=\"wrapper\" />').addClass(b.style.wrapper), a.wrap(c)) : c.addClass(b.style.wrapper), b.fontSize && f.css(\"font-size\", b.fontSize), f.on(\"click\", function (b) {\n      g.is(\":visible\") ? gj.dropdown.methods.close(a, g) : gj.dropdown.methods.open(a, g);\n    }), f.on(\"blur\", function (b) {\n      setTimeout(function () {\n        gj.dropdown.methods.close(a, g);\n      }, 500);\n    }), f.append(d).append(e), a.hide(), a.after(f), $(\"body\").append(g), g.hide(), a.reload();\n  },\n  setListPosition: function setListPosition(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = a.getBoundingClientRect(),\n        i = window.scrollY || window.pageYOffset || 0;\n    window.scrollX || window.pageXOffset;\n    b.style.overflow = \"\", b.style.overflowX = \"\", b.style.height = \"\", gj.core.setChildPosition(a, b), d = gj.core.height(b, !0), g = b.getBoundingClientRect(), e = gj.core.height(a, !0), \"auto\" === c.maxHeight ? h.top < g.top ? h.top + d + e > window.innerHeight && (f = window.innerHeight - h.top - e - 3) : h.top - d - 3 > 0 ? b.style.top = Math.round(h.top + i - d - 3) + \"px\" : (b.style.top = i + \"px\", f = h.top - 3) : !isNaN(c.maxHeight) && c.maxHeight < d && (f = c.maxHeight), f && (b.style.overflow = \"scroll\", b.style.overflowX = \"hidden\", b.style.height = f + \"px\");\n  },\n  useHtmlDataSource: function useHtmlDataSource(a, b) {\n    var c,\n        d,\n        e = [],\n        f = a.find(\"option\");\n\n    for (c = 0; c < f.length; c++) {\n      d = {}, d[b.valueField] = f[c].value, d[b.textField] = f[c].innerHTML, d[b.selectedField] = a[0].value === f[c].value, e.push(d);\n    }\n\n    b.dataSource = e;\n  },\n  filter: function filter(a) {\n    var b,\n        c,\n        d = a.data();\n\n    if (d.dataSource) {\n      if (\"string\" == typeof d.dataSource[0]) for (b = 0; b < d.dataSource.length; b++) {\n        c = {}, c[d.valueField] = d.dataSource[b], c[d.textField] = d.dataSource[b], d.dataSource[b] = c;\n      }\n    } else d.dataSource = [];\n\n    return d.dataSource;\n  },\n  render: function render(a, b) {\n    var c = [],\n        d = a.data(),\n        e = a.parent(),\n        f = $(\"body\").children('[role=\"list\"][guid=\"' + a.attr(\"data-guid\") + '\"]'),\n        g = e.children('[role=\"presenter\"]'),\n        h = (g.children('[role=\"expander\"]'), g.children('[role=\"display\"]'));\n    if (a.data(\"records\", b), a.empty(), f.empty(), b && b.length) if ($.each(b, function () {\n      var b,\n          e = this[d.valueField],\n          g = this[d.textField],\n          h = this[d.selectedField] && \"true\" === this[d.selectedField].toString().toLowerCase();\n      b = $('<li value=\"' + e + '\"><div data-role=\"wrapper\"><span data-role=\"display\">' + g + \"</span></div></li>\"), b.addClass(d.style.item), b.on(\"click\", function (b) {\n        gj.dropdown.methods.select(a, e);\n      }), f.append(b), a.append('<option value=\"' + e + '\">' + g + \"</option>\"), h && c.push(e);\n    }), 0 === c.length) a.prepend('<option value=\"\"></option>'), a[0].selectedIndex = 0, d.placeholder && (h[0].innerHTML = '<span class=\"placeholder\">' + d.placeholder + \"</span>\");else for (i = 0; i < c.length; i++) {\n      gj.dropdown.methods.select(a, c[i]);\n    }\n    return d.width && (e.css(\"width\", d.width), g.css(\"width\", d.width)), d.fontSize && f.children(\"li\").css(\"font-size\", d.fontSize), gj.dropdown.events.dataBound(a), a;\n  },\n  open: function open(a, b) {\n    var c = a.data(),\n        d = a.parent().find('[role=\"expander\"]'),\n        e = a.parent().find('[role=\"presenter\"]'),\n        f = gj.core.getScrollParent(a[0]);\n    b.css(\"width\", gj.core.width(e[0])), b.show(), gj.dropdown.methods.setListPosition(e[0], b[0], c), d.html(c.icons.dropup), f && (c.parentScrollHandler = function () {\n      gj.dropdown.methods.setListPosition(e[0], b[0], c);\n    }, gj.dropdown.methods.addParentsScrollListener(f, c.parentScrollHandler));\n  },\n  close: function close(a, b) {\n    var c = a.data(),\n        d = a.parent().find('[role=\"expander\"]'),\n        e = gj.core.getScrollParent(a[0]);\n    d.html(c.icons.dropdown), e && c.parentScrollHandler && gj.dropdown.methods.removeParentsScrollListener(e, c.parentScrollHandler), b.hide();\n  },\n  addParentsScrollListener: function addParentsScrollListener(a, b) {\n    var c = gj.core.getScrollParent(a.parentNode);\n    a.addEventListener(\"scroll\", b), c && gj.dropdown.methods.addParentsScrollListener(c, b);\n  },\n  removeParentsScrollListener: function removeParentsScrollListener(a, b) {\n    var c = gj.core.getScrollParent(a.parentNode);\n    a.removeEventListener(\"scroll\", b), c && gj.dropdown.methods.removeParentsScrollListener(c, b);\n  },\n  select: function select(a, b) {\n    var c = a.data(),\n        d = $(\"body\").children('[role=\"list\"][guid=\"' + a.attr(\"data-guid\") + '\"]'),\n        e = d.children('li[value=\"' + b + '\"]'),\n        f = a.next('[role=\"presenter\"]').find('[role=\"display\"]'),\n        g = gj.dropdown.methods.getRecordByValue(a, b);\n    return d.children(\"li\").removeClass(c.style.active), g ? (e.addClass(c.style.active), a[0].value = b, f[0].innerHTML = g[c.textField]) : (c.placeholder && (f[0].innerHTML = '<span class=\"placeholder\">' + c.placeholder + \"</span>\"), a[0].value = \"\"), gj.dropdown.events.change(a), gj.dropdown.methods.close(a, d), a;\n  },\n  getRecordByValue: function getRecordByValue(a, b) {\n    var c,\n        d = a.data(),\n        e = void 0;\n\n    for (c = 0; c < d.records.length; c++) {\n      if (d.records[c][d.valueField] === b) {\n        e = d.records[c];\n        break;\n      }\n    }\n\n    return e;\n  },\n  value: function value(a, b) {\n    return void 0 === b ? a.val() : (gj.dropdown.methods.select(a, b), a);\n  },\n  destroy: function destroy(a) {\n    var b = a.data(),\n        c = a.parent('div[role=\"wrapper\"]');\n    return b && (a.xhr && a.xhr.abort(), a.off(), a.removeData(), a.removeAttr(\"data-type\").removeAttr(\"data-guid\").removeAttr(\"data-dropdown\"), a.removeClass(), c.length > 0 && (c.children('[role=\"presenter\"]').remove(), c.children('[role=\"list\"]').remove(), a.unwrap()), a.show()), a;\n  }\n}, gj.dropdown.events = {\n  change: function change(a) {\n    return a.triggerHandler(\"change\");\n  },\n  dataBound: function dataBound(a) {\n    return a.triggerHandler(\"dataBound\");\n  }\n}, gj.dropdown.widget = function (a, b) {\n  var c = this,\n      d = gj.dropdown.methods;\n  return c.value = function (a) {\n    return d.value(this, a);\n  }, c.enable = function () {\n    return d.enable(this);\n  }, c.disable = function () {\n    return d.disable(this);\n  }, c.destroy = function () {\n    return d.destroy(this);\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-dropdown\") && d.init.call(a, b), a;\n}, gj.dropdown.widget.prototype = new gj.widget(), gj.dropdown.widget.constructor = gj.dropdown.widget, gj.dropdown.widget.prototype.getHTMLConfig = gj.dropdown.methods.getHTMLConfig, function (a) {\n  a.fn.dropdown = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.dropdown.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.dropdown.widget(this, a);\n    }\n  };\n}(jQuery), gj.datepicker = {\n  plugins: {}\n}, gj.datepicker.config = {\n  base: {\n    showOtherMonths: !1,\n    selectOtherMonths: !0,\n    width: void 0,\n    minDate: void 0,\n    maxDate: void 0,\n    format: \"mm/dd/yyyy\",\n    uiLibrary: \"materialdesign\",\n    iconsLibrary: \"materialicons\",\n    value: void 0,\n    weekStartDay: 0,\n    disableDates: void 0,\n    disableDaysOfWeek: void 0,\n    calendarWeeks: !1,\n    keyboardNavigation: !0,\n    locale: \"en-us\",\n    icons: {\n      rightIcon: '<i class=\"gj-icon\">event</i>',\n      previousMonth: '<i class=\"gj-icon chevron-left\"></i>',\n      nextMonth: '<i class=\"gj-icon chevron-right\"></i>'\n    },\n    fontSize: void 0,\n    size: \"default\",\n    modal: !1,\n    header: !1,\n    footer: !1,\n    showOnFocus: !0,\n    showRightIcon: !0,\n    style: {\n      modal: \"gj-modal\",\n      wrapper: \"gj-datepicker gj-datepicker-md gj-unselectable\",\n      input: \"gj-textbox-md\",\n      calendar: \"gj-picker gj-picker-md datepicker gj-unselectable\",\n      footer: \"\",\n      button: \"gj-button-md\"\n    }\n  },\n  bootstrap: {\n    style: {\n      wrapper: \"gj-datepicker gj-datepicker-bootstrap gj-unselectable input-group\",\n      input: \"form-control\",\n      calendar: \"gj-picker gj-picker-bootstrap datepicker gj-unselectable\",\n      footer: \"modal-footer\",\n      button: \"btn btn-default\"\n    },\n    iconsLibrary: \"glyphicons\",\n    showOtherMonths: !0\n  },\n  bootstrap4: {\n    style: {\n      wrapper: \"gj-datepicker gj-datepicker-bootstrap gj-unselectable input-group\",\n      input: \"form-control\",\n      calendar: \"gj-picker gj-picker-bootstrap datepicker gj-unselectable\",\n      footer: \"modal-footer\",\n      button: \"btn btn-default\"\n    },\n    showOtherMonths: !0\n  },\n  fontawesome: {\n    icons: {\n      rightIcon: '<i class=\"fa fa-calendar\" aria-hidden=\"true\"></i>',\n      previousMonth: '<i class=\"fa fa-chevron-left\" aria-hidden=\"true\"></i>',\n      nextMonth: '<i class=\"fa fa-chevron-right\" aria-hidden=\"true\"></i>'\n    }\n  },\n  glyphicons: {\n    icons: {\n      rightIcon: '<span class=\"glyphicon glyphicon-calendar\"></span>',\n      previousMonth: '<span class=\"glyphicon glyphicon-chevron-left\"></span>',\n      nextMonth: '<span class=\"glyphicon glyphicon-chevron-right\"></span>'\n    }\n  }\n}, gj.datepicker.methods = {\n  init: function init(a) {\n    return gj.widget.prototype.init.call(this, a, \"datepicker\"), this.attr(\"data-datepicker\", \"true\"), gj.datepicker.methods.initialize(this, this.data()), this;\n  },\n  initialize: function initialize(a, b) {\n    var c,\n        d,\n        e = a.parent('div[role=\"wrapper\"]');\n    0 === e.length ? (e = $('<div role=\"wrapper\" />').addClass(b.style.wrapper), a.wrap(e)) : e.addClass(b.style.wrapper), e = a.parent('div[role=\"wrapper\"]'), b.width && e.css(\"width\", b.width), a.val(b.value).addClass(b.style.input).attr(\"role\", \"input\"), b.fontSize && a.css(\"font-size\", b.fontSize), \"bootstrap\" === b.uiLibrary || \"bootstrap4\" === b.uiLibrary ? \"small\" === b.size ? (e.addClass(\"input-group-sm\"), a.addClass(\"form-control-sm\")) : \"large\" === b.size && (e.addClass(\"input-group-lg\"), a.addClass(\"form-control-lg\")) : \"small\" === b.size ? e.addClass(\"small\") : \"large\" === b.size && e.addClass(\"large\"), b.showRightIcon && (d = \"bootstrap\" === b.uiLibrary ? $('<span class=\"input-group-addon\">' + b.icons.rightIcon + \"</span>\") : \"bootstrap4\" === b.uiLibrary ? $('<span class=\"input-group-append\"><button class=\"btn btn-outline-secondary border-left-0\" type=\"button\">' + b.icons.rightIcon + \"</button></span>\") : $(b.icons.rightIcon), d.attr(\"role\", \"right-icon\"), d.on(\"click\", function (c) {\n      $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]').is(\":visible\") ? gj.datepicker.methods.close(a) : gj.datepicker.methods.open(a, b);\n    }), e.append(d)), b.showOnFocus && a.on(\"focus\", function () {\n      gj.datepicker.methods.open(a, b);\n    }), c = gj.datepicker.methods.createCalendar(a, b), !0 !== b.footer && (a.on(\"blur\", function () {\n      a.timeout = setTimeout(function () {\n        gj.datepicker.methods.close(a);\n      }, 500);\n    }), c.mousedown(function () {\n      return clearTimeout(a.timeout), document.activeElement !== a[0] && a.focus(), !1;\n    }), c.on(\"click\", function () {\n      clearTimeout(a.timeout), document.activeElement !== a[0] && a.focus();\n    })), b.keyboardNavigation && $(document).on(\"keydown\", gj.datepicker.methods.createKeyDownHandler(a, c, b));\n  },\n  createCalendar: function createCalendar(a, b) {\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h = $('<div role=\"calendar\" type=\"month\"/>').addClass(b.style.calendar).attr(\"guid\", a.attr(\"data-guid\"));\n    return b.fontSize && h.css(\"font-size\", b.fontSize), c = gj.core.parseDate(b.value, b.format, b.locale), !c || isNaN(c.getTime()) ? c = new Date() : a.attr(\"day\", c.getFullYear() + \"-\" + c.getMonth() + \"-\" + c.getDate()), h.attr(\"month\", c.getMonth()), h.attr(\"year\", c.getFullYear()), gj.datepicker.methods.renderHeader(a, h, b, c), d = $('<div role=\"body\" />'), h.append(d), b.footer && (e = $('<div role=\"footer\" class=\"' + b.style.footer + '\" />'), f = $('<button class=\"' + b.style.button + '\">' + gj.core.messages[b.locale].cancel + \"</button>\"), f.on(\"click\", function () {\n      a.close();\n    }), e.append(f), g = $('<button class=\"' + b.style.button + '\">' + gj.core.messages[b.locale].ok + \"</button>\"), g.on(\"click\", function () {\n      var c,\n          d,\n          e = h.attr(\"selectedDay\");\n      e ? (d = e.split(\"-\"), c = new Date(d[0], d[1], d[2], h.attr(\"hour\") || 0, h.attr(\"minute\") || 0), gj.datepicker.methods.change(a, h, b, c)) : a.close();\n    }), e.append(g), h.append(e)), h.hide(), $(\"body\").append(h), b.modal && (h.wrapAll('<div role=\"modal\" class=\"' + b.style.modal + '\"/>'), gj.core.center(h)), h;\n  },\n  renderHeader: function renderHeader(a, b, c, d) {\n    var e, f, g;\n    c.header && (e = $('<div role=\"header\" />'), g = $('<div role=\"year\" />').on(\"click\", function () {\n      gj.datepicker.methods.renderDecade(a, b, c), g.addClass(\"selected\"), f.removeClass(\"selected\");\n    }), g.html(gj.core.formatDate(d, \"yyyy\", c.locale)), e.append(g), f = $('<div role=\"date\" class=\"selected\" />').on(\"click\", function () {\n      gj.datepicker.methods.renderMonth(a, b, c), f.addClass(\"selected\"), g.removeClass(\"selected\");\n    }), f.html(gj.core.formatDate(d, \"ddd, mmm dd\", c.locale)), e.append(f), b.append(e));\n  },\n  updateHeader: function updateHeader(a, b, c) {\n    a.find('[role=\"header\"] [role=\"year\"]').removeClass(\"selected\").html(gj.core.formatDate(c, \"yyyy\", b.locale)), a.find('[role=\"header\"] [role=\"date\"]').addClass(\"selected\").html(gj.core.formatDate(c, \"ddd, mmm dd\", b.locale)), a.find('[role=\"header\"] [role=\"hour\"]').removeClass(\"selected\").html(gj.core.formatDate(c, \"HH\", b.locale)), a.find('[role=\"header\"] [role=\"minute\"]').removeClass(\"selected\").html(gj.core.formatDate(c, \"MM\", b.locale));\n  },\n  createNavigation: function createNavigation(a, b, c, d) {\n    var e,\n        f,\n        g = $(\"<thead/>\");\n\n    for (f = $('<div role=\"navigator\" />'), f.append($(\"<div>\" + d.icons.previousMonth + \"</div>\").on(\"click\", gj.datepicker.methods.prev(a, d))), f.append($('<div role=\"period\"></div>').on(\"click\", gj.datepicker.methods.changePeriod(a, d))), f.append($(\"<div>\" + d.icons.nextMonth + \"</div>\").on(\"click\", gj.datepicker.methods.next(a, d))), b.append(f), e = $('<tr role=\"week-days\" />'), d.calendarWeeks && e.append(\"<th><div>&nbsp;</div></th>\"), i = d.weekStartDay; i < gj.core.messages[d.locale].weekDaysMin.length; i++) {\n      e.append(\"<th><div>\" + gj.core.messages[d.locale].weekDaysMin[i] + \"</div></th>\");\n    }\n\n    for (i = 0; i < d.weekStartDay; i++) {\n      e.append(\"<th><div>\" + gj.core.messages[d.locale].weekDaysMin[i] + \"</div></th>\");\n    }\n\n    g.append(e), c.append(g);\n  },\n  renderMonth: function renderMonth(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s = b.children('[role=\"body\"]'),\n        t = $(\"<table/>\"),\n        u = $(\"<tbody/>\"),\n        v = gj.core.messages[c.locale].titleFormat;\n\n    for (s.off().empty(), gj.datepicker.methods.createNavigation(a, s, t, c), g = parseInt(b.attr(\"month\"), 10), h = parseInt(b.attr(\"year\"), 10), b.attr(\"type\", \"month\"), v = v.replace(\"mmmm\", gj.core.messages[c.locale].monthNames[g]).replace(\"yyyy\", h), b.find('div[role=\"period\"]').text(v), i = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31), h % 4 == 0 && 1900 != h && (i[1] = 29), j = i[g], k = (new Date(h, g, 1).getDay() + 7 - c.weekStartDay) % 7, d = 0, $row = $(\"<tr />\"), n = gj.datepicker.methods.getPrevMonth(g, h), l = 1; l <= k; l++) {\n      f = i[n.month] - k + l, r = new Date(n.year, n.month, f), c.calendarWeeks && 1 === l && $row.append('<td class=\"calendar-week\"><div>' + gj.datepicker.methods.getWeekNumber(r) + \"</div></td>\"), p = $('<td class=\"other-month\" />'), c.showOtherMonths && (q = $(\"<div>\" + f + \"</div>\"), p.append(q), c.selectOtherMonths && gj.datepicker.methods.isSelectable(c, r) ? (p.addClass(\"gj-cursor-pointer\").attr(\"day\", f).attr(\"month\", n.month).attr(\"year\", n.year), q.on(\"click\", gj.datepicker.methods.dayClickHandler(a, b, c, r)), q.on(\"mousedown\", function (a) {\n        a.stopPropagation();\n      })) : p.addClass(\"disabled\")), $row.append(p), d++;\n    }\n\n    for (l > 1 && u.append($row), m = new Date(), l = 1; l <= j; l++) {\n      r = new Date(h, g, l), 0 == d && ($row = $(\"<tr>\"), c.calendarWeeks && $row.append('<td class=\"calendar-week\"><div>' + gj.datepicker.methods.getWeekNumber(r) + \"</div></td>\")), p = $('<td day=\"' + l + '\" month=\"' + g + '\" year=\"' + h + '\" />'), h === m.getFullYear() && g === m.getMonth() && l === m.getDate() ? p.addClass(\"today\") : p.addClass(\"current-month\"), q = $(\"<div>\" + l + \"</div>\"), gj.datepicker.methods.isSelectable(c, r) ? (p.addClass(\"gj-cursor-pointer\"), q.on(\"click\", gj.datepicker.methods.dayClickHandler(a, b, c, r)), q.on(\"mousedown\", function (a) {\n        a.stopPropagation();\n      })) : p.addClass(\"disabled\"), p.append(q), $row.append(p), 7 == ++d && (u.append($row), d = 0);\n    }\n\n    for (o = gj.datepicker.methods.getNextMonth(g, h), l = 1; 0 != d; l++) {\n      r = new Date(o.year, o.month, l), p = $('<td class=\"other-month\" />'), c.showOtherMonths && (q = $(\"<div>\" + l + \"</div>\"), c.selectOtherMonths && gj.datepicker.methods.isSelectable(c, r) ? (p.addClass(\"gj-cursor-pointer\").attr(\"day\", l).attr(\"month\", o.month).attr(\"year\", o.year), q.on(\"click\", gj.datepicker.methods.dayClickHandler(a, b, c, r)), q.on(\"mousedown\", function (a) {\n        a.stopPropagation();\n      })) : p.addClass(\"disabled\"), p.append(q)), $row.append(p), 7 == ++d && (u.append($row), d = 0);\n    }\n\n    t.append(u), s.append(t), b.attr(\"selectedDay\") && (e = b.attr(\"selectedDay\").split(\"-\"), r = new Date(e[0], e[1], e[2], b.attr(\"hour\") || 0, b.attr(\"minute\") || 0), b.find('tbody td[day=\"' + e[2] + '\"][month=\"' + e[1] + '\"]').addClass(\"selected\"), gj.datepicker.methods.updateHeader(b, c, r));\n  },\n  renderYear: function renderYear(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h = b.find('>[role=\"body\"]>table'),\n        i = h.children(\"tbody\");\n\n    for (h.children(\"thead\").hide(), d = parseInt(b.attr(\"year\"), 10), b.attr(\"type\", \"year\"), b.find('div[role=\"period\"]').text(d), i.empty(), e = 0; e < 3; e++) {\n      for ($row = $(\"<tr />\"), f = 4 * e; f <= 4 * e + 3; f++) {\n        g = $(\"<div>\" + gj.core.messages[c.locale].monthShortNames[f] + \"</div>\"), g.on(\"click\", gj.datepicker.methods.selectMonth(a, b, c, f)), $cell = $(\"<td></td>\").append(g), $row.append($cell);\n      }\n\n      i.append($row);\n    }\n  },\n  renderDecade: function renderDecade(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        i = b.find('>[role=\"body\"]>table'),\n        j = i.children(\"tbody\");\n\n    for (i.children(\"thead\").hide(), d = parseInt(b.attr(\"year\"), 10), e = d - d % 10, b.attr(\"type\", \"decade\"), b.find('div[role=\"period\"]').text(e + \" - \" + (e + 9)), j.empty(), f = e - 1; f <= e + 10; f += 4) {\n      for ($row = $(\"<tr />\"), g = f; g <= f + 3; g++) {\n        h = $(\"<div>\" + g + \"</div>\"), h.on(\"click\", gj.datepicker.methods.selectYear(a, b, c, g)), $cell = $(\"<td></td>\").append(h), $row.append($cell);\n      }\n\n      j.append($row);\n    }\n  },\n  renderCentury: function renderCentury(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        i = b.find('>[role=\"body\"]>table'),\n        j = i.children(\"tbody\");\n\n    for (i.children(\"thead\").hide(), d = parseInt(b.attr(\"year\"), 10), e = d - d % 100, b.attr(\"type\", \"century\"), b.find('div[role=\"period\"]').text(e + \" - \" + (e + 99)), j.empty(), f = e - 10; f < e + 100; f += 40) {\n      for ($row = $(\"<tr />\"), g = f; g <= f + 30; g += 10) {\n        h = $(\"<div>\" + g + \"</div>\"), h.on(\"click\", gj.datepicker.methods.selectDecade(a, b, c, g)), $cell = $(\"<td></td>\").append(h), $row.append($cell);\n      }\n\n      j.append($row);\n    }\n  },\n  getWeekNumber: function getWeekNumber(a) {\n    var b = new Date(a.valueOf());\n    b.setDate(b.getDate() + 6), b = new Date(Date.UTC(b.getFullYear(), b.getMonth(), b.getDate())), b.setUTCDate(b.getUTCDate() + 4 - (b.getUTCDay() || 7));\n    var c = new Date(Date.UTC(b.getUTCFullYear(), 0, 1));\n    return Math.ceil(((b - c) / 864e5 + 1) / 7);\n  },\n  getMinDate: function getMinDate(a) {\n    var b;\n    return a.minDate && (\"string\" == typeof a.minDate ? b = gj.core.parseDate(a.minDate, a.format, a.locale) : \"function\" == typeof a.minDate ? \"string\" == typeof (b = a.minDate()) && (b = gj.core.parseDate(b, a.format, a.locale)) : \"function\" == typeof a.minDate.getMonth && (b = a.minDate)), b;\n  },\n  getMaxDate: function getMaxDate(a) {\n    var b;\n    return a.maxDate && (\"string\" == typeof a.maxDate ? b = gj.core.parseDate(a.maxDate, a.format, a.locale) : \"function\" == typeof a.maxDate ? \"string\" == typeof (b = a.maxDate()) && (b = gj.core.parseDate(b, a.format, a.locale)) : \"function\" == typeof a.maxDate.getMonth && (b = a.maxDate)), b;\n  },\n  isSelectable: function isSelectable(a, b) {\n    var c,\n        d = !0,\n        e = gj.datepicker.methods.getMinDate(a),\n        f = gj.datepicker.methods.getMaxDate(a);\n\n    if (e && b < e ? d = !1 : f && b > f && (d = !1), d) {\n      if (a.disableDates) if ($.isArray(a.disableDates)) for (c = 0; c < a.disableDates.length; c++) {\n        a.disableDates[c] instanceof Date && a.disableDates[c].getTime() === b.getTime() ? d = !1 : \"string\" == typeof a.disableDates[c] && gj.core.parseDate(a.disableDates[c], a.format, a.locale).getTime() === b.getTime() && (d = !1);\n      } else a.disableDates instanceof Function && (d = a.disableDates(b));\n      $.isArray(a.disableDaysOfWeek) && a.disableDaysOfWeek.indexOf(b.getDay()) > -1 && (d = !1);\n    }\n\n    return d;\n  },\n  getPrevMonth: function getPrevMonth(a, b) {\n    return date = new Date(b, a, 1), date.setMonth(date.getMonth() - 1), {\n      month: date.getMonth(),\n      year: date.getFullYear()\n    };\n  },\n  getNextMonth: function getNextMonth(a, b) {\n    return date = new Date(b, a, 1), date.setMonth(date.getMonth() + 1), {\n      month: date.getMonth(),\n      year: date.getFullYear()\n    };\n  },\n  prev: function prev(a, b) {\n    return function () {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n\n      switch (e = parseInt(h.attr(\"year\"), 10), h.attr(\"type\")) {\n        case \"month\":\n          d = parseInt(h.attr(\"month\"), 10), c = gj.datepicker.methods.getPrevMonth(d, e), h.attr(\"month\", c.month), h.attr(\"year\", c.year), gj.datepicker.methods.renderMonth(a, h, b);\n          break;\n\n        case \"year\":\n          h.attr(\"year\", e - 1), gj.datepicker.methods.renderYear(a, h, b);\n          break;\n\n        case \"decade\":\n          f = e - e % 10, h.attr(\"year\", f - 10), gj.datepicker.methods.renderDecade(a, h, b);\n          break;\n\n        case \"century\":\n          g = e - e % 100, h.attr(\"year\", g - 100), gj.datepicker.methods.renderCentury(a, h, b);\n      }\n    };\n  },\n  next: function next(a, b) {\n    return function () {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n\n      switch (e = parseInt(h.attr(\"year\"), 10), h.attr(\"type\")) {\n        case \"month\":\n          d = parseInt(h.attr(\"month\"), 10), c = gj.datepicker.methods.getNextMonth(d, e), h.attr(\"month\", c.month), h.attr(\"year\", c.year), gj.datepicker.methods.renderMonth(a, h, b);\n          break;\n\n        case \"year\":\n          h.attr(\"year\", e + 1), gj.datepicker.methods.renderYear(a, h, b);\n          break;\n\n        case \"decade\":\n          f = e - e % 10, h.attr(\"year\", f + 10), gj.datepicker.methods.renderDecade(a, h, b);\n          break;\n\n        case \"century\":\n          g = e - e % 100, h.attr(\"year\", g + 100), gj.datepicker.methods.renderCentury(a, h, b);\n      }\n    };\n  },\n  changePeriod: function changePeriod(a, b) {\n    return function (c) {\n      var d = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n\n      switch (d.attr(\"type\")) {\n        case \"month\":\n          gj.datepicker.methods.renderYear(a, d, b);\n          break;\n\n        case \"year\":\n          gj.datepicker.methods.renderDecade(a, d, b);\n          break;\n\n        case \"decade\":\n          gj.datepicker.methods.renderCentury(a, d, b);\n      }\n    };\n  },\n  dayClickHandler: function dayClickHandler(a, b, c, d) {\n    return function (e) {\n      return e && e.stopPropagation(), gj.datepicker.methods.selectDay(a, b, c, d), !0 !== c.footer && !1 !== c.autoClose && gj.datepicker.methods.change(a, b, c, d), a;\n    };\n  },\n  change: function change(a, b, c, d) {\n    var e = (d.getDate(), d.getMonth()),\n        f = d.getFullYear(),\n        g = gj.core.formatDate(d, c.format, c.locale);\n    b.attr(\"month\", e), b.attr(\"year\", f), a.val(g), gj.datepicker.events.change(a), \"none\" !== window.getComputedStyle(b[0]).display && gj.datepicker.methods.close(a);\n  },\n  selectDay: function selectDay(a, b, c, d) {\n    var e = d.getDate(),\n        f = d.getMonth(),\n        g = d.getFullYear();\n    b.attr(\"selectedDay\", g + \"-\" + f + \"-\" + e), b.find(\"tbody td\").removeClass(\"selected\"), b.find('tbody td[day=\"' + e + '\"][month=\"' + f + '\"]').addClass(\"selected\"), gj.datepicker.methods.updateHeader(b, c, d), gj.datepicker.events.select(a, \"day\");\n  },\n  selectMonth: function selectMonth(a, b, c, d) {\n    return function (e) {\n      b.attr(\"month\", d), gj.datepicker.methods.renderMonth(a, b, c), gj.datepicker.events.select(a, \"month\");\n    };\n  },\n  selectYear: function selectYear(a, b, c, d) {\n    return function (e) {\n      b.attr(\"year\", d), gj.datepicker.methods.renderYear(a, b, c), gj.datepicker.events.select(a, \"year\");\n    };\n  },\n  selectDecade: function selectDecade(a, b, c, d) {\n    return function (e) {\n      b.attr(\"year\", d), gj.datepicker.methods.renderDecade(a, b, c), gj.datepicker.events.select(a, \"decade\");\n    };\n  },\n  open: function open(a, b) {\n    var c,\n        d = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n\n    switch (a.val() ? a.value(a.val()) : (c = new Date(), d.attr(\"month\", c.getMonth()), d.attr(\"year\", c.getFullYear())), d.attr(\"type\")) {\n      case \"month\":\n        gj.datepicker.methods.renderMonth(a, d, b);\n        break;\n\n      case \"year\":\n        gj.datepicker.methods.renderYear(a, d, b);\n        break;\n\n      case \"decade\":\n        gj.datepicker.methods.renderDecade(a, d, b);\n        break;\n\n      case \"century\":\n        gj.datepicker.methods.renderCentury(a, d, b);\n    }\n\n    d.show(), d.closest('div[role=\"modal\"]').show(), b.modal ? gj.core.center(d) : (gj.core.setChildPosition(a[0], d[0]), document.activeElement !== a[0] && a.focus()), clearTimeout(a.timeout), gj.datepicker.events.open(a);\n  },\n  close: function close(a) {\n    var b = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n    b.hide(), b.closest('div[role=\"modal\"]').hide(), gj.datepicker.events.close(a);\n  },\n  createKeyDownHandler: function createKeyDownHandler(a, b, c) {\n    return function (d) {\n      var e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          d = d || window.event;\n      \"none\" !== window.getComputedStyle(b[0]).display && (j = gj.datepicker.methods.getActiveCell(b), \"38\" == d.keyCode ? (h = j.index(), i = j.closest(\"tr\").prev(\"tr\").find(\"td:eq(\" + h + \")\"), i.is(\"[day]\") || (gj.datepicker.methods.prev(a, c)(), i = b.find(\"tbody tr\").last().find(\"td:eq(\" + h + \")\"), i.is(\":empty\") && (i = b.find(\"tbody tr\").last().prev().find(\"td:eq(\" + h + \")\"))), i.is(\"[day]\") && (i.addClass(\"focused\"), j.removeClass(\"focused\"))) : \"40\" == d.keyCode ? (h = j.index(), i = j.closest(\"tr\").next(\"tr\").find(\"td:eq(\" + h + \")\"), i.is(\"[day]\") || (gj.datepicker.methods.next(a, c)(), i = b.find(\"tbody tr\").first().find(\"td:eq(\" + h + \")\"), i.is(\"[day]\") || (i = b.find(\"tbody tr:eq(1)\").find(\"td:eq(\" + h + \")\"))), i.is(\"[day]\") && (i.addClass(\"focused\"), j.removeClass(\"focused\"))) : \"37\" == d.keyCode ? (i = j.prev(\"td[day]:not(.disabled)\"), 0 === i.length && (i = j.closest(\"tr\").prev(\"tr\").find(\"td[day]\").last()), 0 === i.length && (gj.datepicker.methods.prev(a, c)(), i = b.find(\"tbody tr\").last().find(\"td[day]\").last()), i.length > 0 && (i.addClass(\"focused\"), j.removeClass(\"focused\"))) : \"39\" == d.keyCode ? (i = j.next(\"[day]:not(.disabled)\"), 0 === i.length && (i = j.closest(\"tr\").next(\"tr\").find(\"td[day]\").first()), 0 === i.length && (gj.datepicker.methods.next(a, c)(), i = b.find(\"tbody tr\").first().find(\"td[day]\").first()), i.length > 0 && (i.addClass(\"focused\"), j.removeClass(\"focused\"))) : \"13\" == d.keyCode ? (g = parseInt(j.attr(\"day\"), 10), e = parseInt(j.attr(\"month\"), 10), f = parseInt(j.attr(\"year\"), 10), gj.datepicker.methods.dayClickHandler(a, b, c, new Date(f, e, g))()) : \"27\" == d.keyCode && a.close());\n    };\n  },\n  getActiveCell: function getActiveCell(a) {\n    var b = a.find(\"td[day].focused\");\n    return 0 === b.length && (b = a.find(\"td[day].selected\"), 0 === b.length && (b = a.find(\"td[day].today\"), 0 === b.length && (b = a.find(\"td[day]:not(.disabled)\").first()))), b;\n  },\n  value: function value(a, b) {\n    var c,\n        d,\n        e = a.data();\n    return void 0 === b ? a.val() : (d = gj.core.parseDate(b, e.format, e.locale), d && d.getTime() ? (c = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]'), gj.datepicker.methods.dayClickHandler(a, c, e, d)()) : a.val(\"\"), a);\n  },\n  destroy: function destroy(a) {\n    var b = a.data(),\n        c = a.parent(),\n        d = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n    return b && (a.off(), d.parent('[role=\"modal\"]').length > 0 && d.unwrap(), d.remove(), a.removeData(), a.removeAttr(\"data-type\").removeAttr(\"data-guid\").removeAttr(\"data-datepicker\"), a.removeClass(), c.children('[role=\"right-icon\"]').remove(), a.unwrap()), a;\n  }\n}, gj.datepicker.events = {\n  change: function change(a) {\n    return a.triggerHandler(\"change\");\n  },\n  select: function select(a, b) {\n    return a.triggerHandler(\"select\", [b]);\n  },\n  open: function open(a) {\n    return a.triggerHandler(\"open\");\n  },\n  close: function close(a) {\n    return a.triggerHandler(\"close\");\n  }\n}, gj.datepicker.widget = function (a, b) {\n  var c = this,\n      d = gj.datepicker.methods;\n  return c.value = function (a) {\n    return d.value(this, a);\n  }, c.destroy = function () {\n    return d.destroy(this);\n  }, c.open = function () {\n    return d.open(this, this.data());\n  }, c.close = function () {\n    return d.close(this);\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-datepicker\") && d.init.call(a, b), a;\n}, gj.datepicker.widget.prototype = new gj.widget(), gj.datepicker.widget.constructor = gj.datepicker.widget, function (a) {\n  a.fn.datepicker = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.datepicker.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.datepicker.widget(this, a);\n    }\n  };\n}(jQuery), gj.timepicker = {\n  plugins: {}\n}, gj.timepicker.config = {\n  base: {\n    width: void 0,\n    modal: !0,\n    header: !0,\n    footer: !0,\n    format: \"HH:MM\",\n    uiLibrary: \"materialdesign\",\n    value: void 0,\n    mode: \"ampm\",\n    locale: \"en-us\",\n    size: \"default\",\n    icons: {\n      rightIcon: '<i class=\"gj-icon clock\" />'\n    },\n    style: {\n      modal: \"gj-modal\",\n      wrapper: \"gj-timepicker gj-timepicker-md gj-unselectable\",\n      input: \"gj-textbox-md\",\n      clock: \"gj-picker gj-picker-md timepicker\",\n      footer: \"\",\n      button: \"gj-button-md\"\n    }\n  },\n  bootstrap: {\n    style: {\n      wrapper: \"gj-timepicker gj-timepicker-bootstrap gj-unselectable input-group\",\n      input: \"form-control\",\n      clock: \"gj-picker gj-picker-bootstrap timepicker\",\n      footer: \"modal-footer\",\n      button: \"btn btn-default\"\n    },\n    iconsLibrary: \"glyphicons\"\n  },\n  bootstrap4: {\n    style: {\n      wrapper: \"gj-timepicker gj-timepicker-bootstrap gj-unselectable input-group\",\n      input: \"form-control border\",\n      clock: \"gj-picker gj-picker-bootstrap timepicker\",\n      footer: \"modal-footer\",\n      button: \"btn btn-default\"\n    }\n  }\n}, gj.timepicker.methods = {\n  init: function init(a) {\n    return gj.picker.widget.prototype.init.call(this, a, \"timepicker\"), this;\n  },\n  initialize: function initialize() {},\n  initMouse: function initMouse(a, b, c, d) {\n    a.off(), a.on(\"mousedown\", gj.timepicker.methods.mouseDownHandler(b, c)), a.on(\"mousemove\", gj.timepicker.methods.mouseMoveHandler(b, c, d)), a.on(\"mouseup\", gj.timepicker.methods.mouseUpHandler(b, c, d));\n  },\n  createPicker: function createPicker(a) {\n    var b,\n        c = a.data(),\n        d = $('<div role=\"picker\" />').addClass(c.style.clock).attr(\"guid\", a.attr(\"data-guid\")),\n        e = $('<div role=\"hour\" />'),\n        f = $('<div role=\"minute\" />'),\n        g = $('<div role=\"header\" />'),\n        h = $('<div role=\"mode\" />'),\n        i = $('<div role=\"body\" />'),\n        j = $('<button class=\"' + c.style.button + '\">' + gj.core.messages[c.locale].ok + \"</button>\"),\n        k = $('<button class=\"' + c.style.button + '\">' + gj.core.messages[c.locale].cancel + \"</button>\"),\n        l = $('<div role=\"footer\" class=\"' + c.style.footer + '\" />');\n    return b = gj.core.parseDate(c.value, c.format, c.locale), !b || isNaN(b.getTime()) ? b = new Date() : a.attr(\"hours\", b.getHours()), gj.timepicker.methods.initMouse(i, a, d, c), c.header && (e.on(\"click\", function () {\n      gj.timepicker.methods.renderHours(a, d, c);\n    }), f.on(\"click\", function () {\n      gj.timepicker.methods.renderMinutes(a, d, c);\n    }), g.append(e).append(\":\").append(f), \"ampm\" === c.mode && (h.append($('<span role=\"am\">' + gj.core.messages[c.locale].am + \"</span>\").on(\"click\", function () {\n      var b = gj.timepicker.methods.getHour(d);\n      d.attr(\"mode\", \"am\"), $(this).addClass(\"selected\"), $(this).parent().children('[role=\"pm\"]').removeClass(\"selected\"), b >= 12 && d.attr(\"hour\", b - 12), c.modal || (clearTimeout(a.timeout), a.focus());\n    })), h.append(\"<br />\"), h.append($('<span role=\"pm\">' + gj.core.messages[c.locale].pm + \"</span>\").on(\"click\", function () {\n      var b = gj.timepicker.methods.getHour(d);\n      d.attr(\"mode\", \"pm\"), $(this).addClass(\"selected\"), $(this).parent().children('[role=\"am\"]').removeClass(\"selected\"), b < 12 && d.attr(\"hour\", b + 12), c.modal || (clearTimeout(a.timeout), a.focus());\n    })), g.append(h)), d.append(g)), d.append(i), c.footer && (k.on(\"click\", function () {\n      a.close();\n    }), l.append(k), j.on(\"click\", gj.timepicker.methods.setTime(a, d)), l.append(j), d.append(l)), d.hide(), $(\"body\").append(d), c.modal && (d.wrapAll('<div role=\"modal\" class=\"' + c.style.modal + '\"/>'), gj.core.center(d)), d;\n  },\n  getHour: function getHour(a) {\n    return parseInt(a.attr(\"hour\"), 10) || 0;\n  },\n  getMinute: function getMinute(a) {\n    return parseInt(a.attr(\"minute\"), 10) || 0;\n  },\n  setTime: function setTime(a, b) {\n    return function () {\n      var c = gj.timepicker.methods.getHour(b),\n          d = gj.timepicker.methods.getMinute(b),\n          e = b.attr(\"mode\"),\n          f = new Date(0, 0, 0, 12 === c && \"am\" === e ? 0 : c, d),\n          g = a.data(),\n          h = gj.core.formatDate(f, g.format, g.locale);\n      a.value(h), a.close();\n    };\n  },\n  getPointerValue: function getPointerValue(a, b, c) {\n    var d,\n        e,\n        f = 256,\n        g = Math.atan2(f / 2 - a, f / 2 - b) / Math.PI * 180;\n\n    switch (g < 0 && (g = 360 + g), c) {\n      case \"ampm\":\n        return d = 12 - Math.round(12 * g / 360), 0 === d ? 12 : d;\n\n      case \"24hr\":\n        return e = Math.sqrt(Math.pow(f / 2 - a, 2) + Math.pow(f / 2 - b, 2)), d = 12 - Math.round(12 * g / 360), 0 === d && (d = 12), e < f / 2 - 32 && (d = 12 === d ? 0 : d + 12), d;\n\n      case \"minutes\":\n        return d = Math.round(60 - 60 * g / 360), 60 === d ? 0 : d;\n    }\n  },\n  updateArrow: function updateArrow(a, b, c, d) {\n    var e,\n        f,\n        g = b.mouseX(a),\n        h = b.mouseY(a),\n        i = window.scrollY || window.pageYOffset || 0,\n        j = window.scrollX || window.pageXOffset || 0;\n    e = a.target.getBoundingClientRect(), \"hours\" == d.dialMode ? (f = gj.timepicker.methods.getPointerValue(g - j - e.left, h - i - e.top, d.mode), c.attr(\"hour\", \"ampm\" === d.mode && \"pm\" === c.attr(\"mode\") && f < 12 ? f + 12 : f)) : \"minutes\" == d.dialMode && (f = gj.timepicker.methods.getPointerValue(g - j - e.left, h - i - e.top, \"minutes\"), c.attr(\"minute\", f)), gj.timepicker.methods.update(b, c, d);\n  },\n  update: function update(a, b, c) {\n    var d, e, f, g, h, i;\n    d = gj.timepicker.methods.getHour(b), e = gj.timepicker.methods.getMinute(b), f = b.find('[role=\"arrow\"]'), \"hours\" == c.dialMode && (0 == d || d > 12) && \"24hr\" === c.mode ? f.css(\"width\", \"calc(50% - 52px)\") : f.css(\"width\", \"calc(50% - 20px)\"), \"hours\" == c.dialMode ? f.css(\"transform\", \"rotate(\" + (30 * d - 90).toString() + \"deg)\") : f.css(\"transform\", \"rotate(\" + (6 * e - 90).toString() + \"deg)\"), f.show(), g = \"ampm\" === c.mode && d > 12 ? d - 12 : 0 == d ? 12 : d, i = b.find('[role=\"body\"] span'), i.removeClass(\"selected\"), i.filter(function (a) {\n      return \"hours\" == c.dialMode ? parseInt($(this).text(), 10) == g : parseInt($(this).text(), 10) == e;\n    }).addClass(\"selected\"), c.header && (h = b.find('[role=\"header\"]'), h.find('[role=\"hour\"]').text(g), h.find('[role=\"minute\"]').text(gj.core.pad(e)), \"ampm\" === c.mode && (d >= 12 ? (h.find('[role=\"pm\"]').addClass(\"selected\"), h.find('[role=\"am\"]').removeClass(\"selected\")) : (h.find('[role=\"am\"]').addClass(\"selected\"), h.find('[role=\"pm\"]').removeClass(\"selected\"))));\n  },\n  mouseDownHandler: function mouseDownHandler(a, b) {\n    return function (b) {\n      a.mouseMove = !0;\n    };\n  },\n  mouseMoveHandler: function mouseMoveHandler(a, b, c) {\n    return function (d) {\n      a.mouseMove && gj.timepicker.methods.updateArrow(d, a, b, c);\n    };\n  },\n  mouseUpHandler: function mouseUpHandler(a, b, c) {\n    return function (d) {\n      gj.timepicker.methods.updateArrow(d, a, b, c), a.mouseMove = !1, c.modal || (clearTimeout(a.timeout), a.focus()), \"hours\" == c.dialMode ? setTimeout(function () {\n        gj.timepicker.events.select(a, \"hour\"), gj.timepicker.methods.renderMinutes(a, b, c);\n      }, 1e3) : \"minutes\" == c.dialMode && (!0 !== c.footer && !1 !== c.autoClose && gj.timepicker.methods.setTime(a, b)(), gj.timepicker.events.select(a, \"minute\"));\n    };\n  },\n  renderHours: function renderHours(a, b, c) {\n    var d,\n        e = b.find('[role=\"body\"]');\n    clearTimeout(a.timeout), e.empty(), d = $('<div role=\"dial\"></div>'), d.append('<div role=\"arrow\" style=\"transform: rotate(-90deg); display: none;\"><div class=\"arrow-begin\"></div><div class=\"arrow-end\"></div></div>'), d.append('<span role=\"hour\" style=\"transform: translate(54px, -93.5307px);\">1</span>'), d.append('<span role=\"hour\" style=\"transform: translate(93.5307px, -54px);\">2</span>'), d.append('<span role=\"hour\" style=\"transform: translate(108px, 0px);\">3</span>'), d.append('<span role=\"hour\" style=\"transform: translate(93.5307px, 54px);\">4</span>'), d.append('<span role=\"hour\" style=\"transform: translate(54px, 93.5307px);\">5</span>'), d.append('<span role=\"hour\" style=\"transform: translate(6.61309e-15px, 108px);\">6</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-54px, 93.5307px);\">7</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-93.5307px, 54px);\">8</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-108px, 1.32262e-14px);\">9</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-93.5307px, -54px);\">10</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-54px, -93.5307px);\">11</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-1.98393e-14px, -108px);\">12</span>'), \"24hr\" === c.mode && (d.append('<span role=\"hour\" style=\"transform: translate(38px, -65.8179px);\">13</span>'), d.append('<span role=\"hour\" style=\"transform: translate(65.8179px, -38px);\">14</span>'), d.append('<span role=\"hour\" style=\"transform: translate(76px, 0px);\">15</span>'), d.append('<span role=\"hour\" style=\"transform: translate(65.8179px, 38px);\">16</span>'), d.append('<span role=\"hour\" style=\"transform: translate(38px, 65.8179px);\">17</span>'), d.append('<span role=\"hour\" style=\"transform: translate(4.65366e-15px, 76px);\">18</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-38px, 65.8179px);\">19</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-65.8179px, 38px);\">20</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-76px, 9.30732e-15px);\">21</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-65.8179px, -38px);\">22</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-38px, -65.8179px);\">23</span>'), d.append('<span role=\"hour\" style=\"transform: translate(-1.3961e-14px, -76px);\">00</span>')), e.append(d), b.find('[role=\"header\"] [role=\"hour\"]').addClass(\"selected\"), b.find('[role=\"header\"] [role=\"minute\"]').removeClass(\"selected\"), c.dialMode = \"hours\", gj.timepicker.methods.update(a, b, c);\n  },\n  renderMinutes: function renderMinutes(a, b, c) {\n    var d = b.find('[role=\"body\"]');\n    clearTimeout(a.timeout), d.empty(), $dial = $('<div role=\"dial\"></div>'), $dial.append('<div role=\"arrow\" style=\"transform: rotate(-90deg); display: none;\"><div class=\"arrow-begin\"></div><div class=\"arrow-end\"></div></div>'), $dial.append('<span role=\"hour\" style=\"transform: translate(54px, -93.5307px);\">5</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(93.5307px, -54px);\">10</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(108px, 0px);\">15</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(93.5307px, 54px);\">20</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(54px, 93.5307px);\">25</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(6.61309e-15px, 108px);\">30</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(-54px, 93.5307px);\">35</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(-93.5307px, 54px);\">40</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(-108px, 1.32262e-14px);\">45</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(-93.5307px, -54px);\">50</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(-54px, -93.5307px);\">55</span>'), $dial.append('<span role=\"hour\" style=\"transform: translate(-1.98393e-14px, -108px);\">00</span>'), d.append($dial), b.find('[role=\"header\"] [role=\"hour\"]').removeClass(\"selected\"), b.find('[role=\"header\"] [role=\"minute\"]').addClass(\"selected\"), c.dialMode = \"minutes\", gj.timepicker.methods.update(a, b, c);\n  },\n  open: function open(a) {\n    var b,\n        c,\n        d = a.data(),\n        e = $(\"body\").find('[role=\"picker\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n    return b = a.value() ? gj.core.parseDate(a.value(), d.format, d.locale) : new Date(), c = b.getHours(), \"ampm\" === d.mode && e.attr(\"mode\", c > 12 ? \"pm\" : \"am\"), e.attr(\"hour\", c), e.attr(\"minute\", b.getMinutes()), gj.timepicker.methods.renderHours(a, e, d), gj.picker.widget.prototype.open.call(a, \"timepicker\"), a;\n  },\n  value: function value(a, b) {\n    a.data();\n    return void 0 === b ? a.val() : (a.val(b), gj.timepicker.events.change(a), a);\n  }\n}, gj.timepicker.events = {\n  change: function change(a) {\n    return a.triggerHandler(\"change\");\n  },\n  select: function select(a, b) {\n    return a.triggerHandler(\"select\", [b]);\n  },\n  open: function open(a) {\n    return a.triggerHandler(\"open\");\n  },\n  close: function close(a) {\n    return a.triggerHandler(\"close\");\n  }\n}, gj.timepicker.widget = function (a, b) {\n  var c = this,\n      d = gj.timepicker.methods;\n  return c.mouseMove = !1, c.value = function (a) {\n    return d.value(this, a);\n  }, c.destroy = function () {\n    return gj.picker.widget.prototype.destroy.call(this, \"timepicker\");\n  }, c.open = function () {\n    return gj.timepicker.methods.open(this);\n  }, c.close = function () {\n    return gj.picker.widget.prototype.close.call(this, \"timepicker\");\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-timepicker\") && d.init.call(a, b), a;\n}, gj.timepicker.widget.prototype = new gj.picker.widget(), gj.timepicker.widget.constructor = gj.timepicker.widget, function (a) {\n  a.fn.timepicker = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.timepicker.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.timepicker.widget(this, a);\n    }\n  };\n}(jQuery), gj.datetimepicker = {\n  plugins: {},\n  messages: {\n    \"en-us\": {}\n  }\n}, gj.datetimepicker.config = {\n  base: {\n    datepicker: gj.datepicker.config.base,\n    timepicker: gj.timepicker.config.base,\n    uiLibrary: \"materialdesign\",\n    value: void 0,\n    format: \"HH:MM mm/dd/yyyy\",\n    width: void 0,\n    modal: !1,\n    footer: !1,\n    size: \"default\",\n    locale: \"en-us\",\n    icons: {},\n    style: {\n      calendar: \"gj-picker gj-picker-md datetimepicker gj-unselectable\"\n    }\n  },\n  bootstrap: {\n    style: {\n      calendar: \"gj-picker gj-picker-bootstrap datetimepicker gj-unselectable\"\n    },\n    iconsLibrary: \"glyphicons\"\n  },\n  bootstrap4: {\n    style: {\n      calendar: \"gj-picker gj-picker-bootstrap datetimepicker gj-unselectable\"\n    }\n  }\n}, gj.datetimepicker.methods = {\n  init: function init(a) {\n    return gj.widget.prototype.init.call(this, a, \"datetimepicker\"), this.attr(\"data-datetimepicker\", \"true\"), gj.datetimepicker.methods.initialize(this), this;\n  },\n  getConfig: function getConfig(a, b) {\n    var c = gj.widget.prototype.getConfig.call(this, a, b);\n    return uiLibrary = a.hasOwnProperty(\"uiLibrary\") ? a.uiLibrary : c.uiLibrary, gj.datepicker.config[uiLibrary] && $.extend(!0, c.datepicker, gj.datepicker.config[uiLibrary]), gj.timepicker.config[uiLibrary] && $.extend(!0, c.timepicker, gj.timepicker.config[uiLibrary]), iconsLibrary = a.hasOwnProperty(\"iconsLibrary\") ? a.iconsLibrary : c.iconsLibrary, gj.datepicker.config[iconsLibrary] && $.extend(!0, c.datepicker, gj.datepicker.config[iconsLibrary]), gj.timepicker.config[iconsLibrary] && $.extend(!0, c.timepicker, gj.timepicker.config[iconsLibrary]), c;\n  },\n  initialize: function initialize(a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i,\n        j = a.data();\n    j.datepicker.uiLibrary = j.uiLibrary, j.datepicker.iconsLibrary = j.iconsLibrary, j.datepicker.width = j.width, j.datepicker.format = j.format, j.datepicker.locale = j.locale, j.datepicker.modal = j.modal, j.datepicker.footer = j.footer, j.datepicker.style.calendar = j.style.calendar, j.datepicker.value = j.value, j.datepicker.size = j.size, j.datepicker.autoClose = !1, gj.datepicker.methods.initialize(a, j.datepicker), a.on(\"select\", function (c, d) {\n      var e, f;\n      \"day\" === d ? gj.datetimepicker.methods.createShowHourHandler(a, b, j)() : \"minute\" === d && b.attr(\"selectedDay\") && !0 !== j.footer && (selectedDay = b.attr(\"selectedDay\").split(\"-\"), e = new Date(selectedDay[0], selectedDay[1], selectedDay[2], b.attr(\"hour\") || 0, b.attr(\"minute\") || 0), f = gj.core.formatDate(e, j.format, j.locale), a.val(f), gj.datetimepicker.events.change(a), gj.datetimepicker.methods.close(a));\n    }), a.on(\"open\", function () {\n      var a = b.children('[role=\"header\"]');\n      a.find('[role=\"calendarMode\"]').addClass(\"selected\"), a.find('[role=\"clockMode\"]').removeClass(\"selected\");\n    }), b = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]'), f = j.value ? gj.core.parseDate(j.value, j.format, j.locale) : new Date(), b.attr(\"hour\", f.getHours()), b.attr(\"minute\", f.getMinutes()), j.timepicker.uiLibrary = j.uiLibrary, j.timepicker.iconsLibrary = j.iconsLibrary, j.timepicker.format = j.format, j.timepicker.locale = j.locale, j.timepicker.header = !0, j.timepicker.footer = j.footer, j.timepicker.size = j.size, j.timepicker.mode = \"24hr\", j.timepicker.autoClose = !1, c = $('<div role=\"header\" />'), d = $('<div role=\"date\" class=\"selected\" />'), d.on(\"click\", gj.datetimepicker.methods.createShowDateHandler(a, b, j)), d.html(gj.core.formatDate(new Date(), \"ddd, mmm dd\", j.locale)), c.append(d), g = $('<div role=\"switch\"></div>'), h = $('<i class=\"gj-icon selected\" role=\"calendarMode\">event</i>'), h.on(\"click\", gj.datetimepicker.methods.createShowDateHandler(a, b, j)), g.append(h), e = $('<div role=\"time\" />'), e.append($('<div role=\"hour\" />').on(\"click\", gj.datetimepicker.methods.createShowHourHandler(a, b, j)).html(gj.core.formatDate(new Date(), \"HH\", j.locale))), e.append(\":\"), e.append($('<div role=\"minute\" />').on(\"click\", gj.datetimepicker.methods.createShowMinuteHandler(a, b, j)).html(gj.core.formatDate(new Date(), \"MM\", j.locale))), g.append(e), i = $('<i class=\"gj-icon\" role=\"clockMode\">clock</i>'), i.on(\"click\", gj.datetimepicker.methods.createShowHourHandler(a, b, j)), g.append(i), c.append(g), b.prepend(c);\n  },\n  createShowDateHandler: function createShowDateHandler(a, b, c) {\n    return function (d) {\n      var e = b.children('[role=\"header\"]');\n      e.find('[role=\"calendarMode\"]').addClass(\"selected\"), e.find('[role=\"date\"]').addClass(\"selected\"), e.find('[role=\"clockMode\"]').removeClass(\"selected\"), e.find('[role=\"hour\"]').removeClass(\"selected\"), e.find('[role=\"minute\"]').removeClass(\"selected\"), gj.datepicker.methods.renderMonth(a, b, c.datepicker);\n    };\n  },\n  createShowHourHandler: function createShowHourHandler(a, b, c) {\n    return function () {\n      var d = b.children('[role=\"header\"]');\n      d.find('[role=\"calendarMode\"]').removeClass(\"selected\"), d.find('[role=\"date\"]').removeClass(\"selected\"), d.find('[role=\"clockMode\"]').addClass(\"selected\"), d.find('[role=\"hour\"]').addClass(\"selected\"), d.find('[role=\"minute\"]').removeClass(\"selected\"), gj.timepicker.methods.initMouse(b.children('[role=\"body\"]'), a, b, c.timepicker), gj.timepicker.methods.renderHours(a, b, c.timepicker);\n    };\n  },\n  createShowMinuteHandler: function createShowMinuteHandler(a, b, c) {\n    return function () {\n      var d = b.children('[role=\"header\"]');\n      d.find('[role=\"calendarMode\"]').removeClass(\"selected\"), d.find('[role=\"date\"]').removeClass(\"selected\"), d.find('[role=\"clockMode\"]').addClass(\"selected\"), d.find('[role=\"hour\"]').removeClass(\"selected\"), d.find('[role=\"minute\"]').addClass(\"selected\"), gj.timepicker.methods.initMouse(b.children('[role=\"body\"]'), a, b, c.timepicker), gj.timepicker.methods.renderMinutes(a, b, c.timepicker);\n    };\n  },\n  close: function close(a) {\n    var b = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n    b.hide(), b.closest('div[role=\"modal\"]').hide();\n  },\n  value: function value(a, b) {\n    var c,\n        d,\n        e,\n        f = a.data();\n    return void 0 === b ? a.val() : (d = gj.core.parseDate(b, f.format, f.locale), d ? (c = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]'), gj.datepicker.methods.dayClickHandler(a, c, f, d)(), e = d.getHours(), \"ampm\" === f.mode && c.attr(\"mode\", e > 12 ? \"pm\" : \"am\"), c.attr(\"hour\", e), c.attr(\"minute\", d.getMinutes()), a.val(b)) : a.val(\"\"), a);\n  },\n  destroy: function destroy(a) {\n    var b = a.data(),\n        c = a.parent(),\n        d = $(\"body\").find('[role=\"calendar\"][guid=\"' + a.attr(\"data-guid\") + '\"]');\n    return b && (a.off(), d.parent('[role=\"modal\"]').length > 0 && d.unwrap(), d.remove(), a.removeData(), a.removeAttr(\"data-type\").removeAttr(\"data-guid\").removeAttr(\"data-datetimepicker\"), a.removeClass(), c.children('[role=\"right-icon\"]').remove(), a.unwrap()), a;\n  }\n}, gj.datetimepicker.events = {\n  change: function change(a) {\n    return a.triggerHandler(\"change\");\n  }\n}, gj.datetimepicker.widget = function (a, b) {\n  var c = this,\n      d = gj.datetimepicker.methods;\n  return c.mouseMove = !1, c.value = function (a) {\n    return d.value(this, a);\n  }, c.open = function () {\n    gj.datepicker.methods.open(this, this.data().datepicker);\n  }, c.close = function () {\n    gj.datepicker.methods.close(this);\n  }, c.destroy = function () {\n    return d.destroy(this);\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-datetimepicker\") && d.init.call(a, b), a;\n}, gj.datetimepicker.widget.prototype = new gj.widget(), gj.datetimepicker.widget.constructor = gj.datetimepicker.widget, gj.datetimepicker.widget.prototype.getConfig = gj.datetimepicker.methods.getConfig, function (a) {\n  a.fn.datetimepicker = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.datetimepicker.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.datetimepicker.widget(this, a);\n    }\n  };\n}(jQuery), gj.slider = {\n  plugins: {},\n  messages: {\n    \"en-us\": {}\n  }\n}, gj.slider.config = {\n  base: {\n    min: 0,\n    max: 100,\n    width: void 0,\n    uiLibrary: \"materialdesign\",\n    value: void 0,\n    icons: {},\n    style: {\n      wrapper: \"gj-slider gj-slider-md\",\n      progress: void 0,\n      track: void 0\n    }\n  },\n  bootstrap: {\n    style: {\n      wrapper: \"gj-slider gj-slider-bootstrap gj-slider-bootstrap-3\",\n      progress: \"progress-bar\",\n      track: \"progress\"\n    }\n  },\n  bootstrap4: {\n    style: {\n      wrapper: \"gj-slider gj-slider-bootstrap gj-slider-bootstrap-4\",\n      progress: \"progress-bar\",\n      track: \"progress\"\n    }\n  }\n}, gj.slider.methods = {\n  init: function init(a) {\n    return gj.widget.prototype.init.call(this, a, \"slider\"), this.attr(\"data-slider\", \"true\"), gj.slider.methods.initialize(this, this.data()), this;\n  },\n  initialize: function initialize(a, b) {\n    var c, d, e, f;\n    a[0].style.display = \"none\", \"wrapper\" !== a[0].parentElement.attributes.role ? (c = document.createElement(\"div\"), c.setAttribute(\"role\", \"wrapper\"), a[0].parentNode.insertBefore(c, a[0]), c.appendChild(a[0])) : c = a[0].parentElement, b.width && (c.style.width = b.width + \"px\"), gj.core.addClasses(c, b.style.wrapper), d = a[0].querySelector('[role=\"track\"]'), null == d && (d = document.createElement(\"div\"), d.setAttribute(\"role\", \"track\"), c.appendChild(d)), gj.core.addClasses(d, b.style.track), e = a[0].querySelector('[role=\"handle\"]'), null == e && (e = document.createElement(\"div\"), e.setAttribute(\"role\", \"handle\"), c.appendChild(e)), f = a[0].querySelector('[role=\"progress\"]'), null == f && (f = document.createElement(\"div\"), f.setAttribute(\"role\", \"progress\"), c.appendChild(f)), gj.core.addClasses(f, b.style.progress), b.value || (b.value = b.min), gj.slider.methods.value(a, b, b.value), gj.documentManager.subscribeForEvent(\"mouseup\", a.data(\"guid\"), gj.slider.methods.createMouseUpHandler(a, e, b)), e.addEventListener(\"mousedown\", gj.slider.methods.createMouseDownHandler(e, b)), gj.documentManager.subscribeForEvent(\"mousemove\", a.data(\"guid\"), gj.slider.methods.createMouseMoveHandler(a, d, e, f, b)), e.addEventListener(\"click\", function (a) {\n      a.stopPropagation();\n    }), c.addEventListener(\"click\", gj.slider.methods.createClickHandler(a, d, e, b));\n  },\n  createClickHandler: function createClickHandler(a, b, c, d) {\n    return function (e) {\n      var f, g, h, i, j;\n      \"true\" !== c.getAttribute(\"drag\") && (f = gj.core.position(a[0].parentElement), g = new gj.widget().mouseX(e) - f.left, h = gj.core.width(c) / 2, i = gj.core.width(b) / (d.max - d.min), j = Math.round((g - h) / i) + d.min, gj.slider.methods.value(a, d, j));\n    };\n  },\n  createMouseUpHandler: function createMouseUpHandler(a, b, c) {\n    return function (c) {\n      \"true\" === b.getAttribute(\"drag\") && (b.setAttribute(\"drag\", \"false\"), gj.slider.events.change(a));\n    };\n  },\n  createMouseDownHandler: function createMouseDownHandler(a, b) {\n    return function (b) {\n      a.setAttribute(\"drag\", \"true\");\n    };\n  },\n  createMouseMoveHandler: function createMouseMoveHandler(a, b, c, d, e) {\n    return function (d) {\n      var f, g, h, i, j, k, l;\n      \"true\" === c.getAttribute(\"drag\") && (f = gj.core.position(a[0].parentElement), g = new gj.widget().mouseX(d) - f.left, h = gj.core.width(b), i = gj.core.width(c) / 2, j = h / (e.max - e.min), k = (e.value - e.min) * j, g >= i && g <= h + i && (g > k + j / 2 || g < k - j / 2) && (l = Math.round((g - i) / j) + e.min, gj.slider.methods.value(a, e, l)));\n    };\n  },\n  value: function value(a, b, c) {\n    var d, e, f, g;\n    return void 0 === c ? a[0].value : (a[0].setAttribute(\"value\", c), b.value = c, e = a.parent().children('[role=\"track\"]')[0], d = gj.core.width(e) / (b.max - b.min), f = a.parent().children('[role=\"handle\"]')[0], f.style.left = (c - b.min) * d + \"px\", g = a.parent().children('[role=\"progress\"]')[0], g.style.width = (c - b.min) * d + \"px\", gj.slider.events.slide(a, c), a);\n  },\n  destroy: function destroy(a) {\n    var b = a.data(),\n        c = a.parent();\n    return b && (c.children('[role=\"track\"]').remove(), c.children('[role=\"handle\"]').remove(), c.children('[role=\"progress\"]').remove(), a.unwrap(), a.off(), a.removeData(), a.removeAttr(\"data-type\").removeAttr(\"data-guid\").removeAttr(\"data-slider\"), a.removeClass(), a.show()), a;\n  }\n}, gj.slider.events = {\n  change: function change(a) {\n    return a.triggerHandler(\"change\");\n  },\n  slide: function slide(a, b) {\n    return a.triggerHandler(\"slide\", [b]);\n  }\n}, gj.slider.widget = function (a, b) {\n  var c = this,\n      d = gj.slider.methods;\n  return c.value = function (a) {\n    return d.value(this, this.data(), a);\n  }, c.destroy = function () {\n    return d.destroy(this);\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-slider\") && d.init.call(a, b), a;\n}, gj.slider.widget.prototype = new gj.widget(), gj.slider.widget.constructor = gj.slider.widget, function (a) {\n  a.fn.slider = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.slider.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.slider.widget(this, a);\n    }\n  };\n}(jQuery), gj.colorpicker = {\n  plugins: {},\n  messages: {\n    \"en-us\": {}\n  }\n}, gj.colorpicker.config = {\n  base: {\n    uiLibrary: \"materialdesign\",\n    value: void 0,\n    icons: {\n      rightIcon: '<i class=\"gj-icon\">event</i>'\n    },\n    style: {\n      modal: \"gj-modal\",\n      wrapper: \"gj-colorpicker gj-colorpicker-md gj-unselectable\",\n      input: \"gj-textbox-md\",\n      picker: \"gj-picker gj-picker-md colorpicker gj-unselectable\",\n      footer: \"\",\n      button: \"gj-button-md\"\n    }\n  },\n  bootstrap: {\n    style: {}\n  },\n  bootstrap4: {\n    style: {}\n  }\n}, gj.colorpicker.methods = {\n  init: function init(a) {\n    return gj.picker.widget.prototype.init.call(this, a, \"colorpicker\"), gj.colorpicker.methods.initialize(this), this;\n  },\n  initialize: function initialize(a) {},\n  createPicker: function createPicker(a, b) {\n    var c = $('<div role=\"picker\" />').addClass(b.style.picker).attr(\"guid\", a.attr(\"data-guid\"));\n    return c.html(\"test\"), c.hide(), $(\"body\").append(c), c;\n  },\n  open: function open(a) {\n    return a.val() && a.value(a.val()), gj.picker.widget.prototype.open.call(a, \"colorpicker\");\n  }\n}, gj.colorpicker.events = {\n  change: function change(a) {\n    return a.triggerHandler(\"change\");\n  },\n  select: function select(a) {\n    return a.triggerHandler(\"select\");\n  },\n  open: function open(a) {\n    return a.triggerHandler(\"open\");\n  },\n  close: function close(a) {\n    return a.triggerHandler(\"close\");\n  }\n}, gj.colorpicker.widget = function (a, b) {\n  var c = this,\n      d = gj.colorpicker.methods;\n  return c.value = function (a) {\n    return d.value(this, a);\n  }, c.destroy = function () {\n    return gj.picker.widget.prototype.destroy.call(this, \"colorpicker\");\n  }, c.open = function () {\n    return d.open(this);\n  }, c.close = function () {\n    return gj.picker.widget.prototype.close.call(this, \"colorpicker\");\n  }, $.extend(a, c), \"true\" !== a.attr(\"data-colorpicker\") && d.init.call(a, b), a;\n}, gj.colorpicker.widget.prototype = new gj.picker.widget(), gj.colorpicker.widget.constructor = gj.colorpicker.widget, function (a) {\n  a.fn.colorpicker = function (a) {\n    var b;\n\n    if (this && this.length) {\n      if (\"object\" != _typeof(a) && a) {\n        if (b = new gj.colorpicker.widget(this, null), b[a]) return b[a].apply(this, Array.prototype.slice.call(arguments, 1));\n        throw \"Method \" + a + \" does not exist.\";\n      }\n\n      return new gj.colorpicker.widget(this, a);\n    }\n  };\n}(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/gijgo.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/gijgo.min.js"]();
/******/ 	
/******/ })()
;