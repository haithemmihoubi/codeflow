/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/jquery.barfiller.js":
/*!******************************************!*\
  !*** ./resources/js/jquery.barfiller.js ***!
  \******************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\r\n* File: jquery.barfiller.js\r\n* Version: 1.0.1\r\n* Description: A plugin that fills bars with a percentage you set.\r\n* Author: 9bit Studios\r\n* Copyright 2012, 9bit Studios\r\n* http://www.9bitstudios.com\r\n* Free to use and abuse under the MIT license.\r\n* http://www.opensource.org/licenses/mit-license.php\r\n*/\n(function ($) {\n  $.fn.barfiller = function (options) {\n    var defaults = $.extend({\n      barColor: '#09CC7F',\n      tooltip: true,\n      duration: 1000,\n      animateOnResize: true,\n      symbol: \"%\"\n    }, options);\n    /******************************\r\n    Private Variables\r\n    *******************************/\n\n    var object = $(this);\n    var settings = $.extend(defaults, options);\n    var barWidth = object.width();\n    var fill = object.find('.fill');\n    var toolTip = object.find('.tip');\n    var fillPercentage = fill.attr('data-percentage');\n    var resizeTimeout;\n    var transitionSupport = false;\n    var transitionPrefix;\n    /******************************\r\n    Public Methods\r\n    *******************************/\n\n    var methods = {\n      init: function init() {\n        return this.each(function () {\n          if (methods.getTransitionSupport()) {\n            transitionSupport = true;\n            transitionPrefix = methods.getTransitionPrefix();\n          }\n\n          methods.appendHTML();\n          methods.setEventHandlers();\n          methods.initializeItems();\n        });\n      },\n\n      /******************************\r\n      Append HTML\r\n      *******************************/\n      appendHTML: function appendHTML() {\n        fill.css('background', settings.barColor);\n\n        if (!settings.tooltip) {\n          toolTip.css('display', 'none');\n        }\n\n        toolTip.text(fillPercentage + settings.symbol);\n      },\n\n      /******************************\r\n      Set Event Handlers\r\n      *******************************/\n      setEventHandlers: function setEventHandlers() {\n        if (settings.animateOnResize) {\n          $(window).on(\"resize\", function (event) {\n            clearTimeout(resizeTimeout);\n            resizeTimeout = setTimeout(function () {\n              methods.refill();\n            }, 300);\n          });\n        }\n      },\n\n      /******************************\r\n      Initialize\r\n      *******************************/\n      initializeItems: function initializeItems() {\n        var pctWidth = methods.calculateFill(fillPercentage);\n        object.find('.tipWrap').css({\n          display: 'inline'\n        });\n        if (transitionSupport) methods.transitionFill(pctWidth);else methods.animateFill(pctWidth);\n      },\n      getTransitionSupport: function getTransitionSupport() {\n        var thisBody = document.body || document.documentElement,\n            thisStyle = thisBody.style;\n        var support = thisStyle.transition !== undefined || thisStyle.WebkitTransition !== undefined || thisStyle.MozTransition !== undefined || thisStyle.MsTransition !== undefined || thisStyle.OTransition !== undefined;\n        return support;\n      },\n      getTransitionPrefix: function getTransitionPrefix() {\n        if (/mozilla/.test(navigator.userAgent.toLowerCase()) && !/webkit/.test(navigator.userAgent.toLowerCase())) {\n          return '-moz-transition';\n        }\n\n        if (/webkit/.test(navigator.userAgent.toLowerCase())) {\n          return '-webkit-transition';\n        }\n\n        if (/opera/.test(navigator.userAgent.toLowerCase())) {\n          return '-o-transition';\n        }\n\n        if (/msie/.test(navigator.userAgent.toLowerCase())) {\n          return '-ms-transition';\n        } else {\n          return 'transition';\n        }\n      },\n      getTransition: function getTransition(val, time, type) {\n        var CSSObj;\n\n        if (type === 'width') {\n          CSSObj = {\n            width: val\n          };\n        } else if (type === 'left') {\n          CSSObj = {\n            left: val\n          };\n        }\n\n        time = time / 1000;\n        CSSObj[transitionPrefix] = type + ' ' + time + 's ease-in-out';\n        return CSSObj;\n      },\n      refill: function refill() {\n        fill.css('width', 0);\n        toolTip.css('left', 0);\n        barWidth = object.width();\n        methods.initializeItems();\n      },\n      calculateFill: function calculateFill(percentage) {\n        percentage = percentage * 0.01;\n        var finalWidth = barWidth * percentage;\n        return finalWidth;\n      },\n      transitionFill: function transitionFill(barWidth) {\n        var toolTipOffset = barWidth - toolTip.width();\n        fill.css(methods.getTransition(barWidth, settings.duration, 'width'));\n        toolTip.css(methods.getTransition(toolTipOffset, settings.duration, 'left'));\n      },\n      animateFill: function animateFill(barWidth) {\n        var toolTipOffset = barWidth - toolTip.width();\n        fill.stop().animate({\n          width: '+=' + barWidth\n        }, settings.duration);\n        toolTip.stop().animate({\n          left: '+=' + toolTipOffset\n        }, settings.duration);\n      }\n    };\n\n    if (methods[options]) {\n      // $(\"#element\").pluginName('methodName', 'arg1', 'arg2');\n      return methods[options].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if (_typeof(options) === 'object' || !options) {\n      // $(\"#element\").pluginName({ option: 1, option:2 });\n      return methods.init.apply(this);\n    } else {\n      $.error('Method \"' + method + '\" does not exist in barfiller plugin!');\n    }\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery.barfiller.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/jquery.barfiller.js"]();
/******/ 	
/******/ })()
;