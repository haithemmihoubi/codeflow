/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/jquery.form.js":
/*!*************************************!*\
  !*** ./resources/js/jquery.form.js ***!
  \*************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\r\n * jQuery Form Plugin\r\n * version: 3.32.0-2013.04.09\r\n * @requires jQuery v1.5 or later\r\n * Copyright (c) 2013 M. Alsup\r\n * Examples and documentation at: http://malsup.com/jquery/form/\r\n * Project repository: https://github.com/malsup/form\r\n * Dual licensed under the MIT and GPL licenses.\r\n * https://github.com/malsup/form#copyright-and-license\r\n */\n\n/*global ActiveXObject */\n;\n\n(function ($) {\n  \"use strict\";\n  /*\r\n      Usage Note:\r\n      -----------\r\n      Do not use both ajaxSubmit and ajaxForm on the same form.  These\r\n      functions are mutually exclusive.  Use ajaxSubmit if you want\r\n      to bind your own submit handler to the form.  For example,\r\n  \r\n      $(document).ready(function() {\r\n          $('#myForm').on('submit', function(e) {\r\n              e.preventDefault(); // <-- important\r\n              $(this).ajaxSubmit({\r\n                  target: '#output'\r\n              });\r\n          });\r\n      });\r\n  \r\n      Use ajaxForm when you want the plugin to manage all the event binding\r\n      for you.  For example,\r\n  \r\n      $(document).ready(function() {\r\n          $('#myForm').ajaxForm({\r\n              target: '#output'\r\n          });\r\n      });\r\n  \r\n      You can also use ajaxForm with delegation (requires jQuery v1.7+), so the\r\n      form does not have to exist when you invoke ajaxForm:\r\n  \r\n      $('#myForm').ajaxForm({\r\n          delegation: true,\r\n          target: '#output'\r\n      });\r\n  \r\n      When using ajaxForm, the ajaxSubmit function will be invoked for you\r\n      at the appropriate time.\r\n  */\n\n  /**\r\n   * Feature detection\r\n   */\n\n  var feature = {};\n  feature.fileapi = $(\"<input type='file'/>\").get(0).files !== undefined;\n  feature.formdata = window.FormData !== undefined;\n  var hasProp = !!$.fn.prop; // attr2 uses prop when it can but checks the return type for\n  // an expected string.  this accounts for the case where a form \n  // contains inputs with names like \"action\" or \"method\"; in those\n  // cases \"prop\" returns the element\n\n  $.fn.attr2 = function () {\n    if (!hasProp) return this.attr.apply(this, arguments);\n    var val = this.prop.apply(this, arguments);\n    if (val && val.jquery || typeof val === 'string') return val;\n    return this.attr.apply(this, arguments);\n  };\n  /**\r\n   * ajaxSubmit() provides a mechanism for immediately submitting\r\n   * an HTML form using AJAX.\r\n   */\n\n\n  $.fn.ajaxSubmit = function (options) {\n    /*jshint scripturl:true */\n    // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)\n    if (!this.length) {\n      log('ajaxSubmit: skipping submit process - no element selected');\n      return this;\n    }\n\n    var method,\n        action,\n        url,\n        $form = this;\n\n    if (typeof options == 'function') {\n      options = {\n        success: options\n      };\n    }\n\n    method = this.attr2('method');\n    action = this.attr2('action');\n    url = typeof action === 'string' ? $.trim(action) : '';\n    url = url || window.location.href || '';\n\n    if (url) {\n      // clean url (don't include hash vaue)\n      url = (url.match(/^([^#]+)/) || [])[1];\n    }\n\n    options = $.extend(true, {\n      url: url,\n      success: $.ajaxSettings.success,\n      type: method || 'GET',\n      iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'\n    }, options); // hook for manipulating the form data before it is extracted;\n    // convenient for use with rich editors like tinyMCE or FCKEditor\n\n    var veto = {};\n    this.trigger('form-pre-serialize', [this, options, veto]);\n\n    if (veto.veto) {\n      log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');\n      return this;\n    } // provide opportunity to alter form data before it is serialized\n\n\n    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {\n      log('ajaxSubmit: submit aborted via beforeSerialize callback');\n      return this;\n    }\n\n    var traditional = options.traditional;\n\n    if (traditional === undefined) {\n      traditional = $.ajaxSettings.traditional;\n    }\n\n    var elements = [];\n    var qx,\n        a = this.formToArray(options.semantic, elements);\n\n    if (options.data) {\n      options.extraData = options.data;\n      qx = $.param(options.data, traditional);\n    } // give pre-submit callback an opportunity to abort the submit\n\n\n    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {\n      log('ajaxSubmit: submit aborted via beforeSubmit callback');\n      return this;\n    } // fire vetoable 'validate' event\n\n\n    this.trigger('form-submit-validate', [a, this, options, veto]);\n\n    if (veto.veto) {\n      log('ajaxSubmit: submit vetoed via form-submit-validate trigger');\n      return this;\n    }\n\n    var q = $.param(a, traditional);\n\n    if (qx) {\n      q = q ? q + '&' + qx : qx;\n    }\n\n    if (options.type.toUpperCase() == 'GET') {\n      options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;\n      options.data = null; // data is null for 'get'\n    } else {\n      options.data = q; // data is the query string for 'post'\n    }\n\n    var callbacks = [];\n\n    if (options.resetForm) {\n      callbacks.push(function () {\n        $form.resetForm();\n      });\n    }\n\n    if (options.clearForm) {\n      callbacks.push(function () {\n        $form.clearForm(options.includeHidden);\n      });\n    } // perform a load on the target only if dataType is not provided\n\n\n    if (!options.dataType && options.target) {\n      var oldSuccess = options.success || function () {};\n\n      callbacks.push(function (data) {\n        var fn = options.replaceTarget ? 'replaceWith' : 'html';\n        $(options.target)[fn](data).each(oldSuccess, arguments);\n      });\n    } else if (options.success) {\n      callbacks.push(options.success);\n    }\n\n    options.success = function (data, status, xhr) {\n      // jQuery 1.4+ passes xhr as 3rd arg\n      var context = options.context || this; // jQuery 1.4+ supports scope context\n\n      for (var i = 0, max = callbacks.length; i < max; i++) {\n        callbacks[i].apply(context, [data, status, xhr || $form, $form]);\n      }\n    }; // are there files to upload?\n    // [value] (issue #113), also see comment:\n    // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219\n\n\n    var fileInputs = $('input[type=file]:enabled[value!=\"\"]', this);\n    var hasFileInputs = fileInputs.length > 0;\n    var mp = 'multipart/form-data';\n    var multipart = $form.attr('enctype') == mp || $form.attr('encoding') == mp;\n    var fileAPI = feature.fileapi && feature.formdata;\n    log(\"fileAPI :\" + fileAPI);\n    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;\n    var jqxhr; // options.iframe allows user to force iframe mode\n    // 06-NOV-09: now defaulting to iframe mode if file input is detected\n\n    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {\n      // hack to fix Safari hang (thanks to Tim Molendijk for this)\n      // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d\n      if (options.closeKeepAlive) {\n        $.get(options.closeKeepAlive, function () {\n          jqxhr = fileUploadIframe(a);\n        });\n      } else {\n        jqxhr = fileUploadIframe(a);\n      }\n    } else if ((hasFileInputs || multipart) && fileAPI) {\n      jqxhr = fileUploadXhr(a);\n    } else {\n      jqxhr = $.ajax(options);\n    }\n\n    $form.removeData('jqxhr').data('jqxhr', jqxhr); // clear element array\n\n    for (var k = 0; k < elements.length; k++) {\n      elements[k] = null;\n    } // fire 'notify' event\n\n\n    this.trigger('form-submit-notify', [this, options]);\n    return this; // utility fn for deep serialization\n\n    function deepSerialize(extraData) {\n      var serialized = $.param(extraData).split('&');\n      var len = serialized.length;\n      var result = [];\n      var i, part;\n\n      for (i = 0; i < len; i++) {\n        // #252; undo param space replacement\n        serialized[i] = serialized[i].replace(/\\+/g, ' ');\n        part = serialized[i].split('='); // #278; use array instead of object storage, favoring array serializations\n\n        result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);\n      }\n\n      return result;\n    } // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)\n\n\n    function fileUploadXhr(a) {\n      var formdata = new FormData();\n\n      for (var i = 0; i < a.length; i++) {\n        formdata.append(a[i].name, a[i].value);\n      }\n\n      if (options.extraData) {\n        var serializedData = deepSerialize(options.extraData);\n\n        for (i = 0; i < serializedData.length; i++) {\n          if (serializedData[i]) formdata.append(serializedData[i][0], serializedData[i][1]);\n        }\n      }\n\n      options.data = null;\n      var s = $.extend(true, {}, $.ajaxSettings, options, {\n        contentType: false,\n        processData: false,\n        cache: false,\n        type: method || 'POST'\n      });\n\n      if (options.uploadProgress) {\n        // workaround because jqXHR does not expose upload property\n        s.xhr = function () {\n          var xhr = jQuery.ajaxSettings.xhr();\n\n          if (xhr.upload) {\n            xhr.upload.addEventListener('progress', function (event) {\n              var percent = 0;\n              var position = event.loaded || event.position;\n              /*event.position is deprecated*/\n\n              var total = event.total;\n\n              if (event.lengthComputable) {\n                percent = Math.ceil(position / total * 100);\n              }\n\n              options.uploadProgress(event, position, total, percent);\n            }, false);\n          }\n\n          return xhr;\n        };\n      }\n\n      s.data = null;\n      var beforeSend = s.beforeSend;\n\n      s.beforeSend = function (xhr, o) {\n        o.data = formdata;\n        if (beforeSend) beforeSend.call(this, xhr, o);\n      };\n\n      return $.ajax(s);\n    } // private function for handling file uploads (hat tip to YAHOO!)\n\n\n    function fileUploadIframe(a) {\n      var form = $form[0],\n          el,\n          i,\n          s,\n          g,\n          id,\n          $io,\n          io,\n          xhr,\n          sub,\n          n,\n          timedOut,\n          timeoutHandle;\n      var deferred = $.Deferred();\n\n      if (a) {\n        // ensure that every serialized input is still enabled\n        for (i = 0; i < elements.length; i++) {\n          el = $(elements[i]);\n          if (hasProp) el.prop('disabled', false);else el.removeAttr('disabled');\n        }\n      }\n\n      s = $.extend(true, {}, $.ajaxSettings, options);\n      s.context = s.context || s;\n      id = 'jqFormIO' + new Date().getTime();\n\n      if (s.iframeTarget) {\n        $io = $(s.iframeTarget);\n        n = $io.attr2('name');\n        if (!n) $io.attr2('name', id);else id = n;\n      } else {\n        $io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />');\n        $io.css({\n          position: 'absolute',\n          top: '-1000px',\n          left: '-1000px'\n        });\n      }\n\n      io = $io[0];\n      xhr = {\n        // mock object\n        aborted: 0,\n        responseText: null,\n        responseXML: null,\n        status: 0,\n        statusText: 'n/a',\n        getAllResponseHeaders: function getAllResponseHeaders() {},\n        getResponseHeader: function getResponseHeader() {},\n        setRequestHeader: function setRequestHeader() {},\n        abort: function abort(status) {\n          var e = status === 'timeout' ? 'timeout' : 'aborted';\n          log('aborting upload... ' + e);\n          this.aborted = 1;\n\n          try {\n            // #214, #257\n            if (io.contentWindow.document.execCommand) {\n              io.contentWindow.document.execCommand('Stop');\n            }\n          } catch (ignore) {}\n\n          $io.attr('src', s.iframeSrc); // abort op in progress\n\n          xhr.error = e;\n          if (s.error) s.error.call(s.context, xhr, e, status);\n          if (g) $.event.trigger(\"ajaxError\", [xhr, s, e]);\n          if (s.complete) s.complete.call(s.context, xhr, e);\n        }\n      };\n      g = s.global; // trigger ajax global events so that activity/block indicators work like normal\n\n      if (g && 0 === $.active++) {\n        $.event.trigger(\"ajaxStart\");\n      }\n\n      if (g) {\n        $.event.trigger(\"ajaxSend\", [xhr, s]);\n      }\n\n      if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {\n        if (s.global) {\n          $.active--;\n        }\n\n        deferred.reject();\n        return deferred;\n      }\n\n      if (xhr.aborted) {\n        deferred.reject();\n        return deferred;\n      } // add submitting element to data if we know it\n\n\n      sub = form.clk;\n\n      if (sub) {\n        n = sub.name;\n\n        if (n && !sub.disabled) {\n          s.extraData = s.extraData || {};\n          s.extraData[n] = sub.value;\n\n          if (sub.type == \"image\") {\n            s.extraData[n + '.x'] = form.clk_x;\n            s.extraData[n + '.y'] = form.clk_y;\n          }\n        }\n      }\n\n      var CLIENT_TIMEOUT_ABORT = 1;\n      var SERVER_ABORT = 2;\n\n      function getDoc(frame) {\n        /* it looks like contentWindow or contentDocument do not\r\n         * carry the protocol property in ie8, when running under ssl\r\n         * frame.document is the only valid response document, since\r\n         * the protocol is know but not on the other two objects. strange?\r\n         * \"Same origin policy\" http://en.wikipedia.org/wiki/Same_origin_policy\r\n         */\n        var doc = null; // IE8 cascading access check\n\n        try {\n          if (frame.contentWindow) {\n            doc = frame.contentWindow.document;\n          }\n        } catch (err) {\n          // IE8 access denied under ssl & missing protocol\n          log('cannot get iframe.contentWindow document: ' + err);\n        }\n\n        if (doc) {\n          // successful getting content\n          return doc;\n        }\n\n        try {\n          // simply checking may throw in ie8 under ssl or mismatched protocol\n          doc = frame.contentDocument ? frame.contentDocument : frame.document;\n        } catch (err) {\n          // last attempt\n          log('cannot get iframe.contentDocument: ' + err);\n          doc = frame.document;\n        }\n\n        return doc;\n      } // Rails CSRF hack (thanks to Yvan Barthelemy)\n\n\n      var csrf_token = $('meta[name=csrf-token]').attr('content');\n      var csrf_param = $('meta[name=csrf-param]').attr('content');\n\n      if (csrf_param && csrf_token) {\n        s.extraData = s.extraData || {};\n        s.extraData[csrf_param] = csrf_token;\n      } // take a breath so that pending repaints get some cpu time before the upload starts\n\n\n      function doSubmit() {\n        // make sure form attrs are set\n        var t = $form.attr2('target'),\n            a = $form.attr2('action'); // update form attrs in IE friendly way\n\n        form.setAttribute('target', id);\n\n        if (!method) {\n          form.setAttribute('method', 'POST');\n        }\n\n        if (a != s.url) {\n          form.setAttribute('action', s.url);\n        } // ie borks in some cases when setting encoding\n\n\n        if (!s.skipEncodingOverride && (!method || /post/i.test(method))) {\n          $form.attr({\n            encoding: 'multipart/form-data',\n            enctype: 'multipart/form-data'\n          });\n        } // support timout\n\n\n        if (s.timeout) {\n          timeoutHandle = setTimeout(function () {\n            timedOut = true;\n            cb(CLIENT_TIMEOUT_ABORT);\n          }, s.timeout);\n        } // look for server aborts\n\n\n        function checkState() {\n          try {\n            var state = getDoc(io).readyState;\n            log('state = ' + state);\n            if (state && state.toLowerCase() == 'uninitialized') setTimeout(checkState, 50);\n          } catch (e) {\n            log('Server abort: ', e, ' (', e.name, ')');\n            cb(SERVER_ABORT);\n            if (timeoutHandle) clearTimeout(timeoutHandle);\n            timeoutHandle = undefined;\n          }\n        } // add \"extra\" data to form if provided in options\n\n\n        var extraInputs = [];\n\n        try {\n          if (s.extraData) {\n            for (var n in s.extraData) {\n              if (s.extraData.hasOwnProperty(n)) {\n                // if using the $.param format that allows for multiple values with the same name\n                if ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {\n                  extraInputs.push($('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">').val(s.extraData[n].value).appendTo(form)[0]);\n                } else {\n                  extraInputs.push($('<input type=\"hidden\" name=\"' + n + '\">').val(s.extraData[n]).appendTo(form)[0]);\n                }\n              }\n            }\n          }\n\n          if (!s.iframeTarget) {\n            // add iframe to doc and submit the form\n            $io.appendTo('body');\n            if (io.attachEvent) io.attachEvent('onload', cb);else io.addEventListener('load', cb, false);\n          }\n\n          setTimeout(checkState, 15);\n\n          try {\n            form.submit();\n          } catch (err) {\n            // just in case form has element with name/id of 'submit'\n            var submitFn = document.createElement('form').submit;\n            submitFn.apply(form);\n          }\n        } finally {\n          // reset attrs and remove \"extra\" input elements\n          form.setAttribute('action', a);\n\n          if (t) {\n            form.setAttribute('target', t);\n          } else {\n            $form.removeAttr('target');\n          }\n\n          $(extraInputs).remove();\n        }\n      }\n\n      if (s.forceSync) {\n        doSubmit();\n      } else {\n        setTimeout(doSubmit, 10); // this lets dom updates render\n      }\n\n      var data,\n          doc,\n          domCheckCount = 50,\n          callbackProcessed;\n\n      function cb(e) {\n        if (xhr.aborted || callbackProcessed) {\n          return;\n        }\n\n        doc = getDoc(io);\n\n        if (!doc) {\n          log('cannot access response document');\n          e = SERVER_ABORT;\n        }\n\n        if (e === CLIENT_TIMEOUT_ABORT && xhr) {\n          xhr.abort('timeout');\n          deferred.reject(xhr, 'timeout');\n          return;\n        } else if (e == SERVER_ABORT && xhr) {\n          xhr.abort('server abort');\n          deferred.reject(xhr, 'error', 'server abort');\n          return;\n        }\n\n        if (!doc || doc.location.href == s.iframeSrc) {\n          // response not received yet\n          if (!timedOut) return;\n        }\n\n        if (io.detachEvent) io.detachEvent('onload', cb);else io.removeEventListener('load', cb, false);\n        var status = 'success',\n            errMsg;\n\n        try {\n          if (timedOut) {\n            throw 'timeout';\n          }\n\n          var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);\n          log('isXml=' + isXml);\n\n          if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {\n            if (--domCheckCount) {\n              // in some browsers (Opera) the iframe DOM is not always traversable when\n              // the onload callback fires, so we loop a bit to accommodate\n              log('requeing onLoad callback, DOM not available');\n              setTimeout(cb, 250);\n              return;\n            } // let this fall through because server response could be an empty document\n            //log('Could not access iframe DOM after mutiple tries.');\n            //throw 'DOMException: not available';\n\n          } //log('response detected');\n\n\n          var docRoot = doc.body ? doc.body : doc.documentElement;\n          xhr.responseText = docRoot ? docRoot.innerHTML : null;\n          xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;\n          if (isXml) s.dataType = 'xml';\n\n          xhr.getResponseHeader = function (header) {\n            var headers = {\n              'content-type': s.dataType\n            };\n            return headers[header];\n          }; // support for XHR 'status' & 'statusText' emulation :\n\n\n          if (docRoot) {\n            xhr.status = Number(docRoot.getAttribute('status')) || xhr.status;\n            xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;\n          }\n\n          var dt = (s.dataType || '').toLowerCase();\n          var scr = /(json|script|text)/.test(dt);\n\n          if (scr || s.textarea) {\n            // see if user embedded response in textarea\n            var ta = doc.getElementsByTagName('textarea')[0];\n\n            if (ta) {\n              xhr.responseText = ta.value; // support for XHR 'status' & 'statusText' emulation :\n\n              xhr.status = Number(ta.getAttribute('status')) || xhr.status;\n              xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;\n            } else if (scr) {\n              // account for browsers injecting pre around json response\n              var pre = doc.getElementsByTagName('pre')[0];\n              var b = doc.getElementsByTagName('body')[0];\n\n              if (pre) {\n                xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;\n              } else if (b) {\n                xhr.responseText = b.textContent ? b.textContent : b.innerText;\n              }\n            }\n          } else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {\n            xhr.responseXML = toXml(xhr.responseText);\n          }\n\n          try {\n            data = httpData(xhr, dt, s);\n          } catch (err) {\n            status = 'parsererror';\n            xhr.error = errMsg = err || status;\n          }\n        } catch (err) {\n          log('error caught: ', err);\n          status = 'error';\n          xhr.error = errMsg = err || status;\n        }\n\n        if (xhr.aborted) {\n          log('upload aborted');\n          status = null;\n        }\n\n        if (xhr.status) {\n          // we've set xhr.status\n          status = xhr.status >= 200 && xhr.status < 300 || xhr.status === 304 ? 'success' : 'error';\n        } // ordering of these callbacks/triggers is odd, but that's how $.ajax does it\n\n\n        if (status === 'success') {\n          if (s.success) s.success.call(s.context, data, 'success', xhr);\n          deferred.resolve(xhr.responseText, 'success', xhr);\n          if (g) $.event.trigger(\"ajaxSuccess\", [xhr, s]);\n        } else if (status) {\n          if (errMsg === undefined) errMsg = xhr.statusText;\n          if (s.error) s.error.call(s.context, xhr, status, errMsg);\n          deferred.reject(xhr, 'error', errMsg);\n          if (g) $.event.trigger(\"ajaxError\", [xhr, s, errMsg]);\n        }\n\n        if (g) $.event.trigger(\"ajaxComplete\", [xhr, s]);\n\n        if (g && ! --$.active) {\n          $.event.trigger(\"ajaxStop\");\n        }\n\n        if (s.complete) s.complete.call(s.context, xhr, status);\n        callbackProcessed = true;\n        if (s.timeout) clearTimeout(timeoutHandle); // clean up\n\n        setTimeout(function () {\n          if (!s.iframeTarget) $io.remove();\n          xhr.responseXML = null;\n        }, 100);\n      }\n\n      var toXml = $.parseXML || function (s, doc) {\n        // use parseXML if available (jQuery 1.5+)\n        if (window.ActiveXObject) {\n          doc = new ActiveXObject('Microsoft.XMLDOM');\n          doc.async = 'false';\n          doc.loadXML(s);\n        } else {\n          doc = new DOMParser().parseFromString(s, 'text/xml');\n        }\n\n        return doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror' ? doc : null;\n      };\n\n      var parseJSON = $.parseJSON || function (s) {\n        /*jslint evil:true */\n        return window['eval']('(' + s + ')');\n      };\n\n      var httpData = function httpData(xhr, type, s) {\n        // mostly lifted from jq1.4.4\n        var ct = xhr.getResponseHeader('content-type') || '',\n            xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,\n            data = xml ? xhr.responseXML : xhr.responseText;\n\n        if (xml && data.documentElement.nodeName === 'parsererror') {\n          if ($.error) $.error('parsererror');\n        }\n\n        if (s && s.dataFilter) {\n          data = s.dataFilter(data, type);\n        }\n\n        if (typeof data === 'string') {\n          if (type === 'json' || !type && ct.indexOf('json') >= 0) {\n            data = parseJSON(data);\n          } else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) {\n            $.globalEval(data);\n          }\n        }\n\n        return data;\n      };\n\n      return deferred;\n    }\n  };\n  /**\r\n   * ajaxForm() provides a mechanism for fully automating form submission.\r\n   *\r\n   * The advantages of using this method instead of ajaxSubmit() are:\r\n   *\r\n   * 1: This method will include coordinates for <input type=\"image\" /> elements (if the element\r\n   *    is used to submit the form).\r\n   * 2. This method will include the submit element's name/value data (for the element that was\r\n   *    used to submit the form).\r\n   * 3. This method binds the submit() method to the form for you.\r\n   *\r\n   * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely\r\n   * passes the options argument along after properly binding events for submit elements and\r\n   * the form itself.\r\n   */\n\n\n  $.fn.ajaxForm = function (options) {\n    options = options || {};\n    options.delegation = options.delegation && $.isFunction($.fn.on); // in jQuery 1.3+ we can fix mistakes with the ready state\n\n    if (!options.delegation && this.length === 0) {\n      var o = {\n        s: this.selector,\n        c: this.context\n      };\n\n      if (!$.isReady && o.s) {\n        log('DOM not ready, queuing ajaxForm');\n        $(function () {\n          $(o.s, o.c).ajaxForm(options);\n        });\n        return this;\n      } // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()\n\n\n      log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));\n      return this;\n    }\n\n    if (options.delegation) {\n      $(document).off('submit.form-plugin', this.selector, doAjaxSubmit).off('click.form-plugin', this.selector, captureSubmittingElement).on('submit.form-plugin', this.selector, options, doAjaxSubmit).on('click.form-plugin', this.selector, options, captureSubmittingElement);\n      return this;\n    }\n\n    return this.ajaxFormUnbind().bind('submit.form-plugin', options, doAjaxSubmit).bind('click.form-plugin', options, captureSubmittingElement);\n  }; // private event handlers\n\n\n  function doAjaxSubmit(e) {\n    /*jshint validthis:true */\n    var options = e.data;\n\n    if (!e.isDefaultPrevented()) {\n      // if event has been canceled, don't proceed\n      e.preventDefault();\n      $(this).ajaxSubmit(options);\n    }\n  }\n\n  function captureSubmittingElement(e) {\n    /*jshint validthis:true */\n    var target = e.target;\n    var $el = $(target);\n\n    if (!$el.is(\"[type=submit],[type=image]\")) {\n      // is this a child element of the submit el?  (ex: a span within a button)\n      var t = $el.closest('[type=submit]');\n\n      if (t.length === 0) {\n        return;\n      }\n\n      target = t[0];\n    }\n\n    var form = this;\n    form.clk = target;\n\n    if (target.type == 'image') {\n      if (e.offsetX !== undefined) {\n        form.clk_x = e.offsetX;\n        form.clk_y = e.offsetY;\n      } else if (typeof $.fn.offset == 'function') {\n        var offset = $el.offset();\n        form.clk_x = e.pageX - offset.left;\n        form.clk_y = e.pageY - offset.top;\n      } else {\n        form.clk_x = e.pageX - target.offsetLeft;\n        form.clk_y = e.pageY - target.offsetTop;\n      }\n    } // clear form vars\n\n\n    setTimeout(function () {\n      form.clk = form.clk_x = form.clk_y = null;\n    }, 100);\n  } // ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm\n\n\n  $.fn.ajaxFormUnbind = function () {\n    return this.unbind('submit.form-plugin click.form-plugin');\n  };\n  /**\r\n   * formToArray() gathers form element data into an array of objects that can\r\n   * be passed to any of the following ajax functions: $.get, $.post, or load.\r\n   * Each object in the array has both a 'name' and 'value' property.  An example of\r\n   * an array for a simple login form might be:\r\n   *\r\n   * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]\r\n   *\r\n   * It is this array that is passed to pre-submit callback functions provided to the\r\n   * ajaxSubmit() and ajaxForm() methods.\r\n   */\n\n\n  $.fn.formToArray = function (semantic, elements) {\n    var a = [];\n\n    if (this.length === 0) {\n      return a;\n    }\n\n    var form = this[0];\n    var els = semantic ? form.getElementsByTagName('*') : form.elements;\n\n    if (!els) {\n      return a;\n    }\n\n    var i, j, n, v, el, max, jmax;\n\n    for (i = 0, max = els.length; i < max; i++) {\n      el = els[i];\n      n = el.name;\n\n      if (!n || el.disabled) {\n        continue;\n      }\n\n      if (semantic && form.clk && el.type == \"image\") {\n        // handle image inputs on the fly when semantic == true\n        if (form.clk == el) {\n          a.push({\n            name: n,\n            value: $(el).val(),\n            type: el.type\n          });\n          a.push({\n            name: n + '.x',\n            value: form.clk_x\n          }, {\n            name: n + '.y',\n            value: form.clk_y\n          });\n        }\n\n        continue;\n      }\n\n      v = $.fieldValue(el, true);\n\n      if (v && v.constructor == Array) {\n        if (elements) elements.push(el);\n\n        for (j = 0, jmax = v.length; j < jmax; j++) {\n          a.push({\n            name: n,\n            value: v[j]\n          });\n        }\n      } else if (feature.fileapi && el.type == 'file') {\n        if (elements) elements.push(el);\n        var files = el.files;\n\n        if (files.length) {\n          for (j = 0; j < files.length; j++) {\n            a.push({\n              name: n,\n              value: files[j],\n              type: el.type\n            });\n          }\n        } else {\n          // #180\n          a.push({\n            name: n,\n            value: '',\n            type: el.type\n          });\n        }\n      } else if (v !== null && typeof v != 'undefined') {\n        if (elements) elements.push(el);\n        a.push({\n          name: n,\n          value: v,\n          type: el.type,\n          required: el.required\n        });\n      }\n    }\n\n    if (!semantic && form.clk) {\n      // input type=='image' are not found in elements array! handle it here\n      var $input = $(form.clk),\n          input = $input[0];\n      n = input.name;\n\n      if (n && !input.disabled && input.type == 'image') {\n        a.push({\n          name: n,\n          value: $input.val()\n        });\n        a.push({\n          name: n + '.x',\n          value: form.clk_x\n        }, {\n          name: n + '.y',\n          value: form.clk_y\n        });\n      }\n    }\n\n    return a;\n  };\n  /**\r\n   * Serializes form data into a 'submittable' string. This method will return a string\r\n   * in the format: name1=value1&amp;name2=value2\r\n   */\n\n\n  $.fn.formSerialize = function (semantic) {\n    //hand off to jQuery.param for proper encoding\n    return $.param(this.formToArray(semantic));\n  };\n  /**\r\n   * Serializes all field elements in the jQuery object into a query string.\r\n   * This method will return a string in the format: name1=value1&amp;name2=value2\r\n   */\n\n\n  $.fn.fieldSerialize = function (successful) {\n    var a = [];\n    this.each(function () {\n      var n = this.name;\n\n      if (!n) {\n        return;\n      }\n\n      var v = $.fieldValue(this, successful);\n\n      if (v && v.constructor == Array) {\n        for (var i = 0, max = v.length; i < max; i++) {\n          a.push({\n            name: n,\n            value: v[i]\n          });\n        }\n      } else if (v !== null && typeof v != 'undefined') {\n        a.push({\n          name: this.name,\n          value: v\n        });\n      }\n    }); //hand off to jQuery.param for proper encoding\n\n    return $.param(a);\n  };\n  /**\r\n   * Returns the value(s) of the element in the matched set.  For example, consider the following form:\r\n   *\r\n   *  <form><fieldset>\r\n   *      <input name=\"A\" type=\"text\" />\r\n   *      <input name=\"A\" type=\"text\" />\r\n   *      <input name=\"B\" type=\"checkbox\" value=\"B1\" />\r\n   *      <input name=\"B\" type=\"checkbox\" value=\"B2\"/>\r\n   *      <input name=\"C\" type=\"radio\" value=\"C1\" />\r\n   *      <input name=\"C\" type=\"radio\" value=\"C2\" />\r\n   *  </fieldset></form>\r\n   *\r\n   *  var v = $('input[type=text]').fieldValue();\r\n   *  // if no values are entered into the text inputs\r\n   *  v == ['','']\r\n   *  // if values entered into the text inputs are 'foo' and 'bar'\r\n   *  v == ['foo','bar']\r\n   *\r\n   *  var v = $('input[type=checkbox]').fieldValue();\r\n   *  // if neither checkbox is checked\r\n   *  v === undefined\r\n   *  // if both checkboxes are checked\r\n   *  v == ['B1', 'B2']\r\n   *\r\n   *  var v = $('input[type=radio]').fieldValue();\r\n   *  // if neither radio is checked\r\n   *  v === undefined\r\n   *  // if first radio is checked\r\n   *  v == ['C1']\r\n   *\r\n   * The successful argument controls whether or not the field element must be 'successful'\r\n   * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).\r\n   * The default value of the successful argument is true.  If this value is false the value(s)\r\n   * for each element is returned.\r\n   *\r\n   * Note: This method *always* returns an array.  If no valid value can be determined the\r\n   *    array will be empty, otherwise it will contain one or more values.\r\n   */\n\n\n  $.fn.fieldValue = function (successful) {\n    for (var val = [], i = 0, max = this.length; i < max; i++) {\n      var el = this[i];\n      var v = $.fieldValue(el, successful);\n\n      if (v === null || typeof v == 'undefined' || v.constructor == Array && !v.length) {\n        continue;\n      }\n\n      if (v.constructor == Array) $.merge(val, v);else val.push(v);\n    }\n\n    return val;\n  };\n  /**\r\n   * Returns the value of the field element.\r\n   */\n\n\n  $.fieldValue = function (el, successful) {\n    var n = el.name,\n        t = el.type,\n        tag = el.tagName.toLowerCase();\n\n    if (successful === undefined) {\n      successful = true;\n    }\n\n    if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1)) {\n      return null;\n    }\n\n    if (tag == 'select') {\n      var index = el.selectedIndex;\n\n      if (index < 0) {\n        return null;\n      }\n\n      var a = [],\n          ops = el.options;\n      var one = t == 'select-one';\n      var max = one ? index + 1 : ops.length;\n\n      for (var i = one ? index : 0; i < max; i++) {\n        var op = ops[i];\n\n        if (op.selected) {\n          var v = op.value;\n\n          if (!v) {\n            // extra pain for IE...\n            v = op.attributes && op.attributes['value'] && !op.attributes['value'].specified ? op.text : op.value;\n          }\n\n          if (one) {\n            return v;\n          }\n\n          a.push(v);\n        }\n      }\n\n      return a;\n    }\n\n    return $(el).val();\n  };\n  /**\r\n   * Clears the form data.  Takes the following actions on the form's input fields:\r\n   *  - input text fields will have their 'value' property set to the empty string\r\n   *  - select elements will have their 'selectedIndex' property set to -1\r\n   *  - checkbox and radio inputs will have their 'checked' property set to false\r\n   *  - inputs of type submit, button, reset, and hidden will *not* be effected\r\n   *  - button elements will *not* be effected\r\n   */\n\n\n  $.fn.clearForm = function (includeHidden) {\n    return this.each(function () {\n      $('input,select,textarea', this).clearFields(includeHidden);\n    });\n  };\n  /**\r\n   * Clears the selected form elements.\r\n   */\n\n\n  $.fn.clearFields = $.fn.clearInputs = function (includeHidden) {\n    var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list\n\n    return this.each(function () {\n      var t = this.type,\n          tag = this.tagName.toLowerCase();\n\n      if (re.test(t) || tag == 'textarea') {\n        this.value = '';\n      } else if (t == 'checkbox' || t == 'radio') {\n        this.checked = false;\n      } else if (tag == 'select') {\n        this.selectedIndex = -1;\n      } else if (t == \"file\") {\n        if (/MSIE/.test(navigator.userAgent)) {\n          $(this).replaceWith($(this).clone(true));\n        } else {\n          $(this).val('');\n        }\n      } else if (includeHidden) {\n        // includeHidden can be the value true, or it can be a selector string\n        // indicating a special test; for example:\n        //  $('#myForm').clearForm('.special:hidden')\n        // the above would clean hidden inputs that have the class of 'special'\n        if (includeHidden === true && /hidden/.test(t) || typeof includeHidden == 'string' && $(this).is(includeHidden)) this.value = '';\n      }\n    });\n  };\n  /**\r\n   * Resets the form data.  Causes all form elements to be reset to their original value.\r\n   */\n\n\n  $.fn.resetForm = function () {\n    return this.each(function () {\n      // guard against an input with the name of 'reset'\n      // note that IE reports the reset function as an 'object'\n      if (typeof this.reset == 'function' || _typeof(this.reset) == 'object' && !this.reset.nodeType) {\n        this.reset();\n      }\n    });\n  };\n  /**\r\n   * Enables or disables any matching elements.\r\n   */\n\n\n  $.fn.enable = function (b) {\n    if (b === undefined) {\n      b = true;\n    }\n\n    return this.each(function () {\n      this.disabled = !b;\n    });\n  };\n  /**\r\n   * Checks/unchecks any matching checkboxes or radio buttons and\r\n   * selects/deselects and matching option elements.\r\n   */\n\n\n  $.fn.selected = function (select) {\n    if (select === undefined) {\n      select = true;\n    }\n\n    return this.each(function () {\n      var t = this.type;\n\n      if (t == 'checkbox' || t == 'radio') {\n        this.checked = select;\n      } else if (this.tagName.toLowerCase() == 'option') {\n        var $sel = $(this).parent('select');\n\n        if (select && $sel[0] && $sel[0].type == 'select-one') {\n          // deselect all other options\n          $sel.find('option').selected(false);\n        }\n\n        this.selected = select;\n      }\n    });\n  }; // expose debug var\n\n\n  $.fn.ajaxSubmit.debug = false; // helper fn for console logging\n\n  function log() {\n    if (!$.fn.ajaxSubmit.debug) return;\n    var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, '');\n\n    if (window.console && window.console.log) {\n      window.console.log(msg);\n    } else if (window.opera && window.opera.postError) {\n      window.opera.postError(msg);\n    }\n  }\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery.form.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/jquery.form.js"]();
/******/ 	
/******/ })()
;